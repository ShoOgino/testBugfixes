{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","commits":[{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader().getReplicaProps(collection, shardId, leaderReplica.getName(), null, ZkStateReader.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, ZkStateReader.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader().getReplicaProps(collection, shardId, leaderReplica.getName(), null, ZkStateReader.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, ZkStateReader.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n\n          assert TestInjection.injectFailReplicaRequests();\n          \n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b800611029360525d55dc4797bcdfc2a689b7fe","date":1455310686,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      assert TestInjection.injectUpdateRandomPause();\n      \n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n\n          assert TestInjection.injectFailReplicaRequests();\n          \n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n\n          assert TestInjection.injectFailReplicaRequests();\n          \n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14a570ea289e0d989057de081e0a4fb0255f4a53","date":1508372334,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward onto the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    List<Node> nodes = null;\n\n    // if we are in zk mode...\n    if (zkEnabled) {\n\n      assert TestInjection.injectUpdateRandomPause();\n      \n      if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return nodes;\n      }\n\n      ClusterState cstate = zkController.getClusterState();      \n      DocCollection coll = cstate.getCollection(collection);\n      Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n      if (slice == null) {\n        // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n        // a signal to use the slice of this core.\n        // TODO: what if this core is not in the targeted collection?\n        String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n        slice = coll.getSlice(shardId);\n        if (slice == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n        }\n      }\n\n      DistribPhase phase =\n          DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n      if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n        if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n          // locally we think we are leader but the request says it came FROMLEADER\n          // that could indicate a problem, let the full logic below figure it out\n        } else {\n\n          assert TestInjection.injectFailReplicaRequests();\n          \n          isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n          forwardToLeader = false;\n          return nodes;\n        }\n      }\n\n      String shardId = slice.getName();\n\n      try {\n        // Not equivalent to getLeaderProps, which does retries to find a leader.\n        // Replica leader = slice.getLeader();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, shardId);\n        isLeader = leaderReplica.getName().equals(\n            req.getCore().getCoreDescriptor().getCloudDescriptor()\n                .getCoreNodeName());\n\n        if (!isLeader) {\n          isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n          if (isSubShardLeader) {\n            String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n            slice = coll.getSlice(myShardId);\n            shardId = myShardId;\n            leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n            List<ZkCoreNodeProps> myReplicas = zkController.getZkStateReader()\n                .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n          }\n        }\n\n        doDefensiveChecks(phase);\n\n        // if request is coming from another collection then we want it to be sent to all replicas\n        // even if its phase is FROMLEADER\n        String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n        if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n          // we are coming from the leader, just go local - add no urls\n          forwardToLeader = false;\n        } else if (isLeader || isSubShardLeader) {\n          // that means I want to forward onto my replicas...\n          // so get the replicas...\n          forwardToLeader = false;\n          List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n              .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n\n          if (replicaProps != null) {\n            if (nodes == null)  {\n            nodes = new ArrayList<>(replicaProps.size());\n            }\n            // check for test param that lets us miss replicas\n            String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n            Set<String> skipListSet = null;\n            if (skipList != null) {\n              skipListSet = new HashSet<>(skipList.length);\n              skipListSet.addAll(Arrays.asList(skipList));\n              log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n            }\n\n            for (ZkCoreNodeProps props : replicaProps) {\n              if (skipList != null) {\n                boolean skip = skipListSet.contains(props.getCoreUrl());\n                log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n                if (!skip) {\n                    nodes.add(new StdNode(props, collection, shardId));\n                }\n              } else {\n                  nodes.add(new StdNode(props, collection, shardId));\n              }\n            }\n          }\n\n        } else {\n          // I need to forward onto the leader...\n          nodes = new ArrayList<>(1);\n          nodes.add(new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n          forwardToLeader = true;\n        }\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"601f914e4448cab7640fecfb5d15f8f2e2af0bf6","date":1508947828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward onto the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward onto the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward onto the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","date":1509551229,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (req.getCore().getCoreDescriptor().getCloudDescriptor().isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (ZkCoreNodeProps props : replicaProps) {\n          String coreNodeName = ((Replica) props.getNodeProps()).getName();\n          if (skipList != null && skipListSet.contains(props.getCoreUrl())) {\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && !zkShardTerms.canBecomeLeader(coreNodeName)) {\n            log.info(\"skip url:{} cause its term is less than leader\", props.getCoreUrl());\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          if (skipList != null) {\n            boolean skip = skipListSet.contains(props.getCoreUrl());\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:\" + skip);\n            if (!skip) {\n              nodes.add(new StdNode(props, collection, shardId));\n            }\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n        if (replicaProps == null) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicaProps.size());\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (ZkCoreNodeProps props : replicaProps) {\n          String coreNodeName = ((Replica) props.getNodeProps()).getName();\n          if (skipList != null && skipListSet.contains(props.getCoreUrl())) {\n            log.info(\"check url:\" + props.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && !zkShardTerms.canBecomeLeader(coreNodeName)) {\n            log.info(\"skip url:{} cause its term is less than leader\", props.getCoreUrl());\n          } else {\n            nodes.add(new StdNode(props, collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new RetryNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":["14a570ea289e0d989057de081e0a4fb0255f4a53","8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(!isOldLIRMode && zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"536b47681314488eb94706248be6047a3f142841":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"84f20f331d8001864545c7021812d8c6509c7593":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"747dd71fefcbc7142661c25334b74c518fef4d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["747dd71fefcbc7142661c25334b74c518fef4d81"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["14a570ea289e0d989057de081e0a4fb0255f4a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"14a570ea289e0d989057de081e0a4fb0255f4a53":["1b800611029360525d55dc4797bcdfc2a689b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"1b800611029360525d55dc4797bcdfc2a689b7fe":["536b47681314488eb94706248be6047a3f142841"]},"commit2Childs":{"536b47681314488eb94706248be6047a3f142841":["1b800611029360525d55dc4797bcdfc2a689b7fe"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"747dd71fefcbc7142661c25334b74c518fef4d81":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["536b47681314488eb94706248be6047a3f142841"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747dd71fefcbc7142661c25334b74c518fef4d81"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"14a570ea289e0d989057de081e0a4fb0255f4a53":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b800611029360525d55dc4797bcdfc2a689b7fe":["14a570ea289e0d989057de081e0a4fb0255f4a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}