{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"marker\", \"marker\")), 1).totalHits;\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"marker\", \"marker\")), 1).totalHits;\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"marker\", \"marker\")), 1).totalHits;\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec317d5d3de749e12abcc9e6f976d765638fe9e2","date":1454411397,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"marker\", \"marker\")), 1).totalHits;\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new TermQuery(new Term(\"body\", \"the\")), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, stop, is, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, stop, is, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e99754ec0861550de359d775134f6a25663fad","date":1455113389,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, stop, is, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        synchronized(warmingSegments) {\n          for(MergePreCopy preCopy : warmingSegments) {\n            message(\"warming segment \" + preCopy.files.keySet());\n            boolean found = false;\n            synchronized (preCopy.connections) {\n              for(Connection c : preCopy.connections) {\n                if (c.destTCPPort == replicaTCPPort) {\n                  found = true;\n                  break;\n                }\n              }\n            }\n\n            if (found) {\n              message(\"this replica is already warming this segment; skipping\");\n              // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n              // replica sent us this command:\n              continue;\n            }\n\n            // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n            Connection c = new Connection(replicaTCPPort);\n            if (preCopy.tryAddConnection(c) == false) {\n              // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n              // case the segment will be copied over in the next nrt point sent to this replica\n              message(\"failed to add connection to segment warmer (too late); closing\");\n              c.close();\n            }\n            c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n            c.out.writeVLong(primaryGen);\n            c.out.writeVInt(tcpPort);\n            SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n            c.flush();\n            c.s.shutdownOutput();\n            message(\"successfully started warming\");\n          }\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, stop, is, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        for(MergePreCopy preCopy : warmingSegments) {\n          message(\"warming segment \" + preCopy.files.keySet());\n          boolean found = false;\n          synchronized (preCopy.connections) {\n            for(Connection c : preCopy.connections) {\n              if (c.destTCPPort == replicaTCPPort) {\n                found = true;\n                break;\n              }\n            }\n          }\n\n          if (found) {\n            message(\"this replica is already warming this segment; skipping\");\n            // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n            // replica sent us this command:\n            continue;\n          }\n\n          // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n          Connection c = new Connection(replicaTCPPort);\n          if (preCopy.tryAddConnection(c) == false) {\n            // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n            // case the segment will be copied over in the next nrt point sent to this replica\n            message(\"failed to add connection to segment warmer (too late); closing\");\n            c.close();\n          }\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"successfully started warming\");\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleOneConnection(Random,ServerSocket,AtomicBoolean,InputStream,Socket,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Handles incoming request to the naive TCP server wrapping this node */\n  void handleOneConnection(Random random, ServerSocket ss, AtomicBoolean stop, InputStream is, Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n\n    outer:\n    while (true) {\n      byte cmd;\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        break;\n      }\n\n      switch (cmd) {\n\n      case CMD_FLUSH:\n        handleFlush(in, out, bos);\n        break;\n\n      case CMD_FETCH_FILES:\n        // Replica (other node) is asking us (primary node) for files to copy\n        handleFetchFiles(random, socket, in, out, bos);\n        break;\n\n      case CMD_INDEXING:\n        handleIndexing(socket, stop, is, in, out, bos);\n        break;\n\n      case CMD_GET_SEARCHING_VERSION:\n        out.writeVLong(getCurrentSearchingVersion());\n        break;\n\n      case CMD_SEARCH:\n        {\n          Thread.currentThread().setName(\"search\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new TermQuery(new Term(\"body\", \"the\")));\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_SEARCH_ALL:\n        {\n          Thread.currentThread().setName(\"search all\");\n          IndexSearcher searcher = mgr.acquire();\n          try {\n            long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n            int hitCount = searcher.count(new MatchAllDocsQuery());\n            //message(\"version=\" + version + \" searcher=\" + searcher);\n            out.writeVLong(version);\n            out.writeVInt(hitCount);\n            bos.flush();\n          } finally {\n            mgr.release(searcher);\n          }\n        }\n        continue outer;\n\n      case CMD_MARKER_SEARCH:\n        {\n          Thread.currentThread().setName(\"msearch\");\n          int expectedAtLeastCount = in.readVInt();\n          verifyAtLeastMarkerCount(expectedAtLeastCount, out);\n          bos.flush();\n        }\n        continue outer;\n\n      case CMD_COMMIT:\n        Thread.currentThread().setName(\"commit\");\n        commit();\n        out.writeByte((byte) 1);\n        break;\n\n      case CMD_CLOSE:\n        Thread.currentThread().setName(\"close\");\n        message(\"top close: now close server socket\");\n        ss.close();\n        out.writeByte((byte) 1);\n        message(\"top close: done close server socket\");\n        break;\n\n      case CMD_SET_REPLICAS:\n        Thread.currentThread().setName(\"set repls\");\n        int count = in.readVInt();\n        int[] replicaIDs = new int[count];\n        int[] replicaTCPPorts = new int[count];\n        for(int i=0;i<count;i++) {\n          replicaIDs[i] = in.readVInt();\n          replicaTCPPorts[i] = in.readVInt();\n        }\n        out.writeByte((byte) 1);\n        setReplicas(replicaIDs, replicaTCPPorts);\n        break;\n\n      case CMD_NEW_REPLICA:\n        Thread.currentThread().setName(\"new repl\");\n        int replicaTCPPort = in.readVInt();\n        message(\"new replica: \" + warmingSegments.size() + \" current warming merges\");\n        // Step through all currently warming segments and try to add this replica if it isn't there already:\n        synchronized(warmingSegments) {\n          for(MergePreCopy preCopy : warmingSegments) {\n            message(\"warming segment \" + preCopy.files.keySet());\n            boolean found = false;\n            synchronized (preCopy.connections) {\n              for(Connection c : preCopy.connections) {\n                if (c.destTCPPort == replicaTCPPort) {\n                  found = true;\n                  break;\n                }\n              }\n            }\n\n            if (found) {\n              message(\"this replica is already warming this segment; skipping\");\n              // It's possible (maybe) that the replica started up, then a merge kicked off, and it warmed to this new replica, all before the\n              // replica sent us this command:\n              continue;\n            }\n\n            // OK, this new replica is not already warming this segment, so attempt (could fail) to start warming now:\n\n            Connection c = new Connection(replicaTCPPort);\n            if (preCopy.tryAddConnection(c) == false) {\n              // This can happen, if all other replicas just now finished warming this segment, and so we were just a bit too late.  In this\n              // case the segment will be copied over in the next nrt point sent to this replica\n              message(\"failed to add connection to segment warmer (too late); closing\");\n              c.close();\n            }\n            c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n            c.out.writeVLong(primaryGen);\n            c.out.writeVInt(tcpPort);\n            SimpleServer.writeFilesMetaData(c.out, preCopy.files);\n            c.flush();\n            c.s.shutdownOutput();\n            message(\"successfully started warming\");\n          }\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"unrecognized cmd=\" + cmd + \" via socket=\" + socket);\n      }\n      bos.flush();\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e99754ec0861550de359d775134f6a25663fad":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6e99754ec0861550de359d775134f6a25663fad"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"f6e99754ec0861550de359d775134f6a25663fad":["68496c2200e559fb7802f7575427b7a482659afb"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["f6e99754ec0861550de359d775134f6a25663fad"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["c3d0d2e502d016d967c45c0c972ace4d02885e07","33b6213064c76adb293e52f03a3eb1528c5b1858"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}