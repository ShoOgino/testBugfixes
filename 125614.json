{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_empty() throws Exception {\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(C_DELTA_QUERY, childDeltaRow.iterator());\n    MockDataSource.setIterator(C_DELETED_PK_QUERY, Collections.EMPTY_LIST.iterator());\n    \n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id=2\", childParentDeltaRow.iterator());\n    \n    MockDataSource.setIterator(P_DELTA_QUERY, Collections.EMPTY_LIST.iterator());\n\n    List parentDeltaImportRow = new ArrayList();\n    parentDeltaImportRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentDeltaImportRow.iterator());\n\n    List childDeltaImportRow = new ArrayList();\n    childDeltaImportRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childDeltaImportRow.iterator());\n    \n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_empty\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_empty() throws Exception {\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(C_DELTA_QUERY, childDeltaRow.iterator());\n    MockDataSource.setIterator(C_DELETED_PK_QUERY, Collections.EMPTY_LIST.iterator());\n    \n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id=2\", childParentDeltaRow.iterator());\n    \n    MockDataSource.setIterator(P_DELTA_QUERY, Collections.EMPTY_LIST.iterator());\n\n    List parentDeltaImportRow = new ArrayList();\n    parentDeltaImportRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentDeltaImportRow.iterator());\n\n    List childDeltaImportRow = new ArrayList();\n    childDeltaImportRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childDeltaImportRow.iterator());\n    \n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_empty\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_empty() throws Exception {\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(C_DELTA_QUERY, childDeltaRow.iterator());\n    MockDataSource.setIterator(C_DELETED_PK_QUERY, Collections.EMPTY_LIST.iterator());\n    \n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id=2\", childParentDeltaRow.iterator());\n    \n    MockDataSource.setIterator(P_DELTA_QUERY, Collections.EMPTY_LIST.iterator());\n\n    List parentDeltaImportRow = new ArrayList();\n    parentDeltaImportRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentDeltaImportRow.iterator());\n\n    List childDeltaImportRow = new ArrayList();\n    childDeltaImportRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childDeltaImportRow.iterator());\n    \n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_empty\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_empty() throws Exception {\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(C_DELTA_QUERY, childDeltaRow.iterator());\n    MockDataSource.setIterator(C_DELETED_PK_QUERY, Collections.EMPTY_LIST.iterator());\n    \n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id=2\", childParentDeltaRow.iterator());\n    \n    MockDataSource.setIterator(P_DELTA_QUERY, Collections.EMPTY_LIST.iterator());\n\n    List parentDeltaImportRow = new ArrayList();\n    parentDeltaImportRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentDeltaImportRow.iterator());\n\n    List childDeltaImportRow = new ArrayList();\n    childDeltaImportRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childDeltaImportRow.iterator());\n    \n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_empty\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_empty().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_empty() throws Exception {\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(C_DELTA_QUERY, childDeltaRow.iterator());\n    MockDataSource.setIterator(C_DELETED_PK_QUERY, Collections.EMPTY_LIST.iterator());\n    \n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id=2\", childParentDeltaRow.iterator());\n    \n    MockDataSource.setIterator(P_DELTA_QUERY, Collections.EMPTY_LIST.iterator());\n\n    List parentDeltaImportRow = new ArrayList();\n    parentDeltaImportRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentDeltaImportRow.iterator());\n\n    List childDeltaImportRow = new ArrayList();\n    childDeltaImportRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childDeltaImportRow.iterator());\n    \n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_empty\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}