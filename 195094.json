{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","commits":[{"id":"15b2c0b1d50ad54ea367036e4bd9376be42c2805","date":1392752466,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<FuzzyQuery>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<WildcardQuery>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<RegexpQuery>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<PrefixQuery>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","sourceNew":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n  }\n\n","sourceOld":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<FuzzyQuery>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<WildcardQuery>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<RegexpQuery>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<PrefixQuery>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","sourceNew":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n\n  }\n\n","sourceOld":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testNoSuchMultiTermsInNear().mjava","sourceNew":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.count(near));\n\n  }\n\n","sourceOld":"  public void testNoSuchMultiTermsInNear() throws Exception {\n    //test to make sure non existent multiterms aren't throwing null pointer exceptions  \n    FuzzyQuery fuzzyNoSuch = new FuzzyQuery(new Term(\"field\", \"noSuch\"), 1, 0, 1, false);\n    SpanQuery spanNoSuch = new SpanMultiTermQueryWrapper<>(fuzzyNoSuch);\n    SpanQuery term = new SpanTermQuery(new Term(\"field\", \"brown\"));\n    SpanQuery near = new SpanNearQuery(new SpanQuery[]{term, spanNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    //flip order\n    near = new SpanNearQuery(new SpanQuery[]{spanNoSuch, term}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    WildcardQuery wcNoSuch = new WildcardQuery(new Term(\"field\", \"noSuch*\"));\n    SpanQuery spanWCNoSuch = new SpanMultiTermQueryWrapper<>(wcNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanWCNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n  \n    RegexpQuery rgxNoSuch = new RegexpQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanRgxNoSuch = new SpanMultiTermQueryWrapper<>(rgxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanRgxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    PrefixQuery prfxNoSuch = new PrefixQuery(new Term(\"field\", \"noSuch\"));\n    SpanQuery spanPrfxNoSuch = new SpanMultiTermQueryWrapper<>(prfxNoSuch);\n    near = new SpanNearQuery(new SpanQuery[]{term, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n    //test single noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n    \n    //test double noSuch\n    near = new SpanNearQuery(new SpanQuery[]{spanPrfxNoSuch, spanPrfxNoSuch}, 1, true);\n    assertEquals(0, searcher.search(near, 10).totalHits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}