{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a\", \"foo\", true);\n    add(\"a b\", \"bar fee\", true);\n    add(\"b c\", \"dog collar\", true);\n    add(\"c d\", \"dog harness holder extras\", true);\n    add(\"m c e\", \"dog barks loudly\", false);\n    add(\"i j k\", \"feep\", true);\n\n    add(\"e f\", \"foo bar\", false);\n    add(\"e f\", \"baz bee\", false);\n\n    add(\"z\", \"boo\", false);\n    add(\"y\", \"bee\", true);\n\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    verify(\"a b c\", \"a/bar b/fee c\");\n\n    // syn output extends beyond input tokens\n    verify(\"x a b c d\", \"x a/bar b/fee c/dog d/harness holder extras\");\n\n    verify(\"a b a\", \"a/bar b/fee a/foo\");\n\n    // outputs that add to one another:\n    verify(\"c d c d\", \"c/dog d/harness c/holder/dog d/extras/harness holder extras\");\n\n    // two outputs for same input\n    verify(\"e f\", \"foo/baz bar/bee\");\n\n    // verify multi-word / single-output offsets:\n    verify(\"g i j k g\", \"g i/feep:7_3 j k g\");\n\n    // mixed keepOrig true/false:\n    verify(\"a m c e x\", \"a/foo dog barks loudly x\");\n    verify(\"c d m c e x\", \"c/dog d/harness holder/dog extras/barks loudly x\");\n    assertTrue(tokensOut.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    verify(\"p q r s t\", \"p q r s t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n\n    // no captureStates when only single-input syns, w/ no\n    // lookahead needed, matched\n    verify(\"p q z y t\", \"p q boo y/bee t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a\", \"foo\", true);\n    add(\"a b\", \"bar fee\", true);\n    add(\"b c\", \"dog collar\", true);\n    add(\"c d\", \"dog harness holder extras\", true);\n    add(\"m c e\", \"dog barks loudly\", false);\n    add(\"i j k\", \"feep\", true);\n\n    add(\"e f\", \"foo bar\", false);\n    add(\"e f\", \"baz bee\", false);\n\n    add(\"z\", \"boo\", false);\n    add(\"y\", \"bee\", true);\n\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    verify(\"a b c\", \"a/bar b/fee c\");\n\n    // syn output extends beyond input tokens\n    verify(\"x a b c d\", \"x a/bar b/fee c/dog d/harness holder extras\");\n\n    verify(\"a b a\", \"a/bar b/fee a/foo\");\n\n    // outputs that add to one another:\n    verify(\"c d c d\", \"c/dog d/harness c/holder/dog d/extras/harness holder extras\");\n\n    // two outputs for same input\n    verify(\"e f\", \"foo/baz bar/bee\");\n\n    // verify multi-word / single-output offsets:\n    verify(\"g i j k g\", \"g i/feep:7_3 j k g\");\n\n    // mixed keepOrig true/false:\n    verify(\"a m c e x\", \"a/foo dog barks loudly x\");\n    verify(\"c d m c e x\", \"c/dog d/harness holder/dog extras/barks loudly x\");\n    assertTrue(tokensOut.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    verify(\"p q r s t\", \"p q r s t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n\n    // no captureStates when only single-input syns, w/ no\n    // lookahead needed, matched\n    verify(\"p q z y t\", \"p q boo y/bee t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a\", \"foo\", true);\n    add(\"a b\", \"bar fee\", true);\n    add(\"b c\", \"dog collar\", true);\n    add(\"c d\", \"dog harness holder extras\", true);\n    add(\"m c e\", \"dog barks loudly\", false);\n    add(\"i j k\", \"feep\", true);\n\n    add(\"e f\", \"foo bar\", false);\n    add(\"e f\", \"baz bee\", false);\n\n    add(\"z\", \"boo\", false);\n    add(\"y\", \"bee\", true);\n\n    tokensIn = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    tokensIn.setReader(new StringReader(\"a\"));\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    verify(\"a b c\", \"a/bar b/fee c\");\n\n    // syn output extends beyond input tokens\n    verify(\"x a b c d\", \"x a/bar b/fee c/dog d/harness holder extras\");\n\n    verify(\"a b a\", \"a/bar b/fee a/foo\");\n\n    // outputs that add to one another:\n    verify(\"c d c d\", \"c/dog d/harness c/holder/dog d/extras/harness holder extras\");\n\n    // two outputs for same input\n    verify(\"e f\", \"foo/baz bar/bee\");\n\n    // verify multi-word / single-output offsets:\n    verify(\"g i j k g\", \"g i/feep:7_3 j k g\");\n\n    // mixed keepOrig true/false:\n    verify(\"a m c e x\", \"a/foo dog barks loudly x\");\n    verify(\"c d m c e x\", \"c/dog d/harness holder/dog extras/barks loudly x\");\n    assertTrue(tokensOut.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    verify(\"p q r s t\", \"p q r s t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n\n    // no captureStates when only single-input syns, w/ no\n    // lookahead needed, matched\n    verify(\"p q z y t\", \"p q boo y/bee t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a\", \"foo\", true);\n    add(\"a b\", \"bar fee\", true);\n    add(\"b c\", \"dog collar\", true);\n    add(\"c d\", \"dog harness holder extras\", true);\n    add(\"m c e\", \"dog barks loudly\", false);\n    add(\"i j k\", \"feep\", true);\n\n    add(\"e f\", \"foo bar\", false);\n    add(\"e f\", \"baz bee\", false);\n\n    add(\"z\", \"boo\", false);\n    add(\"y\", \"bee\", true);\n\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    verify(\"a b c\", \"a/bar b/fee c\");\n\n    // syn output extends beyond input tokens\n    verify(\"x a b c d\", \"x a/bar b/fee c/dog d/harness holder extras\");\n\n    verify(\"a b a\", \"a/bar b/fee a/foo\");\n\n    // outputs that add to one another:\n    verify(\"c d c d\", \"c/dog d/harness c/holder/dog d/extras/harness holder extras\");\n\n    // two outputs for same input\n    verify(\"e f\", \"foo/baz bar/bee\");\n\n    // verify multi-word / single-output offsets:\n    verify(\"g i j k g\", \"g i/feep:7_3 j k g\");\n\n    // mixed keepOrig true/false:\n    verify(\"a m c e x\", \"a/foo dog barks loudly x\");\n    verify(\"c d m c e x\", \"c/dog d/harness holder/dog extras/barks loudly x\");\n    assertTrue(tokensOut.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    verify(\"p q r s t\", \"p q r s t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n\n    // no captureStates when only single-input syns, w/ no\n    // lookahead needed, matched\n    verify(\"p q z y t\", \"p q boo y/bee t\");\n    assertEquals(0, tokensOut.getCaptureCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}