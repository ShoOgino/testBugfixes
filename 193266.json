{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","commits":[{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory) throws IOException {\n    super(directory, sis, closeDirectory);\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          readers[i].close();\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","sourceNew":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory) throws IOException {\n    super(directory, sis, closeDirectory);\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory) throws IOException {\n    super(directory, sis, closeDirectory);\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          readers[i].close();\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(Directory,SegmentInfos,boolean).mjava","sourceNew":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory, boolean readOnly) throws IOException {\n    super(directory, sis, closeDirectory, readOnly);\n\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(readOnly, sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  /** Construct reading the named set of readers. */\n  MultiSegmentReader(Directory directory, SegmentInfos sis, boolean closeDirectory) throws IOException {\n    super(directory, sis, closeDirectory);\n    // To reduce the chance of hitting FileNotFound\n    // (and having to retry), we open segments in\n    // reverse because IndexWriter merges & deletes\n    // the newest segments first.\n\n    SegmentReader[] readers = new SegmentReader[sis.size()];\n    for (int i = sis.size()-1; i >= 0; i--) {\n      try {\n        readers[i] = SegmentReader.get(sis.info(i));\n      } catch (IOException e) {\n        // Close all readers we had opened:\n        for(i++;i<sis.size();i++) {\n          try {\n            readers[i].close();\n          } catch (IOException ignore) {\n            // keep going - we want to clean up as much as possible\n          }\n        }\n        throw e;\n      }\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5712975970a595c28f1988efd007e1b8a617a92f":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5712975970a595c28f1988efd007e1b8a617a92f"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"5712975970a595c28f1988efd007e1b8a617a92f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}