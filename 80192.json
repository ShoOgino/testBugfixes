{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"8192418e56fee1a061317028a35f7f288824c856","date":1557514938,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0]);\n        dimensionY = Integer.parseInt(strDimensions[1]);\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcae52c1b98d5cec2317790cd1d7d58f97cf8117","date":1557519155,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","sourceOld":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0]);\n        dimensionY = Integer.parseInt(strDimensions[1]);\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 10;\n    int dimensionY = 10;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","sourceOld":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#Facet2DStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 10;\n    int dimensionY = 10;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","sourceOld":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["fcae52c1b98d5cec2317790cd1d7d58f97cf8117"],"7107555998ea86d6f61e2ad770687d674fa8e012":["fcae52c1b98d5cec2317790cd1d7d58f97cf8117","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"fcae52c1b98d5cec2317790cd1d7d58f97cf8117":["8192418e56fee1a061317028a35f7f288824c856"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8192418e56fee1a061317028a35f7f288824c856":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"fcae52c1b98d5cec2317790cd1d7d58f97cf8117":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8192418e56fee1a061317028a35f7f288824c856"],"8192418e56fee1a061317028a35f7f288824c856":["fcae52c1b98d5cec2317790cd1d7d58f97cf8117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}