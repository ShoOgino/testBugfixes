{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        if (enablePositionIncrements) {\n          posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        }\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03","date":1377018786,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    // TODO: fix me when posInc=false, to work like FilteringTokenFilter in that case and not return\n    // initial token with posInc=0 ever\n    \n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while (input.incrementToken()) {\n      if (!filter.run(termAtt.buffer(), 0, termAtt.length())) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n        return true;\n      }\n      skippedPositions += posIncrAtt.getPositionIncrement();\n    }\n    // reached EOS -- return false\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["eafa8c5eabc3dacd34680054e6a33bda024080ac","f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"]},"commit2Childs":{"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}