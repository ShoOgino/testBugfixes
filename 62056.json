{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":null,"sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}