{"path":"src/test/org/apache/solr/util/TestCharArrayMap#doRandom(int,boolean).mjava","commits":[{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap map = new CharArrayMap(1,ignoreCase);\n    HashMap hmap = new HashMap();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val));\n\n      assertEquals(val, map.get(key,0,key.length));\n      assertEquals(val, map.get(key));\n      assertEquals(val, map.get(keyStr));\n\n      assertEquals(hmap.size(), map.size());\n    }\n\n    assertEquals(map,hmap);\n    assertEquals(hmap, map);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"src/test/org/apache/solr/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap map = new CharArrayMap(1,ignoreCase);\n    HashMap hmap = new HashMap();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val));\n\n      assertEquals(val, map.get(key,0,key.length));\n      assertEquals(val, map.get(key));\n      assertEquals(val, map.get(keyStr));\n\n      assertEquals(hmap.size(), map.size());\n    }\n\n    assertEquals(map,hmap);\n    assertEquals(hmap, map);    \n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap map = new CharArrayMap(1,ignoreCase);\n    HashMap hmap = new HashMap();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val));\n\n      assertEquals(val, map.get(key,0,key.length));\n      assertEquals(val, map.get(key));\n      assertEquals(val, map.get(keyStr));\n\n      assertEquals(hmap.size(), map.size());\n    }\n\n    assertEquals(map,hmap);\n    assertEquals(hmap, map);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}