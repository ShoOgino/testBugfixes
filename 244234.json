{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ords[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ords.length));\n    ords = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          code = 0;\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n\n          final int endPos = pos + len;\n          while (pos < endPos) {\n            code = 31 * code + bytes[pos++];\n          }\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          final int inc = ((code >> 8) + code) | 1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small ({@code > 50%} occupied) or too large ({@code < 20%}\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small (> 50% occupied) or too large (< 20%\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small ({@code > 50%} occupied) or too large ({@code < 20%}\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(Integer.BYTES * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(Integer.BYTES * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small ({@code > 50%} occupied) or too large ({@code < 20%}\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#rehash(int,boolean).mjava","sourceNew":"  /**\n   * Called when hash is too small ({@code > 50%} occupied) or too large ({@code < 20%}\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(Integer.BYTES * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(Integer.BYTES * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","sourceOld":"  /**\n   * Called when hash is too small ({@code > 50%} occupied) or too large ({@code < 20%}\n   * occupied).\n   */\n  private void rehash(final int newSize, boolean hashOnData) {\n    final int newMask = newSize - 1;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (newSize));\n    final int[] newHash = new int[newSize];\n    Arrays.fill(newHash, -1);\n    for (int i = 0; i < hashSize; i++) {\n      final int e0 = ids[i];\n      if (e0 != -1) {\n        int code;\n        if (hashOnData) {\n          final int off = bytesStart[e0];\n          final int start = off & BYTE_BLOCK_MASK;\n          final byte[] bytes = pool.buffers[off >> BYTE_BLOCK_SHIFT];\n          final int len;\n          int pos;\n          if ((bytes[start] & 0x80) == 0) {\n            // length is 1 byte\n            len = bytes[start];\n            pos = start + 1;\n          } else {\n            len = (bytes[start] & 0x7f) + ((bytes[start + 1] & 0xff) << 7);\n            pos = start + 2;\n          }\n          code = doHash(bytes, pos, len);\n        } else {\n          code = bytesStart[e0];\n        }\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != -1) {\n          // Conflict; use linear probe to find an open slot\n          // (see LUCENE-5604):\n          do {\n            code++;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != -1);\n        }\n        newHash[hashPos] = e0;\n      }\n    }\n\n    hashMask = newMask;\n    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (-ids.length));\n    ids = newHash;\n    hashSize = newSize;\n    hashHalfSize = newSize / 2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["b1eb427f2c6beed80d1724555fc1db003ccf3030","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}