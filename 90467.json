{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrServer.setDefaultCollection(collection);\n        \n        cloudSolrServer.connect();        \n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrServer.setDefaultCollection(collection);\n        \n        cloudSolrServer.connect();\n        exitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR:\"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrServer.setDefaultCollection(collection);\n        \n        cloudSolrServer.connect();        \n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":["3d1db6f36874f1979916ccb702329fbb09602af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrClient cloudSolrClient = null;\n      try {\n        cloudSolrClient = new CloudSolrClient(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR:\"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrClient != null) {\n          try {\n            cloudSolrClient.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrServer.setDefaultCollection(collection);\n        \n        cloudSolrServer.connect();\n        exitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR:\"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d1db6f36874f1979916ccb702329fbb09602af8","date":1421105614,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrClient cloudSolrClient = null;\n      try {\n        cloudSolrClient = new CloudSolrClient(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrClient != null) {\n          try {\n            cloudSolrClient.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrClient cloudSolrClient = null;\n      try {\n        cloudSolrClient = new CloudSolrClient(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR:\"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrClient != null) {\n          try {\n            cloudSolrClient.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":["209c0259a9b7087b2111411ec790d6557ef86307"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      CloudSolrClient cloudSolrClient = null;\n      try {\n        cloudSolrClient = new CloudSolrClient(zkHost);\n        \n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrClient != null) {\n          try {\n            cloudSolrClient.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","date":1437834887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"3d1db6f36874f1979916ccb702329fbb09602af8":["bafca15d8e408346a67f4282ad1143b88023893b"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"209c0259a9b7087b2111411ec790d6557ef86307":["709714c6ee47950678dd2d2ef4e0473886909226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["3d1db6f36874f1979916ccb702329fbb09602af8"],"bafca15d8e408346a67f4282ad1143b88023893b":["209c0259a9b7087b2111411ec790d6557ef86307"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3d1db6f36874f1979916ccb702329fbb09602af8":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"709714c6ee47950678dd2d2ef4e0473886909226":["209c0259a9b7087b2111411ec790d6557ef86307"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"209c0259a9b7087b2111411ec790d6557ef86307":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["3d1db6f36874f1979916ccb702329fbb09602af8"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}