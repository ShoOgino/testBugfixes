{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#ThreadMonitor(URLLengthFilter,URLVisitedFilter,URLScopeFilter,RobotExclusionFilter,MessageHandler,ThreadPool,HostManager,int).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#ThreadMonitor(URLLengthFilter,URLVisitedFilter,URLScopeFilter,RobotExclusionFilter,MessageHandler,ThreadPool,HostManager,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * construct the monitor gets a reference to all monitored filters\n     * @param threadPool  the pool to be observed\n     * @param sampleDelta time in ms between samples\n     */\n    public ThreadMonitor(URLLengthFilter urlLengthFilter,\n                         URLVisitedFilter urlVisitedFilter,\n                         URLScopeFilter urlScopeFilter,\n                         /*DNSResolver dnsResolver,*/\n                         RobotExclusionFilter reFilter,\n                         MessageHandler messageHandler,\n                         ThreadPool threadPool,\n                         HostManager hostManager,\n                         int sampleDelta)\n    {\n        this.urlLengthFilter = urlLengthFilter;\n        this.urlVisitedFilter = urlVisitedFilter;\n        this.urlScopeFilter   = urlScopeFilter;\n       /* this.dnsResolver = dnsResolver;*/\n        this.hostManager = hostManager;\n        this.reFilter = reFilter;\n        this.messageHandler = messageHandler;\n\n        this.threadPool = threadPool;\n        bytesReadPerPeriod = new ArrayList();\n        this.sampleDelta = sampleDelta;\n        this.thread = new Thread(this, \"ThreadMonitor\");\n        this.thread.setPriority(7);\n\n        try\n        {\n            File logDir = new File(\"logs\");\n            logDir.mkdir();\n            logWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"logs/ThreadMonitor.log\")));\n        }\n        catch(IOException e)\n        {\n            System.out.println(\"Couldn't create logfile (ThreadMonitor)\");\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7442844f853a19982a1d8261c147be6a4a2955","date":1035299795,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#ThreadMonitor(URLLengthFilter,URLVisitedFilter,URLScopeFilter,RobotExclusionFilter,MessageHandler,ThreadPool,HostManager,int).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#ThreadMonitor(URLLengthFilter,URLVisitedFilter,URLScopeFilter,RobotExclusionFilter,MessageHandler,ThreadPool,HostManager,int).mjava","sourceNew":"    /**\n     * construct the monitor gets a reference to all monitored filters\n     * @param threadPool  the pool to be observed\n     * @param sampleDelta time in ms between samples\n     */\n    public ThreadMonitor(URLLengthFilter urlLengthFilter,\n                         URLVisitedFilter urlVisitedFilter,\n                         URLScopeFilter urlScopeFilter,\n                         /*DNSResolver dnsResolver,*/\n                         RobotExclusionFilter reFilter,\n                         MessageHandler messageHandler,\n                         ThreadPool threadPool,\n                         HostManager hostManager,\n                         int sampleDelta)\n    {\n        this.urlLengthFilter = urlLengthFilter;\n        this.urlVisitedFilter = urlVisitedFilter;\n        this.urlScopeFilter   = urlScopeFilter;\n       /* this.dnsResolver = dnsResolver;*/\n        this.hostManager = hostManager;\n        this.reFilter = reFilter;\n        this.messageHandler = messageHandler;\n\n        this.threadPool = threadPool;\n        bytesReadPerPeriod = new ArrayList();\n        this.sampleDelta = sampleDelta;\n        this.thread = new Thread(this, \"ThreadMonitor\");\n        this.thread.setPriority(7);\n\n        try\n        {\n            // FIXME: at least take SimpleLogger, if not something else\n            File logDir = new File(\"logs\");\n            logDir.mkdir();\n            logWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"logs/ThreadMonitor.log\")));\n        }\n        catch(IOException e)\n        {\n            System.out.println(\"Couldn't create logfile (ThreadMonitor)\");\n        }\n\n    }\n\n","sourceOld":"    /**\n     * construct the monitor gets a reference to all monitored filters\n     * @param threadPool  the pool to be observed\n     * @param sampleDelta time in ms between samples\n     */\n    public ThreadMonitor(URLLengthFilter urlLengthFilter,\n                         URLVisitedFilter urlVisitedFilter,\n                         URLScopeFilter urlScopeFilter,\n                         /*DNSResolver dnsResolver,*/\n                         RobotExclusionFilter reFilter,\n                         MessageHandler messageHandler,\n                         ThreadPool threadPool,\n                         HostManager hostManager,\n                         int sampleDelta)\n    {\n        this.urlLengthFilter = urlLengthFilter;\n        this.urlVisitedFilter = urlVisitedFilter;\n        this.urlScopeFilter   = urlScopeFilter;\n       /* this.dnsResolver = dnsResolver;*/\n        this.hostManager = hostManager;\n        this.reFilter = reFilter;\n        this.messageHandler = messageHandler;\n\n        this.threadPool = threadPool;\n        bytesReadPerPeriod = new ArrayList();\n        this.sampleDelta = sampleDelta;\n        this.thread = new Thread(this, \"ThreadMonitor\");\n        this.thread.setPriority(7);\n\n        try\n        {\n            File logDir = new File(\"logs\");\n            logDir.mkdir();\n            logWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"logs/ThreadMonitor.log\")));\n        }\n        catch(IOException e)\n        {\n            System.out.println(\"Couldn't create logfile (ThreadMonitor)\");\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#ThreadMonitor(URLLengthFilter,URLVisitedFilter,URLScopeFilter,RobotExclusionFilter,MessageHandler,ThreadPool,HostManager,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * construct the monitor gets a reference to all monitored filters\n     * @param threadPool  the pool to be observed\n     * @param sampleDelta time in ms between samples\n     */\n    public ThreadMonitor(URLLengthFilter urlLengthFilter,\n                         URLVisitedFilter urlVisitedFilter,\n                         URLScopeFilter urlScopeFilter,\n                         /*DNSResolver dnsResolver,*/\n                         RobotExclusionFilter reFilter,\n                         MessageHandler messageHandler,\n                         ThreadPool threadPool,\n                         HostManager hostManager,\n                         int sampleDelta)\n    {\n        this.urlLengthFilter = urlLengthFilter;\n        this.urlVisitedFilter = urlVisitedFilter;\n        this.urlScopeFilter   = urlScopeFilter;\n       /* this.dnsResolver = dnsResolver;*/\n        this.hostManager = hostManager;\n        this.reFilter = reFilter;\n        this.messageHandler = messageHandler;\n\n        this.threadPool = threadPool;\n        bytesReadPerPeriod = new ArrayList();\n        this.sampleDelta = sampleDelta;\n        this.thread = new Thread(this, \"ThreadMonitor\");\n        this.thread.setPriority(7);\n\n        try\n        {\n            // FIXME: at least take SimpleLogger, if not something else\n            File logDir = new File(\"logs\");\n            logDir.mkdir();\n            logWriter = new PrintWriter(new BufferedWriter(new FileWriter(\"logs/ThreadMonitor.log\")));\n        }\n        catch(IOException e)\n        {\n            System.out.println(\"Couldn't create logfile (ThreadMonitor)\");\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac7442844f853a19982a1d8261c147be6a4a2955":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["ac7442844f853a19982a1d8261c147be6a4a2955"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"ac7442844f853a19982a1d8261c147be6a4a2955":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["ac7442844f853a19982a1d8261c147be6a4a2955"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}