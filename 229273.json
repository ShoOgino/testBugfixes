{"path":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      assert queue.size() == 0;\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          } else if (sub.liveDocs != null && sub.liveDocs.get(docID) == false) {\n            // nocommit is it sub's job to skip deleted docs?\n            continue;\n          } else {\n            sub.mappedDocID = sub.docMap.get(docID);\n            assert sub.mappedDocID != -1;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      queue.clear();\n      // nocommit why does bloom filter wrapper trip this?\n      // assert queue.size() == 0: \"queue.size() = \" + queue.size();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          } else if (sub.liveDocs != null && sub.liveDocs.get(docID) == false) {\n            // nocommit is it sub's job to skip deleted docs?\n            continue;\n          } else {\n            sub.mappedDocID = sub.docMap.get(docID);\n            assert sub.mappedDocID != -1;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      assert queue.size() == 0;\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          } else if (sub.liveDocs != null && sub.liveDocs.get(docID) == false) {\n            // nocommit is it sub's job to skip deleted docs?\n            continue;\n          } else {\n            sub.mappedDocID = sub.docMap.get(docID);\n            assert sub.mappedDocID != -1;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      queue.clear();\n      // nocommit why does bloom filter wrapper trip this?\n      // assert queue.size() == 0: \"queue.size() = \" + queue.size();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      queue.clear();\n      // nocommit why does bloom filter wrapper trip this?\n      // assert queue.size() == 0: \"queue.size() = \" + queue.size();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          } else if (sub.liveDocs != null && sub.liveDocs.get(docID) == false) {\n            // nocommit is it sub's job to skip deleted docs?\n            continue;\n          } else {\n            sub.mappedDocID = sub.docMap.get(docID);\n            assert sub.mappedDocID != -1;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      queue.clear();\n      // nocommit why does bloom filter wrapper trip this?\n      // assert queue.size() == 0: \"queue.size() = \" + queue.size();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else {\n      if (subs.size() > 0) {\n        current = subs.get(0);\n        nextIndex = 1;\n      } else {\n        current = null;\n        nextIndex = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() throws IOException {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() throws IOException {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() throws IOException {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public abstract void reset() throws IOException;\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() throws IOException {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#reset().mjava","sourceNew":"  /** Reuse API, currently only used by postings during merge */\n  public abstract void reset() throws IOException;\n\n","sourceOld":"  /** Reuse API, currently only used by postings during merge */\n  public void reset() throws IOException {\n    if (queue != null) {\n      // caller may not have fully consumed the queue:\n      queue.clear();\n      for(T sub : subs) {\n        while (true) {\n          int docID = sub.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            // all docs in this sub were deleted; do not add it to the queue!\n            break;\n          }\n\n          int mappedDocID = sub.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            sub.mappedDocID = mappedDocID;\n            queue.add(sub);\n            break;\n          }\n        }\n      }\n      first = true;\n    } else if (subs.size() > 0) {\n      current = subs.get(0);\n      nextIndex = 1;\n    } else {\n      current = null;\n      nextIndex = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d85b6e22926e7564c040d2a864f4887f6c59fa92"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e03940e6e9044943de4b7ac08f8581da37a9534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d85b6e22926e7564c040d2a864f4887f6c59fa92","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}