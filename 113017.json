{"path":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","commits":[{"id":"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9","date":1239612124,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    mgr.getParams().setConnectionTimeout(readTimeout == null ? 10000 : Integer.parseInt(readTimeout)); //10 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ed76692b1c28229b8018f752e2a8ab6c1e92347b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed76692b1c28229b8018f752e2a8ab6c1e92347b","date":1239863393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(connTimeout == null ? 20000 : Integer.parseInt(connTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(readTimeout == null ? 5000 : Integer.parseInt(readTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    mgr.getParams().setConnectionTimeout(readTimeout == null ? 10000 : Integer.parseInt(readTimeout)); //10 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9c32a92ff0cd98f668778a7c02554c5369f44b","date":1245500456,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(connTimeout == null ? 20000 : Integer.parseInt(connTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(readTimeout == null ? 5000 : Integer.parseInt(readTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b9c32a92ff0cd98f668778a7c02554c5369f44b":["ed76692b1c28229b8018f752e2a8ab6c1e92347b"],"ed76692b1c28229b8018f752e2a8ab6c1e92347b":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5b9c32a92ff0cd98f668778a7c02554c5369f44b"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5b9c32a92ff0cd98f668778a7c02554c5369f44b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ed76692b1c28229b8018f752e2a8ab6c1e92347b":["5b9c32a92ff0cd98f668778a7c02554c5369f44b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["ed76692b1c28229b8018f752e2a8ab6c1e92347b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}