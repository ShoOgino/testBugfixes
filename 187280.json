{"path":"solr/core/src/java/org/apache/solr/search/QueryUtils#combineQueryAndFilter(Query,Query).mjava","commits":[{"id":"5c4d4ec3bca82c8eac712592ab518cd082026f34","date":1585956055,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#combineQueryAndFilter(Query,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Combines a scoring query with a non-scoring (filter) query.\n   * If both parameters are null then return a {@link MatchAllDocsQuery}.\n   * If only {@code scoreQuery} is present then return it.\n   * If only {@code filterQuery} is present then return it wrapped with constant scoring.\n   * If neither are null then we combine with a BooleanQuery.\n   */\n  public static Query combineQueryAndFilter(Query scoreQuery, Query filterQuery) {\n    if (scoreQuery == null) {\n      if (filterQuery == null) {\n        return new MatchAllDocsQuery(); // default if nothing -- match everything\n      } else {\n        return new ConstantScoreQuery(filterQuery);\n      }\n    } else {\n      if (filterQuery == null) {\n        return scoreQuery;\n      } else {\n        return new BooleanQuery.Builder()\n            .add(scoreQuery, Occur.MUST)\n            .add(filterQuery, Occur.FILTER)\n            .build();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#combineQueryAndFilter(Query,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#combineQueryAndFilter(Query,Query).mjava","sourceNew":"  /**\n   * Combines a scoring query with a non-scoring (filter) query.\n   * If both parameters are null then return a {@link MatchAllDocsQuery}.\n   * If only {@code scoreQuery} is present then return it.\n   * If only {@code filterQuery} is present then return it wrapped with constant scoring.\n   * If neither are null then we combine with a BooleanQuery.\n   */\n  public static Query combineQueryAndFilter(Query scoreQuery, Query filterQuery) {\n    // check for *:* is simple and avoids needless BooleanQuery wrapper even though BQ.rewrite optimizes this away\n    if (scoreQuery == null || scoreQuery instanceof MatchAllDocsQuery) {\n      if (filterQuery == null) {\n        return new MatchAllDocsQuery(); // default if nothing -- match everything\n      } else {\n        return new ConstantScoreQuery(filterQuery);\n      }\n    } else {\n      if (filterQuery == null || filterQuery instanceof MatchAllDocsQuery) {\n        return scoreQuery;\n      } else {\n        return new BooleanQuery.Builder()\n            .add(scoreQuery, Occur.MUST)\n            .add(filterQuery, Occur.FILTER)\n            .build();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Combines a scoring query with a non-scoring (filter) query.\n   * If both parameters are null then return a {@link MatchAllDocsQuery}.\n   * If only {@code scoreQuery} is present then return it.\n   * If only {@code filterQuery} is present then return it wrapped with constant scoring.\n   * If neither are null then we combine with a BooleanQuery.\n   */\n  public static Query combineQueryAndFilter(Query scoreQuery, Query filterQuery) {\n    if (scoreQuery == null) {\n      if (filterQuery == null) {\n        return new MatchAllDocsQuery(); // default if nothing -- match everything\n      } else {\n        return new ConstantScoreQuery(filterQuery);\n      }\n    } else {\n      if (filterQuery == null) {\n        return scoreQuery;\n      } else {\n        return new BooleanQuery.Builder()\n            .add(scoreQuery, Occur.MUST)\n            .add(filterQuery, Occur.FILTER)\n            .build();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}