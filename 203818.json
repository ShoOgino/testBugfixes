{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":["08932c793647a36953d1816b1060121f48820d3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getTerms(r, \"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getTerms(r, \"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getTerms(r, \"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiTerms.getTerms(r, \"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getTerms(r, \"f\").iterator();\n\n    BytesRefBuilder last = new BytesRefBuilder();\n\n    Set<String> seenTerms = new HashSet<>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.get().compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["28288370235ed02234a64753cdbf0c6ec096304a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"28288370235ed02234a64753cdbf0c6ec096304a":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"28288370235ed02234a64753cdbf0c6ec096304a":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}