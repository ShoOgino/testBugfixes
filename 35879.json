{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","commits":[{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dcffe8fc78b093a5f4207f492bbae185740f6a","date":1380887572,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["d2dcffe8fc78b093a5f4207f492bbae185740f6a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["d2dcffe8fc78b093a5f4207f492bbae185740f6a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}