{"path":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","sourceNew":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    super(prefix.field());\n    this.prefix = prefix;\n  }\n\n","sourceOld":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    super(prefix.field());\n    this.prefix = prefix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","sourceNew":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    // It's OK to pass unlimited maxDeterminizedStates: the automaton is born small and determinized:\n    super(prefix, toAutomaton(prefix.bytes()), Integer.MAX_VALUE, true);\n    if (prefix == null) {\n      throw new NullPointerException(\"prefix cannot be null\");\n    }\n  }\n\n","sourceOld":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    super(prefix.field());\n    this.prefix = prefix;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","sourceNew":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    // It's OK to pass unlimited maxDeterminizedStates: the automaton is born small and determinized:\n    super(prefix, toAutomaton(prefix.bytes()), Integer.MAX_VALUE, true);\n    if (prefix == null) {\n      throw new NullPointerException(\"prefix cannot be null\");\n    }\n  }\n\n","sourceOld":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    super(prefix.field());\n    this.prefix = prefix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PrefixQuery#PrefixQuery(Term).mjava","sourceNew":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    // It's OK to pass unlimited maxDeterminizedStates: the automaton is born small and determinized:\n    super(prefix, toAutomaton(prefix.bytes()), Integer.MAX_VALUE, true);\n    if (prefix == null) {\n      throw new NullPointerException(\"prefix must not be null\");\n    }\n  }\n\n","sourceOld":"  /** Constructs a query for terms starting with <code>prefix</code>. */\n  public PrefixQuery(Term prefix) {\n    // It's OK to pass unlimited maxDeterminizedStates: the automaton is born small and determinized:\n    super(prefix, toAutomaton(prefix.bytes()), Integer.MAX_VALUE, true);\n    if (prefix == null) {\n      throw new NullPointerException(\"prefix cannot be null\");\n    }\n  }\n\n","bugFix":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}