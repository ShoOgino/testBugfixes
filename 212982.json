{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","commits":[{"id":"ea73f58403a6c26bcb09b4933832348d80deb45b","date":1202849732,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new StandardAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = queryParser.parse(qtxt);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5ce8825677e635ae7c7529ca806883b0d0a4396","date":1202889042,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new StandardAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new StandardAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = queryParser.parse(qtxt);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new StandardAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query);\n\n  }\n\n","bugFix":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58db9ee7d88a7b7c23d77436675c11bcb755c8f9","date":1249451023,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":null,"sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#setUp().mjava","sourceNew":null,"sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}