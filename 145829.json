{"path":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a094c728ab58b12a130aaeed26d06f3c71aa8a61","date":1353256142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        writeVal(csvField.name, val);\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx ) throws IOException {\n    if (tmpList == null) {\n      tmpList = new ArrayList(1);\n      tmpList.add(null);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      Object val = doc.getFieldValue(csvField.name);\n      int nVals = val instanceof Collection ? ((Collection)val).size() : (val==null ? 0 : 1);\n      if (nVals == 0) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if ((csvField.sf != null && csvField.sf.multiValued()) || nVals > 1) {\n        Collection values;\n        // normalize to a collection\n        if (val instanceof Collection) {\n          values = (Collection)val;\n        } else {\n          tmpList.set(0, val);\n          values = tmpList;\n        }\n\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Object fval : values) {\n          writeVal(csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n\n      } else {\n        // normalize to first value\n        if (val instanceof Collection) {\n          Collection values = (Collection)val;\n          val = values.iterator().next();\n        }\n        // if field is polyfield, use the multi-valued printer to apply appropriate escaping\n        if (csvField.sf != null && csvField.sf.isPolyField()) {\n          mvWriter.reset();\n          csvField.mvPrinter.reset();\n          CSVPrinter tmp = printer;\n          printer = csvField.mvPrinter;\n          writeVal(csvField.name, val);\n          printer = tmp;\n          mvWriter.freeze();\n          printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n        } else {\n          writeVal(csvField.name, val);\n        }\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a094c728ab58b12a130aaeed26d06f3c71aa8a61","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","06a8891f085f71282bb3ece1b1732b68f07813a3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}