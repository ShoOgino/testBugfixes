{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.Step#Step(String,Rule[],int,String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.Step#Step(String,Rule[],int,String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.Step#Step(String,Rule[],int,String[]).mjava","sourceNew":"    /**\n     * Create a new step\n     * @param name Step's name.\n     * @param rules an ordered list of rules.\n     * @param min minimum word size. if this is 0 it is automatically calculated.\n     * @param suffixes optional list of conditional suffixes. may be null.\n     */\n    public Step(String name, Rule rules[], int min, String suffixes[]) {\n      this.name = name;\n      this.rules = rules;\n      if (min == 0) {\n        min = Integer.MAX_VALUE;\n        for (Rule r : rules)\n          min = Math.min(min, r.min + r.suffix.length);\n      }\n      this.min = min;\n      \n      if (suffixes == null || suffixes.length == 0) {\n        this.suffixes = null;\n      } else {\n        this.suffixes = new char[suffixes.length][];\n        for (int i = 0; i < suffixes.length; i++)\n          this.suffixes[i] = suffixes[i].toCharArray();\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a new step\n     * @param name Step's name.\n     * @param rules an ordered list of rules.\n     * @param min minimum word size. if this is 0 it is automatically calculated.\n     * @param suffixes optional list of conditional suffixes. may be null.\n     */\n    public Step(String name, Rule rules[], int min, String suffixes[]) {\n      this.name = name;\n      this.rules = rules;\n      if (min == 0) {\n        min = Integer.MAX_VALUE;\n        for (Rule r : rules)\n          min = Math.min(min, r.min + r.suffix.length);\n      }\n      this.min = min;\n      \n      if (suffixes == null || suffixes.length == 0) {\n        this.suffixes = null;\n      } else {\n        this.suffixes = new char[suffixes.length][];\n        for (int i = 0; i < suffixes.length; i++)\n          this.suffixes[i] = suffixes[i].toCharArray();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}