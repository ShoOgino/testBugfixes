{"path":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","commits":[{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/DocValuesAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    Object v = values.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34776ee7d033ba66c93ae69ab2477387db81136","date":1301693114,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"494eb32639b66b7767d8a96da8849e3827421b74","date":1301696947,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types -- see: SOLR-2443\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types -- see: SOLR-2443\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types -- see: SOLR-2443\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":["494eb32639b66b7767d8a96da8849e3827421b74","e34776ee7d033ba66c93ae69ab2477387db81136"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      float val = values.floatVal(localId);  // TODO: handle all types -- see: SOLR-2443\n\n      doc.setField( name, val );\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // TODO, should know what the real type is -- not always string\n    // how do we get to docvalues?\n    Object v = \"now what...\"; //values.g.strVal( docid );\n    doc.setField( name, v );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"e34776ee7d033ba66c93ae69ab2477387db81136":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["45669a651c970812a680841b97a77cce06af559f","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["494eb32639b66b7767d8a96da8849e3827421b74"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"494eb32639b66b7767d8a96da8849e3827421b74":["e34776ee7d033ba66c93ae69ab2477387db81136"],"a3776dccca01c11e7046323cfad46a3b4a471233":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","494eb32639b66b7767d8a96da8849e3827421b74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["e34776ee7d033ba66c93ae69ab2477387db81136","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"e34776ee7d033ba66c93ae69ab2477387db81136":["494eb32639b66b7767d8a96da8849e3827421b74"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"494eb32639b66b7767d8a96da8849e3827421b74":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","45669a651c970812a680841b97a77cce06af559f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}