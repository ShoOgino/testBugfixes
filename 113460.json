{"path":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","commits":[{"id":"b9d74f8959bf981a44d81bdca4690869cd137de2","date":1202220152,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","sourceNew":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","sourceOld":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","sourceNew":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","sourceOld":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","sourceNew":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","sourceOld":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testNonZeroOffset().mjava","sourceNew":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","sourceOld":"  public void testNonZeroOffset() {\n    String[] words={\"Hello\",\"World\",\"this\",\"is\",\"a\",\"test\"};\n    char[] findme=\"xthisy\".toCharArray();   \n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(words));\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n    \n    // test unmodifiable\n    set = CharArraySet.unmodifiableSet(set);\n    assertTrue(set.contains(findme, 1, 4));\n    assertTrue(set.contains(new String(findme,1,4)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c881464041e282c06fdb34e91f883b83b8d97968":["b9d74f8959bf981a44d81bdca4690869cd137de2"],"b9d74f8959bf981a44d81bdca4690869cd137de2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["c881464041e282c06fdb34e91f883b83b8d97968"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9d74f8959bf981a44d81bdca4690869cd137de2"],"c881464041e282c06fdb34e91f883b83b8d97968":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"b9d74f8959bf981a44d81bdca4690869cd137de2":["c881464041e282c06fdb34e91f883b83b8d97968"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}