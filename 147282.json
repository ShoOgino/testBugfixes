{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp\n        .parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\")\n        .toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp\n        .parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\")\n        .toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","sourceNew":null,"sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp\n        .parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\")\n        .toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","sourceNew":null,"sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp\n        .parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\")\n        .toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerWrapper#testMultiAnalyzer().mjava","sourceNew":null,"sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParserWrapper qp = new QueryParserWrapper(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\")\n        .toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\")\n        .toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\", qp.parse(\n        \"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\", qp\n        .parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\", qp.parse(\n        \"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\n        \"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp\n        .parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\")\n        .toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\", qp.parse(\n        \"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\")\n        .toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\")\n        .toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\", qp.parse(\"\\\"multi foo\\\" bar\")\n        .toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\", qp.parse(\n        \"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserWrapper.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}