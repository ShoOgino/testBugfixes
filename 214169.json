{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","commits":[{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,String,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, String segment,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = segment;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,String,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, String segment,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = segment;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32d64b31678d8ccc697dd700bb68059f85b89d37","date":1349278321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in, indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab","date":1349279380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in, indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1e8b3369cb0169630bfadbcf2d16a26260bc967","date":1349304984,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      } else if (indexDivisor != -1) {\n        indexIn.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        int indexVersion = readIndexHeader(indexIn);\n        if (indexVersion != version) {\n          throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n        }\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        readIndexHeader(indexIn);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = readHeader(in);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n      int indexVersion = readIndexHeader(indexIn);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        int indexVersion = readIndexHeader(indexIn);\n        if (indexVersion != version) {\n          throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n        }\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#BlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String,int).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = readHeader(in);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n      int indexVersion = readIndexHeader(indexIn);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                              PostingsReaderBase postingsReader, IOContext ioContext,\n                              String segmentSuffix, int indexDivisor)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = readHeader(in);\n      if (indexDivisor != -1) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, BlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                                ioContext);\n        int indexVersion = readIndexHeader(indexIn);\n        if (indexVersion != version) {\n          throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n        }\n      }\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      if (indexDivisor != -1) {\n        seekDir(indexIn, indexDirOffset);\n      }\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final int numBytes = in.readVInt();\n        final BytesRef rootCode = new BytesRef(new byte[numBytes]);\n        in.readBytes(rootCode.bytes, 0, numBytes);\n        rootCode.length = numBytes;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexDivisor != -1 ? indexIn.readVLong() : 0;\n        FieldReader previous = fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, indexIn));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      if (indexDivisor != -1) {\n        indexIn.close();\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2ac16fe5f6279d582010071b6129ea3073953c15","2ac16fe5f6279d582010071b6129ea3073953c15","9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab":["32d64b31678d8ccc697dd700bb68059f85b89d37"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["519435fc0d6082a1b8081f9492b714f716877437","8a7212317ba0173de5fb2fc1bb177b7d8196f6ab"],"519435fc0d6082a1b8081f9492b714f716877437":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a45bec74b98f6fc05f52770cfb425739e6563960":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"32d64b31678d8ccc697dd700bb68059f85b89d37":["519435fc0d6082a1b8081f9492b714f716877437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["d0d1f90e969803cc84174589b5e4a39b7935fecd","519435fc0d6082a1b8081f9492b714f716877437"],"519435fc0d6082a1b8081f9492b714f716877437":["e1e8b3369cb0169630bfadbcf2d16a26260bc967","32d64b31678d8ccc697dd700bb68059f85b89d37"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"32d64b31678d8ccc697dd700bb68059f85b89d37":["8a7212317ba0173de5fb2fc1bb177b7d8196f6ab"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}