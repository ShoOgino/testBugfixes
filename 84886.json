{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n\n    ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc,\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false));\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n\n    // Test drill-down:\n    assertEquals(1, s.search(new ConstantScoreQuery(new DoubleRange(\"< 2\", 0.0, true, 2.0, false).getFilter(vs)), 10).totalHits);\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(r, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, AtomicReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, AtomicReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new FixedBitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return cached;\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new BitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new FixedBitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery()), FilterCachingPolicy.ALWAYS_CACHE) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new BitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery())) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new BitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Filter in = new QueryWrapperFilter(new MatchAllDocsQuery());\n      fastMatchFilter = new Filter() {\n        @Override\n        public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n            throws IOException {\n          filterWasUsed.set(true);\n          return in.getDocIdSet(context, acceptDocs);\n        }\n        @Override\n        public String toString(String field) {\n          return in.toString(field);\n        }\n      };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery()), FilterCachingPolicy.ALWAYS_CACHE) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new BitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Filter in = new QueryWrapperFilter(new MatchAllDocsQuery());\n      fastMatchFilter = new Filter() {\n        @Override\n        public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n            throws IOException {\n          filterWasUsed.set(true);\n          return in.getDocIdSet(context, acceptDocs);\n        }\n        @Override\n        public String toString(String field) {\n          return in.toString(field);\n        }\n      };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      fastMatchFilter = new CachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery()), FilterCachingPolicy.ALWAYS_CACHE) {\n          @Override\n          protected DocIdSet cacheImpl(DocIdSetIterator iterator, LeafReader reader)\n            throws IOException {\n            final FixedBitSet cached = new FixedBitSet(reader.maxDoc());\n            filterWasUsed.set(true);\n            cached.or(iterator);\n            return new BitDocIdSet(cached);\n          }\n        };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Filter in = new QueryWrapperFilter(new MatchAllDocsQuery());\n      fastMatchFilter = new UsedFilter(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int hashCode() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Filter in = new QueryWrapperFilter(new MatchAllDocsQuery());\n      fastMatchFilter = new Filter() {\n        @Override\n        public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n            throws IOException {\n          filterWasUsed.set(true);\n          return in.getDocIdSet(context, acceptDocs);\n        }\n        @Override\n        public String toString(String field) {\n          return in.toString(field);\n        }\n      };\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":["40640359164f629dd440a47df2e145d084ce9645","60596f28be69b10c37a56a303c2dbea07b2ca4ba","3e1de378515e2ab9bcfd5b80901238a3f9078a7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Filter fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Filter in = new QueryWrapperFilter(new MatchAllDocsQuery());\n      fastMatchFilter = new UsedFilter(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getFilter(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoubleValuesSource().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testCustomDoublesValueSource().mjava","sourceNew":"  public void testCustomDoubleValuesSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final DoubleValuesSource vs = new DoubleValuesSource() {\n\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          int doc = -1;\n          @Override\n          public double doubleValue() throws IOException {\n            return doc + 1;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            this.doc = doc;\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testCustomDoublesValueSource() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    \n    Document doc = new Document();\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n\n    // Test wants 3 docs in one segment:\n    writer.forceMerge(1);\n\n    final ValueSource vs = new ValueSource() {\n        @SuppressWarnings(\"rawtypes\")\n        @Override\n        public FunctionValues getValues(Map ignored, LeafReaderContext ignored2) {\n          return new DoubleDocValues(null) {\n            @Override\n            public double doubleVal(int doc) {\n              return doc+1;\n            }\n          };\n        }\n\n        @Override\n        public boolean equals(Object o) {\n          return o != null && getClass() == o.getClass();\n        }\n\n        @Override\n        public int hashCode() {\n          return getClass().hashCode();\n        }\n\n        @Override\n        public String description() {\n          throw new UnsupportedOperationException();\n        }\n      };\n\n    FacetsConfig config = new FacetsConfig();\n    \n    FacetsCollector fc = new FacetsCollector();\n\n    IndexReader r = writer.getReader();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    final DoubleRange[] ranges = new DoubleRange[] {\n        new DoubleRange(\"< 1\", 0.0, true, 1.0, false),\n        new DoubleRange(\"< 2\", 0.0, true, 2.0, false),\n        new DoubleRange(\"< 5\", 0.0, true, 5.0, false),\n        new DoubleRange(\"< 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"< 20\", 0.0, true, 20.0, false),\n        new DoubleRange(\"< 50\", 0.0, true, 50.0, false)};\n\n    final Query fastMatchFilter;\n    final AtomicBoolean filterWasUsed = new AtomicBoolean();\n    if (random().nextBoolean()) {\n      // Sort of silly:\n      final Query in = new MatchAllDocsQuery();\n      fastMatchFilter = new UsedQuery(in, filterWasUsed);\n    } else {\n      fastMatchFilter = null;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: fastMatchFilter=\" + fastMatchFilter);\n    }\n\n    Facets facets = new DoubleRangeFacetCounts(\"field\", vs, fc, fastMatchFilter, ranges);\n\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\", facets.getTopChildren(10, \"field\").toString());\n    assertTrue(fastMatchFilter == null || filterWasUsed.get());\n\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", ranges[1].getQuery(fastMatchFilter, vs));\n\n    // Test simple drill-down:\n    assertEquals(1, s.search(ddq, 10).totalHits);\n\n    // Test drill-sideways after drill-down\n    DrillSideways ds = new DrillSideways(s, config, (TaxonomyReader) null) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          assert drillSideways.length == 1;\n          return new DoubleRangeFacetCounts(\"field\", vs, drillSideways[0], fastMatchFilter, ranges);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n\n    DrillSidewaysResult dsr = ds.search(ddq, 10);\n    assertEquals(1, dsr.hits.totalHits);\n    assertEquals(\"dim=field path=[] value=3 childCount=6\\n  < 1 (0)\\n  < 2 (1)\\n  < 5 (3)\\n  < 10 (3)\\n  < 20 (3)\\n  < 50 (3)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    writer.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"40640359164f629dd440a47df2e145d084ce9645":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["40640359164f629dd440a47df2e145d084ce9645"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"]},"commit2Childs":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8249072f13ea4354ab7635c2d7a59cc682806dab"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40640359164f629dd440a47df2e145d084ce9645":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["40640359164f629dd440a47df2e145d084ce9645"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}