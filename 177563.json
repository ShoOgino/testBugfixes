{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","sourceNew":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != null) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","sourceNew":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != null) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","sourceNew":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != IndexOptions.NO) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != null) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(LeafReader).mjava","sourceNew":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != IndexOptions.NONE) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(LeafReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexOptions() != IndexOptions.NO) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c9fb5f46e264daf5ba3860defe623a89d202dd87","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}