{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimer,HttpServletRequest).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimer,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimer).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimer requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams, RTimer requestTimer ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params, requestTimer ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104456f4eeacc857f7e1e6408e1483de8c2bd658","date":1439164522,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimerTree,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream],RTimer,HttpServletRequest).mjava","sourceNew":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimerTree requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  private SolrQueryRequest buildRequestFrom(SolrCore core, SolrParams params, Collection<ContentStream> streams,\n                                            RTimer requestTimer, final HttpServletRequest req) throws Exception {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n\n    SolrQueryRequestBase q = new SolrQueryRequestBase(core, params, requestTimer) {\n      @Override\n      public Principal getUserPrincipal() {\n        return req == null ? null : req.getUserPrincipal();\n      }\n    };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104456f4eeacc857f7e1e6408e1483de8c2bd658"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}