{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/BicubicSplineEvaluator#doWork(Object...).mjava","commits":[{"id":"4169fa0e078ff638eaa62cb2c54034a999129766","date":1519676291,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/BicubicSplineEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if(objects.length != 3) {\n      throw new IOException(\"The bicubicSpline function requires three paremeters,\"+objects.length+\" found.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n    Object third = objects[2];\n\n    double[] x = null;\n    double[] y = null;\n    double[][] grid = null;\n\n    if(first instanceof List && second instanceof List && third instanceof Matrix) {\n      List<Number> xlist = (List<Number>) first;\n      x = new double[xlist.size()];\n\n      for(int i=0; i<x.length; i++) {\n        x[i]=xlist.get(i).doubleValue();\n      }\n\n      List<Number> ylist = (List<Number>) second;\n      y = new double[ylist.size()];\n\n      for(int i=0; i<y.length; i++) {\n        y[i] = ylist.get(i).doubleValue();\n      }\n\n      Matrix matrix = (Matrix)third;\n      grid = matrix.getData();\n\n      PiecewiseBicubicSplineInterpolator interpolator = new PiecewiseBicubicSplineInterpolator();\n      BivariateFunction bivariateFunction = interpolator.interpolate(x, y, grid);\n      return bivariateFunction;\n    } else {\n      throw new IOException(\"The bicubicSpline function expects two numeric arrays and a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/BicubicSplineEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/BicubicSplineEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if(objects.length != 3) {\n      throw new IOException(\"The bicubicSpline function requires three paremeters,\"+objects.length+\" found.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n    Object third = objects[2];\n\n    double[] x = null;\n    double[] y = null;\n    double[][] grid = null;\n\n    if(first instanceof List && second instanceof List && third instanceof Matrix) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> xlist = (List<Number>) first;\n      x = new double[xlist.size()];\n\n      for(int i=0; i<x.length; i++) {\n        x[i]=xlist.get(i).doubleValue();\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> ylist = (List<Number>) second;\n      y = new double[ylist.size()];\n\n      for(int i=0; i<y.length; i++) {\n        y[i] = ylist.get(i).doubleValue();\n      }\n\n      Matrix matrix = (Matrix)third;\n      grid = matrix.getData();\n\n      PiecewiseBicubicSplineInterpolator interpolator = new PiecewiseBicubicSplineInterpolator();\n      BivariateFunction bivariateFunction = interpolator.interpolate(x, y, grid);\n      return bivariateFunction;\n    } else {\n      throw new IOException(\"The bicubicSpline function expects two numeric arrays and a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if(objects.length != 3) {\n      throw new IOException(\"The bicubicSpline function requires three paremeters,\"+objects.length+\" found.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n    Object third = objects[2];\n\n    double[] x = null;\n    double[] y = null;\n    double[][] grid = null;\n\n    if(first instanceof List && second instanceof List && third instanceof Matrix) {\n      List<Number> xlist = (List<Number>) first;\n      x = new double[xlist.size()];\n\n      for(int i=0; i<x.length; i++) {\n        x[i]=xlist.get(i).doubleValue();\n      }\n\n      List<Number> ylist = (List<Number>) second;\n      y = new double[ylist.size()];\n\n      for(int i=0; i<y.length; i++) {\n        y[i] = ylist.get(i).doubleValue();\n      }\n\n      Matrix matrix = (Matrix)third;\n      grid = matrix.getData();\n\n      PiecewiseBicubicSplineInterpolator interpolator = new PiecewiseBicubicSplineInterpolator();\n      BivariateFunction bivariateFunction = interpolator.interpolate(x, y, grid);\n      return bivariateFunction;\n    } else {\n      throw new IOException(\"The bicubicSpline function expects two numeric arrays and a matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["4169fa0e078ff638eaa62cb2c54034a999129766"],"4169fa0e078ff638eaa62cb2c54034a999129766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4169fa0e078ff638eaa62cb2c54034a999129766":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4169fa0e078ff638eaa62cb2c54034a999129766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}