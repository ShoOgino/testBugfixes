{"path":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","commits":[{"id":"426a4760316fc52cf79e191cadfcb328dfc2d1ca","date":1394042725,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        //expected\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        //expected\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","sourceNew":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLength);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLength);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        //expected\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestExceedMaxTermLength#testExceededMaxTermLengthWithLimitingFilter().mjava","sourceNew":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLength);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLength);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExceededMaxTermLengthWithLimitingFilter(){\n\n    // problematic field\n    final String longFieldName = \"cat_length\";\n    final String longFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + \"_sS\" ; //Dynamic field\n    final String okayFieldValue = TestUtil.randomSimpleString(random(),\n        minTestTermLength,\n        maxTestTermLegnth);\n\n    boolean includeOkayFields = random().nextBoolean();\n\n    if(random().nextBoolean()) {\n      //Use XML\n      String doc;\n      if(includeOkayFields) {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue, okayFieldName, okayFieldValue);\n      } else {\n        doc = adoc(\"id\", \"1\", longFieldName, longFieldValue);\n      }\n      assertU(doc);\n    } else {\n      //Use JSON\n      String jsonStr = null;\n      try {\n        if(includeOkayFields) {\n          jsonStr = \"[{'id':'1','%s':'%s', '%s': '%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, \n                                  okayFieldName, okayFieldValue);\n          updateJ(json(jsonStr), null);\n        } else {\n          jsonStr = \"[{'id':'1','%s':'%s'}]\";\n          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);\n          updateJ(json(jsonStr), null);\n        }\n      } catch (Exception e) {\n        //expected\n        fail(\"Should not have failed adding doc \" + jsonStr);\n        String msg= e.getCause().getMessage();\n        assertTrue(msg.contains(\"one immense term in field=\\\"cat\\\"\"));\n      }\n\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["426a4760316fc52cf79e191cadfcb328dfc2d1ca","3184874f7f3aca850248483485b4995343066875"],"426a4760316fc52cf79e191cadfcb328dfc2d1ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3184874f7f3aca850248483485b4995343066875":["426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3184874f7f3aca850248483485b4995343066875"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"426a4760316fc52cf79e191cadfcb328dfc2d1ca":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}