{"path":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","commits":[{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["3c09067bd60a59f680992d62794689898c0148ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09067bd60a59f680992d62794689898c0148ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}