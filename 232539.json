{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"    /**\n     * if the word exist in the index\n     * @param word String\n     * @throws IOException\n     * @return boolean\n     */\n    public boolean exist (String word) throws IOException {\n        if (reader==null) {\n            reader=IndexReader.open(spellindex);\n        }\n        return reader.docFreq(new Term(F_WORD, word))>0;\n    }\n\n","sourceOld":"    /**\n     * if the word exist in the index\n     * @param word String\n     * @throws IOException\n     * @return boolean\n     */\n    public boolean exist (String word) throws IOException {\n        if (reader==null) {\n            reader=IndexReader.open(spellindex);\n        }\n        return reader.docFreq(new Term(F_WORD, word))>0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"377b35e5a387cec525f01e277610588118902dd5","date":1117308109,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"    /**\n     * Check whether the word exists in the index.\n     * @param word String\n     * @throws IOException\n     * @return true iff the word exists in the index\n     */\n    public boolean exist (String word) throws IOException {\n        if (reader==null) {\n            reader=IndexReader.open(spellindex);\n        }\n        return reader.docFreq(new Term(F_WORD, word))>0;\n    }\n\n","sourceOld":"    /**\n     * if the word exist in the index\n     * @param word String\n     * @throws IOException\n     * @return boolean\n     */\n    public boolean exist (String word) throws IOException {\n        if (reader==null) {\n            reader=IndexReader.open(spellindex);\n        }\n        return reader.docFreq(new Term(F_WORD, word))>0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word String\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellindex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","sourceOld":"    /**\n     * Check whether the word exists in the index.\n     * @param word String\n     * @throws IOException\n     * @return true iff the word exists in the index\n     */\n    public boolean exist (String word) throws IOException {\n        if (reader==null) {\n            reader=IndexReader.open(spellindex);\n        }\n        return reader.docFreq(new Term(F_WORD, word))>0;\n    }\n\n","bugFix":null,"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c292217d2a7f861d59267155332967568e371fc1","date":1161990036,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word String\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellIndex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word String\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellindex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","bugFix":null,"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellIndex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word String\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellIndex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc4f7f30315d5744c6daa02827f50fc21065ff0b","date":1211437277,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    return searcher.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    if (reader == null) {\n      reader = IndexReader.open(spellIndex);\n    }\n    return reader.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","bugFix":["c292217d2a7f861d59267155332967568e371fc1","7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","e561bdf81b5b983639de610f7c878f3e2382bf24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @return true iff the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    return searcher.docFreq(new Term(F_WORD, word)) > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["377b35e5a387cec525f01e277610588118902dd5"],"377b35e5a387cec525f01e277610588118902dd5":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"c292217d2a7f861d59267155332967568e371fc1":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96308b901685e8ec12a3856f788a7d9d98c22e50":["c292217d2a7f861d59267155332967568e371fc1"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["c292217d2a7f861d59267155332967568e371fc1"],"377b35e5a387cec525f01e277610588118902dd5":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"c292217d2a7f861d59267155332967568e371fc1":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["377b35e5a387cec525f01e277610588118902dd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}