{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#getNearestSetSize(int,float).mjava","commits":[{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#getNearestSetSize(int,float).mjava","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#getNearestSetSize(int,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#getNearestSetSize(int,float).mjava","sourceNew":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","sourceOld":"  /**\n   * Use this method to choose a set size where accuracy (low content saturation) is more important\n   * than deciding how much memory to throw at the problem.\n   * @param maxNumberOfValuesExpected\n   * @param desiredSaturation A number between 0 and 1 expressing the % of bits set once all values have been recorded\n   * @return The size of the set nearest to the required size\n   */\n  public static int getNearestSetSize(int maxNumberOfValuesExpected,\n      float desiredSaturation) {\n    // Iterate around the various scales of bitset from smallest to largest looking for the first that\n    // satisfies value volumes at the chosen saturation level\n    for (int i = 0; i < usableBitSetSizes.length; i++) {\n      int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);\n      int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(\n          usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\n      if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {\n        return usableBitSetSizes[i];\n      }\n    }\n    return -1;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}