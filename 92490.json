{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}