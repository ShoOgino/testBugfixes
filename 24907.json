{"path":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","sourceNew":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          float boost,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanNearClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return SrndQuery.theEmptyLcnQuery;\n      }\n      \n      spanNearClauses[qi] = sncf.makeSpanNearClause();\n\n      qi++;\n    }\n    \n    SpanNearQuery r = new SpanNearQuery(spanNearClauses, getOpDistance() - 1, subQueriesOrdered());\n    r.setBoost(boost);\n    return r;\n  }\n\n","sourceOld":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          float boost,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanNearClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return SrndQuery.theEmptyLcnQuery;\n      }\n      \n      spanNearClauses[qi] = sncf.makeSpanNearClause();\n\n      qi++;\n    }\n    \n    SpanNearQuery r = new SpanNearQuery(spanNearClauses, getOpDistance() - 1, subQueriesOrdered());\n    r.setBoost(boost);\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","sourceNew":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          float boost,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanNearClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return SrndQuery.theEmptyLcnQuery;\n      }\n      \n      spanNearClauses[qi] = sncf.makeSpanNearClause();\n\n      qi++;\n    }\n    \n    SpanNearQuery r = new SpanNearQuery(spanNearClauses, getOpDistance() - 1, subQueriesOrdered());\n    r.setBoost(boost);\n    return r;\n  }\n\n","sourceOld":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          float boost,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanNearClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return SrndQuery.theEmptyLcnQuery;\n      }\n      \n      spanNearClauses[qi] = sncf.makeSpanNearClause();\n\n      qi++;\n    }\n    \n    SpanNearQuery r = new SpanNearQuery(spanNearClauses, getOpDistance() - 1, subQueriesOrdered());\n    r.setBoost(boost);\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}