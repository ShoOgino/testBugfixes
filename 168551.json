{"path":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","commits":[{"id":"513a0d1afdd0a58de1fc3a87654e66fb6694d02a","date":1355808434,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, zkController.getCoreNodeName(core.getCoreDescriptor()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, zkController.getCoreNodeName(core.getCoreDescriptor()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, zkController.getCoreNodeName(core.getCoreDescriptor()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getCachedReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getCachedReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),true);\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),true);\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","sourceNew":null,"sourceOld":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}