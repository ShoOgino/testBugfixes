{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairSortEvaluator#doWork(Object,Object).mjava","commits":[{"id":"2d472be56f18647f9c538d5d4a317829eb77902e","date":1539017603,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairSortEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    List<Number> l1 = (List<Number>)first;\n    List<Number> l2 = (List<Number>)second;\n\n    if(l2.size() != l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has a different size than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));\n    }\n\n    List<double[]> pairs = new ArrayList();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double[] pair = new double[2];\n      pair[0]= l1.get(idx).doubleValue();\n      pair[1] = l2.get(idx).doubleValue();\n      pairs.add(pair);\n    }\n\n    Collections.sort(pairs, new PairComp());\n    double[][] data = new double[2][pairs.size()];\n    for(int i=0; i<pairs.size(); i++) {\n      data[0][i] = pairs.get(i)[0];\n      data[1][i] = pairs.get(i)[1];\n    }\n\n    return new Matrix(data);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairSortEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairSortEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    List<Number> l1 = (List<Number>)first;\n    List<Number> l2 = (List<Number>)second;\n\n    if(l2.size() != l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has a different size than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));\n    }\n\n    List<double[]> pairs = new ArrayList<>();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double[] pair = new double[2];\n      pair[0]= l1.get(idx).doubleValue();\n      pair[1] = l2.get(idx).doubleValue();\n      pairs.add(pair);\n    }\n\n    Collections.sort(pairs, new PairComp());\n    double[][] data = new double[2][pairs.size()];\n    for(int i=0; i<pairs.size(); i++) {\n      data[0][i] = pairs.get(i)[0];\n      data[1][i] = pairs.get(i)[1];\n    }\n\n    return new Matrix(data);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    List<Number> l1 = (List<Number>)first;\n    List<Number> l2 = (List<Number>)second;\n\n    if(l2.size() != l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has a different size than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));\n    }\n\n    List<double[]> pairs = new ArrayList();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double[] pair = new double[2];\n      pair[0]= l1.get(idx).doubleValue();\n      pair[1] = l2.get(idx).doubleValue();\n      pairs.add(pair);\n    }\n\n    Collections.sort(pairs, new PairComp());\n    double[][] data = new double[2][pairs.size()];\n    for(int i=0; i<pairs.size(); i++) {\n      data[0][i] = pairs.get(i)[0];\n      data[1][i] = pairs.get(i)[1];\n    }\n\n    return new Matrix(data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["2d472be56f18647f9c538d5d4a317829eb77902e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d472be56f18647f9c538d5d4a317829eb77902e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d472be56f18647f9c538d5d4a317829eb77902e"],"2d472be56f18647f9c538d5d4a317829eb77902e":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}