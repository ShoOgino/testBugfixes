{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2010e2591e2d11678b59291d2ab31bd30e3ac7","date":1559150835,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    resetTriggerAndListenerState();\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["89948af0461fead48f44ba8fb7866f107ce83f22","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["89948af0461fead48f44ba8fb7866f107ce83f22"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}