{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  protected void decomposeInternal(final Token token) {\n    // get the hpyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","sourceOld":"  protected void decomposeInternal(final Token token) {\n    // get the hpyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  protected void decomposeInternal(final Token token) {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","sourceOld":"  protected void decomposeInternal(final Token token) {\n    // get the hpyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","sourceOld":"  protected void decomposeInternal(final Token token) {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(token.termBuffer(), 0, token\n        .termLength(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      Token longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary.contains(lowerCaseTermBuffer, start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength) {\n                longestMatchToken = createToken(start, partLength, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength, token));\n          }\n        } else if (dictionary.contains(lowerCaseTermBuffer, start,\n            partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.termLength() < partLength - 1) {\n                longestMatchToken = createToken(start, partLength - 1, token);\n              }\n            } else {\n              longestMatchToken = createToken(start, partLength - 1, token);\n            }\n          } else {\n            tokens.add(createToken(start, partLength - 1, token));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}