{"path":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#vectorDistance(double[],double[],double).mjava","commits":[{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#vectorDistance(double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors.\n   * <p/>\n   * See <a href=\"http://en.wikipedia.org/wiki/Lp_space\">Lp space</a>\n   *\n   * @param vec1  The first vector\n   * @param vec2  The second vector\n   * @param power The power (2 for cartesian distance, 1 for manhattan, etc.)\n   * @return The length.\n   *\n   * @see #vectorDistance(double[], double[], double, double)\n   *\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power) {\n    //only calc oneOverPower if it's needed\n    double oneOverPower = (power == 0 || power == 1.0 || power == 2.0) ? Double.NaN : 1.0 / power;\n    return vectorDistance(vec1, vec2, power, oneOverPower);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#vectorDistance(double[],double[],double).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#vectorDistance(double[],double[],double).mjava","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors.\n   * <p>\n   * See <a href=\"http://en.wikipedia.org/wiki/Lp_space\">Lp space</a>\n   *\n   * @param vec1  The first vector\n   * @param vec2  The second vector\n   * @param power The power (2 for cartesian distance, 1 for manhattan, etc.)\n   * @return The length.\n   *\n   * @see #vectorDistance(double[], double[], double, double)\n   *\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power) {\n    //only calc oneOverPower if it's needed\n    double oneOverPower = (power == 0 || power == 1.0 || power == 2.0) ? Double.NaN : 1.0 / power;\n    return vectorDistance(vec1, vec2, power, oneOverPower);\n  }\n\n","sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors.\n   * <p/>\n   * See <a href=\"http://en.wikipedia.org/wiki/Lp_space\">Lp space</a>\n   *\n   * @param vec1  The first vector\n   * @param vec2  The second vector\n   * @param power The power (2 for cartesian distance, 1 for manhattan, etc.)\n   * @return The length.\n   *\n   * @see #vectorDistance(double[], double[], double, double)\n   *\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power) {\n    //only calc oneOverPower if it's needed\n    double oneOverPower = (power == 0 || power == 1.0 || power == 2.0) ? Double.NaN : 1.0 / power;\n    return vectorDistance(vec1, vec2, power, oneOverPower);\n  }\n\n","bugFix":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}