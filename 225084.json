{"path":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","sourceNew":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof CharSequence) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25c90f5a77c5475be62daf4406cfaa745081b95e","date":1594603274,"type":3,"author":"S N Munendra","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeVal(String,Object).mjava","sourceNew":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof CharSequence) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator(name, (IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap(name, (MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  default void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n    //    (see a patch on LUCENE-3041 for inspiration)\n\n    // go in order of most common to least common, however some of the more general types like Map belong towards the end\n    if (val == null) {\n      writeNull(name);\n    } else if (val instanceof CharSequence) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Number) {\n      writeNumber(name, (Number) val);\n    } else if (val instanceof Boolean) {\n      writeBool(name, (Boolean) val);\n    } else if (val instanceof AtomicBoolean)  {\n      writeBool(name, ((AtomicBoolean) val).get());\n    } else if (val instanceof Date) {\n      writeDate(name, (Date) val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Path) {\n      writeStr(name, ((Path) val).toAbsolutePath().toString(), true);\n    } else if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n    } else if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n    } else if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(name, ((MapSerializable) val).toMap(new LinkedHashMap<>()), false, true);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof Iterator) { // very generic; keep towards the end\n      writeArray(name, (Iterator) val);\n    } else if (val instanceof Iterable) { // very generic; keep towards the end\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof byte[]) {\n      byte[] arr = (byte[])val;\n      writeByteArr(name, arr, 0, arr.length);\n    } else if (val instanceof EnumFieldValue) {\n      writeStr(name, val.toString(), true);\n    } else if (val instanceof WriteableValue) {\n      ((WriteableValue)val).write(name, this);\n    } else {\n      // default... for debugging only.  Would be nice to \"assert false\" ?\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25c90f5a77c5475be62daf4406cfaa745081b95e":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["26dad91f15019714a045b4d8c5f40162b2058b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25c90f5a77c5475be62daf4406cfaa745081b95e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"25c90f5a77c5475be62daf4406cfaa745081b95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0b2ba7b58bce0f80c97a5eb2f11febac26681566","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["25c90f5a77c5475be62daf4406cfaa745081b95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}