{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","commits":[{"id":"fc37eb63edc0a1db0d74e5f531a60b987f98f327","date":1531827749,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(List[String]).mjava","sourceNew":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \",e);\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":"  private Replica corruptLeader(List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(COLLECTION);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory().get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(dir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : dir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          dir.corruptFiles(Collections.singleton(file));\n        }\n      }\n    } catch (Exception e) {\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \",e);\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c96c6402e44d386e86f90412fcf0f5ad5c689d2d","date":1532997723,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","sourceNew":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \", e);\n      \n      // solrClient.add/commit would throw RemoteSolrException with error code 500 or \n      // 404(when the leader replica is already deleted by giveupLeadership)\n      if (e instanceof RemoteSolrException) {\n        SolrException se = (SolrException) e;\n        assertThat(se.code(), anyOf(is(500), is(404)));\n      } else if (!(e instanceof AlreadyClosedException)) {\n        throw new RuntimeException(\"Unexpected exception\", e);\n      }\n      //else expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \",e);\n      // Expected\n    }\n    return oldLeader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"798e70ec7d95a7e4ca60a64e38e97c095e185563","date":1548932105,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#corruptLeader(String,List[String]).mjava","sourceNew":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException | NoSuchFileException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \", e);\n      \n      // solrClient.add/commit would throw RemoteSolrException with error code 500 or \n      // 404(when the leader replica is already deleted by giveupLeadership)\n      if (e instanceof RemoteSolrException) {\n        SolrException se = (SolrException) e;\n        assertThat(se.code(), anyOf(is(500), is(404)));\n      } else if (!(e instanceof AlreadyClosedException)) {\n        throw new RuntimeException(\"Unexpected exception\", e);\n      }\n      //else expected\n    }\n    return oldLeader;\n  }\n\n","sourceOld":"  private Replica corruptLeader(String collection, List<String> addedIds) throws IOException {\n    DocCollection dc = getCollectionState(collection);\n    Replica oldLeader = dc.getLeader(\"shard1\");\n    log.info(\"Corrupt leader : {}\", oldLeader);\n\n    CoreContainer leaderCC = cluster.getReplicaJetty(oldLeader).getCoreContainer();\n    SolrCore leaderCore = leaderCC.getCores().iterator().next();\n    MockDirectoryWrapper mockDir = (MockDirectoryWrapper) leaderCore.getDirectoryFactory()\n        .get(leaderCore.getIndexDir(), DirectoryFactory.DirContext.DEFAULT, leaderCore.getSolrConfig().indexConfig.lockType);\n    leaderCore.getDirectoryFactory().release(mockDir);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder(dc.getLeader(\"shard1\").getCoreUrl()).build()) {\n      for (int i = 0; i < 100; i++) {\n        new UpdateRequest()\n            .add(\"id\", i + \"\")\n            .process(solrClient);\n        solrClient.commit();\n        addedIds.add(i + \"\");\n\n        for (String file : mockDir.listAll()) {\n          if (file.contains(\"segments_\")) continue;\n          if (file.endsWith(\"si\")) continue;\n          if (file.endsWith(\"fnm\")) continue;\n          if (random().nextBoolean()) continue;\n\n          try {\n            mockDir.corruptFiles(Collections.singleton(file));\n          } catch (RuntimeException | FileNotFoundException e) {\n            // merges can lead to this exception\n          }\n        }\n      }\n    } catch (Exception e) {\n      log.info(\"Corrupt leader ex: \", e);\n      \n      // solrClient.add/commit would throw RemoteSolrException with error code 500 or \n      // 404(when the leader replica is already deleted by giveupLeadership)\n      if (e instanceof RemoteSolrException) {\n        SolrException se = (SolrException) e;\n        assertThat(se.code(), anyOf(is(500), is(404)));\n      } else if (!(e instanceof AlreadyClosedException)) {\n        throw new RuntimeException(\"Unexpected exception\", e);\n      }\n      //else expected\n    }\n    return oldLeader;\n  }\n\n","bugFix":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"798e70ec7d95a7e4ca60a64e38e97c095e185563":["c96c6402e44d386e86f90412fcf0f5ad5c689d2d"],"c96c6402e44d386e86f90412fcf0f5ad5c689d2d":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["798e70ec7d95a7e4ca60a64e38e97c095e185563"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c96c6402e44d386e86f90412fcf0f5ad5c689d2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"798e70ec7d95a7e4ca60a64e38e97c095e185563":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c96c6402e44d386e86f90412fcf0f5ad5c689d2d":["798e70ec7d95a7e4ca60a64e38e97c095e185563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}