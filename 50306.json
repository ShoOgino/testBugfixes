{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","commits":[{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"/dev/null","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"/dev/null","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = getAutoScalingConfig().hasTriggerForEvents(AutoScaling.EventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"/dev/null","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"/dev/null","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return;\n      }\n      if (isClosed) {\n        return;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":["c32a8448145a74a8902798f2e63e322827757ff2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n          try {\n            zkClient.create(path, null, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for \" + n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e6932db2d5d242a7f0df86e6e531e183e667c3","date":1590077867,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", getSolrCloudManager().getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72afa881b0b5c361ebd0b6d37927fe072151fbe0","date":1590107364,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", getSolrCloudManager().getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerLiveNodesListener().mjava","sourceNew":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","sourceOld":"  private void registerLiveNodesListener() {\n    // this listener is used for generating nodeLost events, so we check only if\n    // some nodes went missing compared to last state\n    LiveNodesListener listener = (oldNodes, newNodes) -> {\n      oldNodes.removeAll(newNodes);\n      if (oldNodes.isEmpty()) { // only added nodes\n        return false;\n      }\n      if (isClosed) {\n        return true;\n      }\n      // if this node is in the top three then attempt to create nodeLost message\n      int i = 0;\n      for (String n : newNodes) {\n        if (n.equals(getNodeName())) {\n          break;\n        }\n        if (i > 2) {\n          return false; // this node is not in the top three\n        }\n        i++;\n      }\n\n      // retrieve current trigger config - if there are no nodeLost triggers\n      // then don't create markers\n      boolean createNodes = false;\n      try {\n        createNodes = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODELOST);\n      } catch (KeeperException | InterruptedException e1) {\n        log.warn(\"Unable to read autoscaling.json\", e1);\n      }\n      if (createNodes) {\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", getSolrCloudManager().getTimeSource().getEpochTimeNs()));\n        for (String n : oldNodes) {\n          String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + n;\n\n          try {\n            zkClient.create(path, json, CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException e) {\n            // someone else already created this node - ignore\n          } catch (KeeperException | InterruptedException e1) {\n            log.warn(\"Unable to register nodeLost path for {}\", n, e1);\n          }\n        }\n      }\n      return false;\n    };\n    zkStateReader.registerLiveNodesListener(listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"ad4957cde742defe6db19689abdc267c5d948066":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["ad4957cde742defe6db19689abdc267c5d948066","57e6932db2d5d242a7f0df86e6e531e183e667c3"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["664ff2b928393480d9655010aa700656b0fcade0"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c32a8448145a74a8902798f2e63e322827757ff2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32a8448145a74a8902798f2e63e322827757ff2"],"57e6932db2d5d242a7f0df86e6e531e183e667c3":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"ad4957cde742defe6db19689abdc267c5d948066":["72afa881b0b5c361ebd0b6d37927fe072151fbe0","57e6932db2d5d242a7f0df86e6e531e183e667c3"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c32a8448145a74a8902798f2e63e322827757ff2","560c18d71dad43d675158783c3840f8c80d6d39c","664ff2b928393480d9655010aa700656b0fcade0"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"57e6932db2d5d242a7f0df86e6e531e183e667c3":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"664ff2b928393480d9655010aa700656b0fcade0":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}