{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#prepare().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","sourceOld":"  @Before\n  public void prepare() throws Exception {\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#prepare().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","sourceOld":"  @Before\n  public void prepare() throws Exception {\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#prepare().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","sourceOld":"  @Before\n  public void prepare() throws Exception {\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a00c6454a5a790fb960e1a583c812bdf3e0dd813","date":1316088471,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    final TermFreq[] keys = new TermFreq[] {\n        tf(\"one\", 0.5f),\n        tf(\"oneness\", 1),\n        tf(\"onerous\", 1),\n        tf(\"onesimus\", 1),\n        tf(\"two\", 1),\n        tf(\"twofold\", 1),\n        tf(\"twonk\", 1),\n        tf(\"thrive\", 1),\n        tf(\"through\", 1),\n        tf(\"threat\", 1),\n        tf(\"three\", 1),\n        tf(\"foundation\", 1),\n        tf(\"fourier\", 1),\n        tf(\"four\", 1),\n        tf(\"fourty\", 1),\n        tf(\"xo\", 1),\n      };\n\n      lookup = new FSTLookup();\n      lookup.build(new TermFreqArrayIterator(keys));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#setUp().mjava","sourceNew":null,"sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["a00c6454a5a790fb960e1a583c812bdf3e0dd813"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a00c6454a5a790fb960e1a583c812bdf3e0dd813":["e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a00c6454a5a790fb960e1a583c812bdf3e0dd813","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a00c6454a5a790fb960e1a583c812bdf3e0dd813":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}