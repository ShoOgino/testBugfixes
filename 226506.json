{"path":"backwards/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    Fieldable binaryFldStored = new Field(\"binaryStored\", binaryValStored.getBytes(), Field.Store.YES);\n    Fieldable stringFldStored = new Field(\"stringStored\", binaryValStored, Field.Store.YES, Field.Index.NO, Field.TermVector.NO);\n\n    try {\n      // binary fields with store off are not allowed\n      new Field(\"fail\", binaryValStored.getBytes(), Field.Store.NO);\n      fail();\n    }\n    catch (IllegalArgumentException iae) {\n      ;\n    }\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.fields.size());\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    String binaryFldStoredTest = new String(docFromReader.getBinaryValue(\"binaryStored\"));\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    /** delete the document from index */\n    reader.deleteDocument(0);\n    assertEquals(0, reader.numDocs());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}