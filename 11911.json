{"path":"src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","commits":[{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"/dev/null","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52b36144a82ee78da623c584575fe306342dada","date":1246633761,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52b36144a82ee78da623c584575fe306342dada":["30391436869a41b74d4ba7098c40d955b686a10c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["a52b36144a82ee78da623c584575fe306342dada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a52b36144a82ee78da623c584575fe306342dada":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["30391436869a41b74d4ba7098c40d955b686a10c"],"30391436869a41b74d4ba7098c40d955b686a10c":["a52b36144a82ee78da623c584575fe306342dada"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}