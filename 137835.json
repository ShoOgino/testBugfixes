{"path":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","commits":[{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"/dev/null","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4ebb1536e19c5444665867a1657edcb497771adf","4ebb1536e19c5444665867a1657edcb497771adf","4ebb1536e19c5444665867a1657edcb497771adf","4ebb1536e19c5444665867a1657edcb497771adf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}