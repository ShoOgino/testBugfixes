{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#done(boolean).mjava","sourceNew":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","sourceOld":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","sourceNew":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   *@param isInternalReturnEdge is true if the return edge (back to start) is an internal one.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","sourceOld":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConvexPolygon#done(boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","sourceNew":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   *@param isInternalReturnEdge is true if the return edge (back to start) is an internal one.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","sourceOld":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   *@param isInternalReturnEdge is true if the return edge (back to start) is an internal one.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}