{"path":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, (StorableField) field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, (StorableField) field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a761b207f161726214a84533bf56a78f6c21ff56","date":1354384027,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      if (norm != -1) {\n        // nocommit is -1 really a safe \"not set\" value!?\n        // nocommit shouldn't we require that it's either\n        // all -1's or none?  a sim can't not compute norms\n        // for only some docs?  hmm unless the field is\n        // missing for this doc... but then finish() isn't\n        // called?\n        simpleNormsWriter.addValue(docState.docID, norm);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e079e6b6e6f654e6ad193248a6889e5b03d09f0","date":1355181749,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      if (norm != -1) {\n        // nocommit is -1 really a safe \"not set\" value!?\n        // nocommit shouldn't we require that it's either\n        // all -1's or none?  a sim can't not compute norms\n        // for only some docs?  hmm unless the field is\n        // missing for this doc... but then finish() isn't\n        // called?\n        simpleNormsWriter.addValue(docState.docID, norm);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      if (norm != -1) {\n        // nocommit is -1 really a safe \"not set\" value!?\n        // nocommit shouldn't we require that it's either\n        // all -1's or none?  a sim can't not compute norms\n        // for only some docs?  hmm unless the field is\n        // missing for this doc... but then finish() isn't\n        // called?\n        simpleNormsWriter.addValue(docState.docID, norm);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6","date":1357912799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      simpleNormsWriter.addValue(docState.docID, norm);\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      if (norm != -1) {\n        // nocommit is -1 really a safe \"not set\" value!?\n        // nocommit shouldn't we require that it's either\n        // all -1's or none?  a sim can't not compute norms\n        // for only some docs?  hmm unless the field is\n        // missing for this doc... but then finish() isn't\n        // called?\n        simpleNormsWriter.addValue(docState.docID, norm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n\n      long norm = similarity.computeSimpleNorm(fieldState);\n      simpleNormsWriter.addValue(docState.docID, norm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7649a7f5af3862074b213bfad955681cf4a14f1e","date":1358289993,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1552916e7512a3bbf5d2364c3a97a677ce055ea","date":1358290892,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        // nocommit wrongish?  what about the\n        // only-doc-with-norms-enabled-hits-exc case?\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        // nocommit wrongish?  what about the\n        // only-doc-with-norms-enabled-hits-exc case?\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        // nocommit wrongish?  what about the\n        // only-doc-with-norms-enabled-hits-exc case?\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumberDVWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d51b9496691c7108d6d92f2c239c5dbf55f08a5f","date":1360017711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        // nocommit wrongish?  what about the\n        // only-doc-with-norms-enabled-hits-exc case?\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        StorableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","f6e3376a314fcc2b31bc46d399c2ff23552b78d6","a7e4907084808af8fdb14b9809e6dceaccf6867b","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":null,"sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed() && !fieldInfo.omitsNorms()) {\n      if (consumer == null) {\n        fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n        consumer = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n      }\n      consumer.addValue(docState.docID, similarity.computeNorm(fieldState));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a761b207f161726214a84533bf56a78f6c21ff56":["1d028314cced5858683a1bb4741423d0f934257b"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","3394716f52b34ab259ad5247e7595d9f9db6e935"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d51b9496691c7108d6d92f2c239c5dbf55f08a5f":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"7649a7f5af3862074b213bfad955681cf4a14f1e":["0837ab0472feecb3a54260729d845f839e1cbd72"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["5e079e6b6e6f654e6ad193248a6889e5b03d09f0"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","52c7e49be259508735752fba88085255014a6ecf"],"1d028314cced5858683a1bb4741423d0f934257b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","d51b9496691c7108d6d92f2c239c5dbf55f08a5f"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a1552916e7512a3bbf5d2364c3a97a677ce055ea"],"a1552916e7512a3bbf5d2364c3a97a677ce055ea":["7649a7f5af3862074b213bfad955681cf4a14f1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"52c7e49be259508735752fba88085255014a6ecf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"5e079e6b6e6f654e6ad193248a6889e5b03d09f0":["a761b207f161726214a84533bf56a78f6c21ff56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"a761b207f161726214a84533bf56a78f6c21ff56":["5e079e6b6e6f654e6ad193248a6889e5b03d09f0"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"d51b9496691c7108d6d92f2c239c5dbf55f08a5f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7649a7f5af3862074b213bfad955681cf4a14f1e":["a1552916e7512a3bbf5d2364c3a97a677ce055ea"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["0837ab0472feecb3a54260729d845f839e1cbd72"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1d028314cced5858683a1bb4741423d0f934257b":["a761b207f161726214a84533bf56a78f6c21ff56","d4d69c535930b5cce125cff868d40f6373dc27d4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["d51b9496691c7108d6d92f2c239c5dbf55f08a5f"],"a1552916e7512a3bbf5d2364c3a97a677ce055ea":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["7649a7f5af3862074b213bfad955681cf4a14f1e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"5e079e6b6e6f654e6ad193248a6889e5b03d09f0":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}