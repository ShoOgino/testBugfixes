{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.utf8ToString().substring(0, Math.min(tf.term.length, \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8abd86d7102f3ea14f536b67e9707d0aee52b6eb","date":1330583610,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.utf8ToString().substring(0, Math.min(tf.term.length, \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0037153b2edeab3baf8bdbe36a9de8ebdb1b258a","date":1330687334,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0037153b2edeab3baf8bdbe36a9de8ebdb1b258a":["8abd86d7102f3ea14f536b67e9707d0aee52b6eb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0037153b2edeab3baf8bdbe36a9de8ebdb1b258a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["e230a61047bc041516c811baa08a7174d6f8322a","0037153b2edeab3baf8bdbe36a9de8ebdb1b258a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8abd86d7102f3ea14f536b67e9707d0aee52b6eb":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"0037153b2edeab3baf8bdbe36a9de8ebdb1b258a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e230a61047bc041516c811baa08a7174d6f8322a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d334a3e8e6b94298d8cf2802a403a096c06f0b92","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["8abd86d7102f3ea14f536b67e9707d0aee52b6eb"],"8abd86d7102f3ea14f536b67e9707d0aee52b6eb":["0037153b2edeab3baf8bdbe36a9de8ebdb1b258a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}