{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SortStream#SortStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"d9a4952b035bd0644022bb7f553db72494001efa","date":1460684366,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SortStream#SortStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SortStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to sort over but didn't find one\",expression));\n    }\n    \n    init(\n          factory.constructStream(streamExpressions.get(0)),\n          factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","date":1460703694,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SortStream#SortStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SortStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to sort over but didn't find one\",expression));\n    }\n    \n    init(\n          factory.constructStream(streamExpressions.get(0)),\n          factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9a4952b035bd0644022bb7f553db72494001efa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9a4952b035bd0644022bb7f553db72494001efa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"]},"commit2Childs":{"d9a4952b035bd0644022bb7f553db72494001efa":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a4952b035bd0644022bb7f553db72494001efa","0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}