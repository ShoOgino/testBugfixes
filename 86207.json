{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = wordLength; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = wordLength; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = numWords; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = wordLength; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    // Depends on the ghost bits being clear!\n    long h = 0;\n    for (int i = numWords; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    long h = 0;\n    for (int i = numWords; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int) ((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4015cd39dff8d4dec562d909f9766debac53aa6","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["c4015cd39dff8d4dec562d909f9766debac53aa6","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}