{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testPathDistance().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testPathDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testPathDistance().mjava","sourceNew":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testPathDistance() {\n    // Start with a really simple case\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.5, 0.15);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12 + 0.0, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.15, 0.05);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.25);\n    assertEquals(0.20 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.05);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Compute path distances now\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(0.0, 0.0);\n    p.addPoint(0.0, 0.1);\n    p.addPoint(0.0, 0.2);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, 0.15);\n    assertEquals(0.15 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.12);\n    assertEquals(0.12, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n\n    // Now try a vertical path, and make sure distances are as expected\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-Math.PI * 0.25, -0.5);\n    p.addPoint(Math.PI * 0.25, -0.5);\n    p.done();\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.1, -1.0);\n    assertEquals(Double.MAX_VALUE, p.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, Math.PI * 0.25 + 0.05, -0.5);\n    assertEquals(Math.PI * 0.5 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.25 - 0.05, -0.5);\n    assertEquals(0.0 + 0.05, p.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}