{"path":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"732de6718534f7b42fc956f4929b953ef4b1610f","date":1332871688,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.shutdown();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.shutdown();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.shutdown();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + docUpto + \" of \" + NUM_DOCS);\n      }\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n        if (random().nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.shutdown();\n        }\n        w = new RandomIndexWriter(random(), dir, iwc);\n        docsLeftInThisSegment = TestUtil.nextInt(random(), 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newStringField(\"id\", String.valueOf(docUpto), Field.Store.YES));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete...\");\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random().nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random().nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"732de6718534f7b42fc956f4929b953ef4b1610f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["732de6718534f7b42fc956f4929b953ef4b1610f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"732de6718534f7b42fc956f4929b953ef4b1610f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["732de6718534f7b42fc956f4929b953ef4b1610f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}