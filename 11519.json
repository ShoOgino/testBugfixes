{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.getDocFetcher().isLazyFieldLoadingEnabled()) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.getDocFetcher().isLazyFieldLoadingEnabled()) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = searcher.getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}