{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","sourceOld":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","sourceOld":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","sourceOld":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","sourceOld":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#compareOutput(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    @SuppressWarnings({\"rawtypes\"})\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","sourceOld":"  static ZkNodeProps compareOutput(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n                            final String payload, final CoreContainer cc, String expectedOutputMapJson) throws Exception {\n    Pair<SolrQueryRequest, SolrQueryResponse> ctx = makeCall(apiBag, path, method, payload, cc);\n    ZkNodeProps output = (ZkNodeProps) ctx.second().getValues().get(ZkNodeProps.class.getName());\n    Map expected = (Map) fromJSONString(expectedOutputMapJson);\n    assertMapEqual(expected, output);\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["e9017cf144952056066919f1ebc7897ff9bd71b1","4c538b3eeebd03c2067a2fa5be92f073a08b6f41","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}