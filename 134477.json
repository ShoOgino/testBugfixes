{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","commits":[{"id":"3532ef9e3edcbdf674841a5f549101f5416c62a5","date":1416413081,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(\"name\");\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(\"name\");\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(\"name\");\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0bba9e104010e438d33cdb0c21121f83a8cc49","date":1459882900,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      if (managedResource instanceof JmxAugmentedSolrInfoMBean) {\n        final JmxAugmentedSolrInfoMBean jmxSpecific = (JmxAugmentedSolrInfoMBean)managedResource;\n        this.infoBean = new SolrInfoMBeanWrapper(jmxSpecific) {\n          @Override\n          public NamedList getStatistics() { return jmxSpecific.getStatisticsForJmx(); }\n        };\n      } else {\n        this.infoBean = managedResource;\n      }\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      if (managedResource instanceof JmxAugmentedSolrInfoMBean) {\n        final JmxAugmentedSolrInfoMBean jmxSpecific = (JmxAugmentedSolrInfoMBean)managedResource;\n        this.infoBean = new SolrInfoMBeanWrapper(jmxSpecific) {\n          @Override\n          public NamedList getStatistics() { return jmxSpecific.getStatisticsForJmx(); }\n        };\n      } else {\n        this.infoBean = managedResource;\n      }\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      this.infoBean = managedResource;\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":null,"sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      if (managedResource instanceof JmxAugmentedSolrInfoMBean) {\n        final JmxAugmentedSolrInfoMBean jmxSpecific = (JmxAugmentedSolrInfoMBean)managedResource;\n        this.infoBean = new SolrInfoMBeanWrapper(jmxSpecific) {\n          @Override\n          public NamedList getStatistics() { return jmxSpecific.getStatisticsForJmx(); }\n        };\n      } else {\n        this.infoBean = managedResource;\n      }\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#SolrDynamicMBean(String,SolrInfoMBean,boolean).mjava","sourceNew":null,"sourceOld":"    public SolrDynamicMBean(String coreHashCode, SolrInfoMBean managedResource, boolean useCachedStatsBetweenGetMBeanInfoCalls) {\n      this.useCachedStatsBetweenGetMBeanInfoCalls = useCachedStatsBetweenGetMBeanInfoCalls;\n      if (managedResource instanceof JmxAugmentedSolrInfoMBean) {\n        final JmxAugmentedSolrInfoMBean jmxSpecific = (JmxAugmentedSolrInfoMBean)managedResource;\n        this.infoBean = new SolrInfoMBeanWrapper(jmxSpecific) {\n          @Override\n          public NamedList getStatistics() { return jmxSpecific.getStatisticsForJmx(); }\n        };\n      } else {\n        this.infoBean = managedResource;\n      }\n      staticStats = new HashSet<>();\n\n      // For which getters are already available in SolrInfoMBean\n      staticStats.add(NAME);\n      staticStats.add(\"version\");\n      staticStats.add(\"description\");\n      staticStats.add(\"category\");\n      staticStats.add(\"source\");\n      this.coreHashCode = coreHashCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["1390137e395d2f07f9ba5b8c43d293befe84d563","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["3532ef9e3edcbdf674841a5f549101f5416c62a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["3532ef9e3edcbdf674841a5f549101f5416c62a5","1390137e395d2f07f9ba5b8c43d293befe84d563"],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"816521ebaad5add9cb96bb88c577394e2938c40b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b6284684320a9808c41a5e43de958b2da22f89bd":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["b6284684320a9808c41a5e43de958b2da22f89bd","d2638f781be724518ff6c2263d14a48cf6e68017","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3532ef9e3edcbdf674841a5f549101f5416c62a5"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["b6284684320a9808c41a5e43de958b2da22f89bd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}