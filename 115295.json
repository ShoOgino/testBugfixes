{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n\n      // System.out.println(\"D&P reset bytes this=\" + this);\n      // for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n      //   System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n      // }\n\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["06e9e87a586e724774d060a39c60ed1178637952","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["06e9e87a586e724774d060a39c60ed1178637952","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06e9e87a586e724774d060a39c60ed1178637952":["38e3b736c7ca086d61b7dbb841c905ee115490da","c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}