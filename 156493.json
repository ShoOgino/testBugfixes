{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","commits":[{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Used only by sort below, to set a {@link BytesRef} with the specified slice, avoiding copying bytes in the common case when the slice\n   *  is contained in a single block in the byte block pool. */\n  private void setBytesRef(BytesRefBuilder spare, BytesRef result, int index) {\n    if (index < lastElement) {\n      int offset = offsets[index];\n      int length;\n      if (index == lastElement - 1) {\n        length = currentOffset - offset;\n      } else {\n        length = offsets[index + 1] - offset;\n      }\n      pool.setBytesRef(spare, result, offset, length);\n    } else {\n      throw new IndexOutOfBoundsException(\"index \" + index + \" must be less than the size: \" + lastElement);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","sourceNew":"  /** Used only by sort below, to set a {@link BytesRef} with the specified slice, avoiding copying bytes in the common case when the slice\n   *  is contained in a single block in the byte block pool. */\n  private void setBytesRef(BytesRefBuilder spare, BytesRef result, int index) {\n    FutureObjects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length;\n    if (index == lastElement - 1) {\n      length = currentOffset - offset;\n    } else {\n      length = offsets[index + 1] - offset;\n    }\n    pool.setBytesRef(spare, result, offset, length);\n  }\n\n","sourceOld":"  /** Used only by sort below, to set a {@link BytesRef} with the specified slice, avoiding copying bytes in the common case when the slice\n   *  is contained in a single block in the byte block pool. */\n  private void setBytesRef(BytesRefBuilder spare, BytesRef result, int index) {\n    if (index < lastElement) {\n      int offset = offsets[index];\n      int length;\n      if (index == lastElement - 1) {\n        length = currentOffset - offset;\n      } else {\n        length = offsets[index + 1] - offset;\n      }\n      pool.setBytesRef(spare, result, offset, length);\n    } else {\n      throw new IndexOutOfBoundsException(\"index \" + index + \" must be less than the size: \" + lastElement);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#setBytesRef(BytesRefBuilder,BytesRef,int).mjava","sourceNew":"  /** Used only by sort below, to set a {@link BytesRef} with the specified slice, avoiding copying bytes in the common case when the slice\n   *  is contained in a single block in the byte block pool. */\n  private void setBytesRef(BytesRefBuilder spare, BytesRef result, int index) {\n    Objects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length;\n    if (index == lastElement - 1) {\n      length = currentOffset - offset;\n    } else {\n      length = offsets[index + 1] - offset;\n    }\n    pool.setBytesRef(spare, result, offset, length);\n  }\n\n","sourceOld":"  /** Used only by sort below, to set a {@link BytesRef} with the specified slice, avoiding copying bytes in the common case when the slice\n   *  is contained in a single block in the byte block pool. */\n  private void setBytesRef(BytesRefBuilder spare, BytesRef result, int index) {\n    FutureObjects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length;\n    if (index == lastElement - 1) {\n      length = currentOffset - offset;\n    } else {\n      length = offsets[index + 1] - offset;\n    }\n    pool.setBytesRef(spare, result, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["73860c1174109b7d888d50a10088afb18293b153"],"73860c1174109b7d888d50a10088afb18293b153":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"73860c1174109b7d888d50a10088afb18293b153":["456d7e7092cb043c740b4674301660ee8abc26fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73860c1174109b7d888d50a10088afb18293b153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}