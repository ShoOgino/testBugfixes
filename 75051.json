{"path":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testSolrUrlWhitelist().mjava","commits":[{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testSolrUrlWhitelist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrUrlWhitelist() throws Exception {\n    setupIndexes(false);\n\n    // programmatically add the current jetty solr url to the solrUrl whitelist property in the solrconfig.xml\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      System.setProperty(\"test.xcjf.solr.url.\" + i, runner.getBaseUrl().toString());\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"xcjf\"), \"xcjf\");\n      // reload the cores with the updated whitelisted solr url config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n\n      final ModifiableSolrParams params = new ModifiableSolrParams();\n      //  a bogus solrUrl\n      params.add(\"q\", \"\");\n      params.add(\"rows\", \"0\");\n\n      // we expect an exception because bogus url isn't valid.\n      try {\n        // This should throw an exception.\n        // verify the xcfj_whitelist definition has the current valid urls and works.\n        testXcjfQuery(String.format(Locale.ROOT,\n            \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n            \"http://bogus.example.com:8983/solr\"),\n            true);\n        fail(\"The query invovling bogus.example.com should not succeed\");\n      } catch (Exception e) {\n        // should get here.\n        String message = e.getMessage();\n        assertTrue(\"message was \" + message, message.contains(\"SyntaxError: Solr Url was not in the whitelist\"));\n      }\n\n      // verify the xcfj_whitelist definition has the current valid urls and works.\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n          getSolrUrl()),\n          true);\n\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.xcjf.solr.url.\" + i);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testSolrUrlWhitelist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrUrlWhitelist() throws Exception {\n    setupIndexes(false);\n\n    // programmatically add the current jetty solr url to the solrUrl whitelist property in the solrconfig.xml\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      System.setProperty(\"test.xcjf.solr.url.\" + i, runner.getBaseUrl().toString());\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"xcjf\"), \"xcjf\");\n      // reload the cores with the updated whitelisted solr url config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n\n      final ModifiableSolrParams params = new ModifiableSolrParams();\n      //  a bogus solrUrl\n      params.add(\"q\", \"\");\n      params.add(\"rows\", \"0\");\n\n      // we expect an exception because bogus url isn't valid.\n      try {\n        // This should throw an exception.\n        // verify the xcfj_whitelist definition has the current valid urls and works.\n        testXcjfQuery(String.format(Locale.ROOT,\n            \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n            \"http://bogus.example.com:8983/solr\"),\n            true);\n        fail(\"The query invovling bogus.example.com should not succeed\");\n      } catch (Exception e) {\n        // should get here.\n        String message = e.getMessage();\n        assertTrue(\"message was \" + message, message.contains(\"SyntaxError: Solr Url was not in the whitelist\"));\n      }\n\n      // verify the xcfj_whitelist definition has the current valid urls and works.\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n          getSolrUrl()),\n          true);\n\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.xcjf.solr.url.\" + i);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":5,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#testAllowSolrUrlsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testSolrUrlWhitelist().mjava","sourceNew":"  @Test\n  public void testAllowSolrUrlsList() throws Exception {\n    setupIndexes(false);\n\n    // programmatically add the current jetty solr url to the allowSolrUrls property in the solrconfig.xml\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      System.setProperty(\"test.ccjoin.solr.url.\" + i, runner.getBaseUrl().toString());\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"ccjoin\"), \"ccjoin\");\n      // reload the cores with the updated allowSolrUrls config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n\n      final ModifiableSolrParams params = new ModifiableSolrParams();\n      //  a bogus solrUrl\n      params.add(\"q\", \"\");\n      params.add(\"rows\", \"0\");\n\n      // we expect an exception because bogus url isn't valid.\n      try {\n        // This should throw an exception.\n        // verify the join plugin definition has the current valid urls and works.\n        testCcJoinQuery(String.format(Locale.ROOT,\n            \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_i to=product_id_i}size_s:M\",\n            \"http://bogus.example.com:8983/solr\"),\n            true);\n        fail(\"The query invovling bogus.example.com should not succeed\");\n      } catch (Exception e) {\n        // should get here.\n        String message = e.getMessage();\n        assertTrue(\"message was \" + message, message.contains(\"SyntaxError: Solr URL was not in allowSolrUrls list\"));\n      }\n\n      // verify the join plugin definition has the current valid urls and works.\n      testCcJoinQuery(String.format(Locale.ROOT,\n          \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_i to=product_id_i}size_s:M\",\n          getSolrUrl()),\n          true);\n\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.ccjoin.solr.url.\" + i);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSolrUrlWhitelist() throws Exception {\n    setupIndexes(false);\n\n    // programmatically add the current jetty solr url to the solrUrl whitelist property in the solrconfig.xml\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      System.setProperty(\"test.xcjf.solr.url.\" + i, runner.getBaseUrl().toString());\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"xcjf\"), \"xcjf\");\n      // reload the cores with the updated whitelisted solr url config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n\n      final ModifiableSolrParams params = new ModifiableSolrParams();\n      //  a bogus solrUrl\n      params.add(\"q\", \"\");\n      params.add(\"rows\", \"0\");\n\n      // we expect an exception because bogus url isn't valid.\n      try {\n        // This should throw an exception.\n        // verify the xcfj_whitelist definition has the current valid urls and works.\n        testXcjfQuery(String.format(Locale.ROOT,\n            \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n            \"http://bogus.example.com:8983/solr\"),\n            true);\n        fail(\"The query invovling bogus.example.com should not succeed\");\n      } catch (Exception e) {\n        // should get here.\n        String message = e.getMessage();\n        assertTrue(\"message was \" + message, message.contains(\"SyntaxError: Solr Url was not in the whitelist\"));\n      }\n\n      // verify the xcfj_whitelist definition has the current valid urls and works.\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf_whitelist solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\",\n          getSolrUrl()),\n          true);\n\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.xcjf.solr.url.\" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}