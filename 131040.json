{"path":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testAllNullInput().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testAllNullInput().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testAllNullInput().mjava","sourceNew":"  public void testAllNullInput() {\n    byte[] binary = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte[] decoded = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"  original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","sourceOld":"  public void testAllNullInput() {\n    byte[] binary = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte[] decoded = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"  original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testAllNullInput().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testAllNullInput().mjava","sourceNew":"  public void testAllNullInput() {\n    byte[] binary = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte[] decoded = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"  original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","sourceOld":"  public void testAllNullInput() {\n    byte[] binary = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte[] decoded = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"  original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}