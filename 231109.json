{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ab701c58e80e47103785a18f274bd1a0b0518d","date":1335099574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscapedWildcard().mjava","sourceNew":"  @Ignore(\"flexible queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","sourceOld":"  @Ignore(\"contrib queryparser shouldn't escape wildcard terms\")\n  public void testEscapedWildcard() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n\n    WildcardQuery q = new WildcardQuery(new Term(\"field\", \"foo\\\\?ba?r\"));\n    assertEquals(q, qp.parse(\"foo\\\\?ba?r\", \"field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07ab701c58e80e47103785a18f274bd1a0b0518d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ab701c58e80e47103785a18f274bd1a0b0518d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07ab701c58e80e47103785a18f274bd1a0b0518d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07ab701c58e80e47103785a18f274bd1a0b0518d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}