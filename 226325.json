{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","commits":[{"id":"43023554b4c44cbdd9377af2f5cbeece8a1b6a80","date":1319934992,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","pathOld":"/dev/null","sourceNew":"  public void testInternalLevenshteinDistance() throws Exception {\n    DirectSpellChecker spellchecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, true));\n\n    String[] termsToAdd = { \"metanoia\", \"metanoian\", \"metanoiai\", \"metanoias\", \"metanoiêëç\" };\n    for (int i = 0; i < termsToAdd.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"repentance\", termsToAdd[i], TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n    String misspelled = \"metanoix\";\n    SuggestWord[] similar = spellchecker.suggestSimilar(new Term(\"repentance\", misspelled), 4, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length == 4);\n    \n    StringDistance sd = spellchecker.getDistance();\n    assertTrue(sd instanceof LuceneLevenshteinDistance);\n    for(SuggestWord word : similar) {\n      assertTrue(word.score==sd.getDistance(word.string, misspelled));\n      assertTrue(word.score==sd.getDistance(misspelled, word.string));\n    }\n    \n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","sourceNew":"  public void testInternalLevenshteinDistance() throws Exception {\n    DirectSpellChecker spellchecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, true));\n\n    String[] termsToAdd = { \"metanoia\", \"metanoian\", \"metanoiai\", \"metanoias\", \"metanoiêëç\" };\n    for (int i = 0; i < termsToAdd.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"repentance\", termsToAdd[i], TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n    String misspelled = \"metanoix\";\n    SuggestWord[] similar = spellchecker.suggestSimilar(new Term(\"repentance\", misspelled), 4, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length == 4);\n    \n    StringDistance sd = spellchecker.getDistance();\n    assertTrue(sd instanceof LuceneLevenshteinDistance);\n    for(SuggestWord word : similar) {\n      assertTrue(word.score==sd.getDistance(word.string, misspelled));\n      assertTrue(word.score==sd.getDistance(misspelled, word.string));\n    }\n    \n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testInternalLevenshteinDistance() throws Exception {\n    DirectSpellChecker spellchecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, true));\n\n    String[] termsToAdd = { \"metanoia\", \"metanoian\", \"metanoiai\", \"metanoias\", \"metanoiêëç\" };\n    for (int i = 0; i < termsToAdd.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"repentance\", termsToAdd[i], TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n    String misspelled = \"metanoix\";\n    SuggestWord[] similar = spellchecker.suggestSimilar(new Term(\"repentance\", misspelled), 4, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length == 4);\n    \n    StringDistance sd = spellchecker.getDistance();\n    assertTrue(sd instanceof LuceneLevenshteinDistance);\n    for(SuggestWord word : similar) {\n      assertTrue(word.score==sd.getDistance(word.string, misspelled));\n      assertTrue(word.score==sd.getDistance(misspelled, word.string));\n    }\n    \n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testInternalLevenshteinDistance().mjava","sourceNew":"  public void testInternalLevenshteinDistance() throws Exception {\n    DirectSpellChecker spellchecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, true));\n\n    String[] termsToAdd = { \"metanoia\", \"metanoian\", \"metanoiai\", \"metanoias\", \"metanoiêëç\" };\n    for (int i = 0; i < termsToAdd.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"repentance\", termsToAdd[i], TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n    String misspelled = \"metanoix\";\n    SuggestWord[] similar = spellchecker.suggestSimilar(new Term(\"repentance\", misspelled), 4, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length == 4);\n    \n    StringDistance sd = spellchecker.getDistance();\n    assertTrue(sd instanceof LuceneLevenshteinDistance);\n    for(SuggestWord word : similar) {\n      assertTrue(word.score==sd.getDistance(word.string, misspelled));\n      assertTrue(word.score==sd.getDistance(misspelled, word.string));\n    }\n    \n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testInternalLevenshteinDistance() throws Exception {\n    DirectSpellChecker spellchecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, true));\n\n    String[] termsToAdd = { \"metanoia\", \"metanoian\", \"metanoiai\", \"metanoias\", \"metanoiêëç\" };\n    for (int i = 0; i < termsToAdd.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"repentance\", termsToAdd[i], TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n    String misspelled = \"metanoix\";\n    SuggestWord[] similar = spellchecker.suggestSimilar(new Term(\"repentance\", misspelled), 4, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length == 4);\n    \n    StringDistance sd = spellchecker.getDistance();\n    assertTrue(sd instanceof LuceneLevenshteinDistance);\n    for(SuggestWord word : similar) {\n      assertTrue(word.score==sd.getDistance(word.string, misspelled));\n      assertTrue(word.score==sd.getDistance(misspelled, word.string));\n    }\n    \n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["43023554b4c44cbdd9377af2f5cbeece8a1b6a80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"43023554b4c44cbdd9377af2f5cbeece8a1b6a80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43023554b4c44cbdd9377af2f5cbeece8a1b6a80"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"43023554b4c44cbdd9377af2f5cbeece8a1b6a80":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}