{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException\n    {\n        String tempDir = System.getProperty(\"tempDir\");\n        if (tempDir == null)\n            throw new IOException(\"tempDir undefined, cannot run test\");\n\n        File indexDir = new File(tempDir, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException\n    {\n        String tempDir = System.getProperty(\"tempDir\");\n        if (tempDir == null)\n            throw new IOException(\"tempDir undefined, cannot run test\");\n\n        File indexDir = new File(tempDir, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testWritingNorms().mjava","sourceNew":null,"sourceOld":"    // Make sure you can set norms & commit even if a reader\n    // is open against the index:\n    public void testWritingNorms() throws IOException\n    {\n        String tempDir = System.getProperty(\"tempDir\");\n        if (tempDir == null)\n            throw new IOException(\"tempDir undefined, cannot run test\");\n\n        File indexDir = new File(tempDir, \"lucenetestnormwriter\");\n        Directory dir = FSDirectory.open(indexDir);\n        IndexWriter writer;\n        IndexReader reader;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 1 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, searchTerm.text());\n        writer.close();\n\n        //  now open reader & set norm for doc 0\n        reader = IndexReader.open(dir, false);\n        reader.setNorm(0, \"content\", (float) 2.0);\n\n        // we should be holding the write lock now:\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.commit();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        // open a 2nd reader:\n        IndexReader reader2 = IndexReader.open(dir, false);\n\n        // set norm again for doc 0\n        reader.setNorm(0, \"content\", (float) 3.0);\n        assertTrue(\"locked\", IndexWriter.isLocked(dir));\n\n        reader.close();\n\n        // we should not be holding the write lock now:\n        assertTrue(\"not locked\", !IndexWriter.isLocked(dir));\n\n        reader2.close();\n        dir.close();\n\n        rmDir(indexDir);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}