{"path":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","commits":[{"id":"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca","date":1064151933,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#test().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() throws IOException {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public static void test() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n        public TokenStream tokenStream(String fieldName, Reader reader) {\n          return new TokenStream() {\n              private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n              private final int[] INCREMENTS = {1, 2,  1,    0,   1};\n              private int i = 0;\n              public Token next() throws IOException {\n                if (i == TOKENS.length)\n                  return null;\n                Token t = new Token(TOKENS[i], i, i);\n                t.setPositionIncrement(INCREMENTS[i]);\n                i++;\n                return t;\n              }\n            };\n        }\n      };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"1\"));\n    q.add(new Term(\"field\",\"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"4\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() throws IOException {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() throws IOException {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a193cad2121fcaf5b160068324e0dd1a4abfa38","date":1097423085,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() throws IOException {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(0, hits.length());\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(1, hits.length());\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(0, hits.length());\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(1, hits.length());\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(0, hits.length());\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(1, hits.length());\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(0, hits.length());\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q);\n      assertEquals(1, hits.length());\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            if (i == TOKENS.length)\n              return null;\n            reusableToken.reinit(TOKENS[i], i, i);\n            reusableToken.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return reusableToken;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            if (i == TOKENS.length)\n              return null;\n            reusableToken.reinit(TOKENS[i], i, i);\n            reusableToken.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return reusableToken;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            if (i == TOKENS.length)\n              return null;\n            reusableToken.reinit(TOKENS[i], i, i);\n            reusableToken.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return reusableToken;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setStartOffset(i);\n            offsetAtt.setEndOffset(i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next(final Token reusableToken) {\n            assert reusableToken != null;\n            if (i == TOKENS.length)\n              return null;\n            reusableToken.reinit(TOKENS[i], i, i);\n            reusableToken.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return reusableToken;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10855b393afd8884613d82de3a4fff773d4e5334","date":1240953458,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setStartOffset(i);\n            offsetAtt.setEndOffset(i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c576fba1e3c6d11c61fa0802214d5150fb5c633","date":1243676170,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54c106a73719ede69e08f8b0ffe2950cc9ebfa07","date":1244055085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // analyzer to introduce stopwords and increment gaps \n    Analyzer stpa = new Analyzer() {\n      final WhitespaceAnalyzer a = new WhitespaceAnalyzer();\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        TokenStream ts = a.tokenStream(fieldName,reader);\n        return new StopFilter(ts,new String[]{\"stop\"});\n      }\n    };\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",stpa);\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    try {\n      // stop filter alone won't help, because query parser swallows the increments. \n      qp.setEnablePositionIncrements(false);\n      StopFilter.setEnablePositionIncrementsDefault(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n      \n      // when both qp qnd stopFilter propagate increments, we should find the doc.\n      qp.setEnablePositionIncrements(true);\n      q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n      hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(\"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(\"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(Version.LUCENE_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["693d6573b6621fc1265316fc6b042c24235c81d8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"10855b393afd8884613d82de3a4fff773d4e5334":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"360d15dc189fb48153cb62234f7d20819e4e292e":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"693d6573b6621fc1265316fc6b042c24235c81d8":["0a193cad2121fcaf5b160068324e0dd1a4abfa38"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0a193cad2121fcaf5b160068324e0dd1a4abfa38":["773e104db917d6cc9acade5a8aeb91a886192b99"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["360d15dc189fb48153cb62234f7d20819e4e292e"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"773e104db917d6cc9acade5a8aeb91a886192b99":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["10855b393afd8884613d82de3a4fff773d4e5334"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"10855b393afd8884613d82de3a4fff773d4e5334":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"360d15dc189fb48153cb62234f7d20819e4e292e":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["773e104db917d6cc9acade5a8aeb91a886192b99"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["360d15dc189fb48153cb62234f7d20819e4e292e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"693d6573b6621fc1265316fc6b042c24235c81d8":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0a193cad2121fcaf5b160068324e0dd1a4abfa38":["693d6573b6621fc1265316fc6b042c24235c81d8"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["10855b393afd8884613d82de3a4fff773d4e5334"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"773e104db917d6cc9acade5a8aeb91a886192b99":["0a193cad2121fcaf5b160068324e0dd1a4abfa38"],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}