{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","sourceNew":null,"sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}