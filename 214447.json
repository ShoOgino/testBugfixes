{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":null,"sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"c26f00b574427b55127e869b935845554afde1fa":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}