{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","commits":[{"id":"699a2199028b8eadcc558eebcf669e5fc708524a","date":1417544403,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"078fa9e94da55eaa1aa1e7393aa84ba7cc986864","date":1418310060,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f756f355450b30d33fe4479d81dad3e4d100ded4","date":1419858140,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["699a2199028b8eadcc558eebcf669e5fc708524a"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["f756f355450b30d33fe4479d81dad3e4d100ded4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"699a2199028b8eadcc558eebcf669e5fc708524a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f756f355450b30d33fe4479d81dad3e4d100ded4":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"]},"commit2Childs":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["f756f355450b30d33fe4479d81dad3e4d100ded4"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["699a2199028b8eadcc558eebcf669e5fc708524a"],"699a2199028b8eadcc558eebcf669e5fc708524a":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"f756f355450b30d33fe4479d81dad3e4d100ded4":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}