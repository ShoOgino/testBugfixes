{"path":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer()\n  // each scorer counted as a single matcher\n  {\n    if (requiredScorers.size() == 0) {\n      if (optionalScorers.size() == 0) {\n        return new NonMatchingScorer();  // only prohibited scorers\n      } else if (optionalScorers.size() == 1) {\n        return makeCountingSumScorer2( // the only optional scorer is required\n                  new SingleMatchScorer((Scorer) optionalScorers.get(0)),\n                  new ArrayList()); // no optional scorers left\n      } else { // more than 1 optionalScorers, no required scorers\n        return makeCountingSumScorer2( // at least one optional scorer is required\n                  countingDisjunctionSumScorer(optionalScorers), \n                  new ArrayList()); // no optional scorers left\n      }\n    } else if (requiredScorers.size() == 1) { // 1 required\n      return makeCountingSumScorer2(\n                  new SingleMatchScorer((Scorer) requiredScorers.get(0)),\n                  optionalScorers);\n    } else { // more required scorers\n      return makeCountingSumScorer2(\n                  countingConjunctionSumScorer(requiredScorers),\n                  optionalScorers);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer() { // each scorer counted as a single matcher\n    return (requiredScorers.size() == 0)\n          ? makeCountingSumScorerNoReq()\n          : makeCountingSumScorerSomeReq();\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer()\n  // each scorer counted as a single matcher\n  {\n    if (requiredScorers.size() == 0) {\n      if (optionalScorers.size() == 0) {\n        return new NonMatchingScorer();  // only prohibited scorers\n      } else if (optionalScorers.size() == 1) {\n        return makeCountingSumScorer2( // the only optional scorer is required\n                  new SingleMatchScorer((Scorer) optionalScorers.get(0)),\n                  new ArrayList()); // no optional scorers left\n      } else { // more than 1 optionalScorers, no required scorers\n        return makeCountingSumScorer2( // at least one optional scorer is required\n                  countingDisjunctionSumScorer(optionalScorers), \n                  new ArrayList()); // no optional scorers left\n      }\n    } else if (requiredScorers.size() == 1) { // 1 required\n      return makeCountingSumScorer2(\n                  new SingleMatchScorer((Scorer) requiredScorers.get(0)),\n                  optionalScorers);\n    } else { // more required scorers\n      return makeCountingSumScorer2(\n                  countingConjunctionSumScorer(requiredScorers),\n                  optionalScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer() throws IOException { // each scorer counted as a single matcher\n    return (requiredScorers.size() == 0)\n          ? makeCountingSumScorerNoReq()\n          : makeCountingSumScorerSomeReq();\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer() { // each scorer counted as a single matcher\n    return (requiredScorers.size() == 0)\n          ? makeCountingSumScorerNoReq()\n          : makeCountingSumScorerSomeReq();\n  }\n\n","bugFix":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer().mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer() throws IOException { // each scorer counted as a single matcher\n    return (requiredScorers.size() == 0)\n          ? makeCountingSumScorerNoReq()\n          : makeCountingSumScorerSomeReq();\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses requiredScorers, optionalScorers and prohibitedScorers.\n   */\n  private Scorer makeCountingSumScorer() throws IOException { // each scorer counted as a single matcher\n    return (requiredScorers.size() == 0)\n          ? makeCountingSumScorerNoReq()\n          : makeCountingSumScorerSomeReq();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a251547210ad8523f10c15c461496a2ad4bb3df4"]},"commit2Childs":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}