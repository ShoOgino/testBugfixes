{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(EventType,String,Map[String,Object]).mjava","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    public synchronized Trigger create(EventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props);\n\n","sourceOld":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc58dbf9573e66a3054c7c372862b8e5a77a9da","date":1504796681,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e412fed1b23292038553fbe85fe61cd7aa8472","date":1505751927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer, zkController);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer, zkController);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer, zkController);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer, zkController);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer, zkController);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer, zkController);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props);\n\n","sourceOld":"    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, coreContainer, zkController);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, coreContainer, zkController);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException;\n\n","sourceOld":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactory#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    public abstract Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}