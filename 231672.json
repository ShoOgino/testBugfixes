{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader, field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    final int maxDoc = context.reader.maxDoc();\n    return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n      @Override\n      boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader, field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader, field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    final int maxDoc = context.reader.maxDoc();\n    return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n      @Override\n      boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader, field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader, field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d55536a3153c541924af58559781c36228d25420"],"d55536a3153c541924af58559781c36228d25420":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d55536a3153c541924af58559781c36228d25420","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["d55536a3153c541924af58559781c36228d25420"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d55536a3153c541924af58559781c36228d25420":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}