{"path":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71062e54c7b3a055a4414dac82a40bdd95767752","date":1274787758,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: http://lucene.apache.org/java/docs/queryparsersyntax.html#Escaping%20Special%20Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["71062e54c7b3a055a4414dac82a40bdd95767752"],"c26f00b574427b55127e869b935845554afde1fa":["71062e54c7b3a055a4414dac82a40bdd95767752","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"71062e54c7b3a055a4414dac82a40bdd95767752":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["71062e54c7b3a055a4414dac82a40bdd95767752"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["71062e54c7b3a055a4414dac82a40bdd95767752"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"71062e54c7b3a055a4414dac82a40bdd95767752":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}