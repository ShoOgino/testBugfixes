{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","commits":[{"id":"741c0c3f0c3403a04cd53ddf802a65a4e7577adf","date":1336132146,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","pathOld":"/dev/null","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(info, leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(info, leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0946cbede4c060f69d0fd5d2e8d3d2b29788318","date":1359536886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStats(leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(info, leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(info, leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStats(leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(info, leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(info, leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(info, leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(info, leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStats(leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf","a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741c0c3f0c3403a04cd53ddf802a65a4e7577adf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0946cbede4c060f69d0fd5d2e8d3d2b29788318":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf"],"741c0c3f0c3403a04cd53ddf802a65a4e7577adf":["61d5f95d14e5b9b046998c51e16709a398c15226","a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"a0946cbede4c060f69d0fd5d2e8d3d2b29788318":["61d5f95d14e5b9b046998c51e16709a398c15226","51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}