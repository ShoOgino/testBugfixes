{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * djb2哈希算法，用作本程序中的第二hash函数\n   * \n   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan\n   * bernstein many years ago in comp.lang.c. another version of this algorithm\n   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];\n   * the magic of number 33 (why it works better than many other constants,\n   * prime or not) has never been adequately explained.\n   * \n   * @param c\n   * @return\n   */\n  public int hash2(char c) {\n    int hash = 5381;\n\n    /* hash 33 + c */\n    hash = ((hash << 5) + hash) + c & 0x00FF;\n    hash = ((hash << 5) + hash) + c >> 8;\n\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","sourceNew":"  /**\n   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan\n   * bernstein many years ago in comp.lang.c. another version of this algorithm\n   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];\n   * the magic of number 33 (why it works better than many other constants,\n   * prime or not) has never been adequately explained.\n   * \n   * @param c character\n   * @return hashcode\n   */\n  public int hash2(char c) {\n    int hash = 5381;\n\n    /* hash 33 + c */\n    hash = ((hash << 5) + hash) + c & 0x00FF;\n    hash = ((hash << 5) + hash) + c >> 8;\n\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * djb2哈希算法，用作本程序中的第二hash函数\n   * \n   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan\n   * bernstein many years ago in comp.lang.c. another version of this algorithm\n   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];\n   * the magic of number 33 (why it works better than many other constants,\n   * prime or not) has never been adequately explained.\n   * \n   * @param c\n   * @return\n   */\n  public int hash2(char c) {\n    int hash = 5381;\n\n    /* hash 33 + c */\n    hash = ((hash << 5) + hash) + c & 0x00FF;\n    hash = ((hash << 5) + hash) + c >> 8;\n\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary#hash2(char).mjava","sourceNew":"  /**\n   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan\n   * bernstein many years ago in comp.lang.c. another version of this algorithm\n   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];\n   * the magic of number 33 (why it works better than many other constants,\n   * prime or not) has never been adequately explained.\n   * \n   * @param c character\n   * @return hashcode\n   */\n  public int hash2(char c) {\n    int hash = 5381;\n\n    /* hash 33 + c */\n    hash = ((hash << 5) + hash) + c & 0x00FF;\n    hash = ((hash << 5) + hash) + c >> 8;\n\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * djb2 hash algorithm，this algorithm (k=33) was first reported by dan\n   * bernstein many years ago in comp.lang.c. another version of this algorithm\n   * (now favored by bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i];\n   * the magic of number 33 (why it works better than many other constants,\n   * prime or not) has never been adequately explained.\n   * \n   * @param c character\n   * @return hashcode\n   */\n  public int hash2(char c) {\n    int hash = 5381;\n\n    /* hash 33 + c */\n    hash = ((hash << 5) + hash) + c & 0x00FF;\n    hash = ((hash << 5) + hash) + c >> 8;\n\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}