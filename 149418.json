{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> result = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.all.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s =  iter.next();\n      //System.out.println(\"Name: \" + s);\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.indexed.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s = iter.next();\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.termvector.size());\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> result = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.all.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s =  iter.next();\n      //System.out.println(\"Name: \" + s);\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.indexed.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s = iter.next();\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.termvector.size());\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> result = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.all.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s =  iter.next();\n      //System.out.println(\"Name: \" + s);\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.indexed.size());\n    for (Iterator<String> iter = result.iterator(); iter.hasNext();) {\n      String s = iter.next();\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.termvector.size());\n    \n    result = reader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR);\n    assertTrue(result != null);\n    assertTrue(result.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}