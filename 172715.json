{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException If there is a low-level I/O error\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeVInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}