{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<Integer>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<Integer>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.shutdown();\n  }\n\n","sourceOld":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an unsorted index; subclasses then sort this index and open sortedReader. */\n  private static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":"  /** Creates an index for sorting. */\n  public static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#createIndex(Directory,int,Random).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#createIndex(Directory,int,Random).mjava","sourceNew":"  /** Creates an unsorted index; subclasses then sort this index and open sortedReader. */\n  private static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","sourceOld":"  /** Creates an unsorted index; subclasses then sort this index and open sortedReader. */\n  private static void createIndex(Directory dir, int numDocs, Random random) throws IOException {\n    List<Integer> ids = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      ids.add(Integer.valueOf(i * 10));\n    }\n    // shuffle them for indexing\n    Collections.shuffle(ids, random);\n    if (VERBOSE) {\n      System.out.println(\"Shuffled IDs for indexing: \" + Arrays.toString(ids.toArray()));\n    }\n    \n    PositionsTokenStream positions = new PositionsTokenStream();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random));\n    conf.setMaxBufferedDocs(4); // create some segments\n    conf.setSimilarity(new NormsSimilarity(conf.getSimilarity())); // for testing norms field\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, conf);\n    writer.setDoRandomForceMerge(false);\n    for (int id : ids) {\n      writer.addDocument(doc(id, positions));\n    }\n    // delete some documents\n    writer.commit();\n    for (Integer id : ids) {\n      if (random.nextDouble() < 0.2) {\n        if (VERBOSE) {\n          System.out.println(\"delete doc_id \" + id);\n        }\n        writer.deleteDocuments(new Term(ID_FIELD, id.toString()));\n      }\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cb767289784b682dea51f9e6d7222add811edb77"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cb767289784b682dea51f9e6d7222add811edb77":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}