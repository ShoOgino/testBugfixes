{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4db7734414fc682d619339760cc21cc16cd0b1d","date":1295892961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f","date":1296392601,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (skipOffset > 0) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff28d83336d21b964812b94574b7e8cea46a3cc","date":1297437050,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (limit >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new DefaultSkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          doc = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n        \n      // scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["aff28d83336d21b964812b94574b7e8cea46a3cc"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"e4db7734414fc682d619339760cc21cc16cd0b1d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["99cf56f3a650b908f7017a72f9d23940418f8a52","b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f":["e4db7734414fc682d619339760cc21cc16cd0b1d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4db7734414fc682d619339760cc21cc16cd0b1d"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"e4db7734414fc682d619339760cc21cc16cd0b1d":["b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["7b91922b55d15444d554721b352861d028eb8278","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"b5cd12ad7d90a8de8f58ba815abbeaa24bbe2b7f":["29ef99d61cda9641b6250bf9567329a6e65f901d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["e4db7734414fc682d619339760cc21cc16cd0b1d","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}