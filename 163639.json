{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","sourceNew":"  private void createCollection(String name, String config, int numShards, int numReplicas)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}