{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher) throws IOException {\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, postingsFlags));\n      }\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,int).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, postingsFlags));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991","date":1441121770,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(disjunctQuery.createWeight(searcher, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n      this.boost = 1f;\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","date":1441700656,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n      this.boost = 1f;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores, boost));\n      }\n      this.needsScores = needsScores;\n    }\n\n","sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#DisjunctionMaxWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    /** Construct the Weight for this Query searched by searcher.  Recursively construct subquery weights. */\n    public DisjunctionMaxWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      super(DisjunctionMaxQuery.this);\n      for (Query disjunctQuery : disjuncts) {\n        weights.add(searcher.createWeight(disjunctQuery, needsScores));\n      }\n      this.needsScores = needsScores;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8dcad5b67a3707b9c95d1ce3d3818cb98ea30991"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["8dcad5b67a3707b9c95d1ce3d3818cb98ea30991"],"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}