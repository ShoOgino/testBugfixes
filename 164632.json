{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.DistributedUpdatesAsyncException#buildCode(List[Error]).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.DistributedUpdatesAsyncException#buildCode(List[Error]).mjava","pathOld":"/dev/null","sourceNew":"    /** Helper method for constructor */\n    private static final int buildCode(List<Error> errors) {\n      assert null != errors;\n      assert 0 < errors.size();\n\n      int minCode = Integer.MAX_VALUE;\n      int maxCode = Integer.MIN_VALUE;\n      for (Error error : errors) {\n        log.trace(\"REMOTE ERROR: {}\", error);\n        minCode = Math.min(error.statusCode, minCode);\n        maxCode = Math.max(error.statusCode, maxCode);\n      }\n      if (minCode == maxCode) {\n        // all codes are consistent, use that...\n        return minCode;\n      } else if (400 <= minCode && maxCode < 500) {\n        // all codes are 4xx, use 400\n        return ErrorCode.BAD_REQUEST.code;\n      } \n      // ...otherwise use sensible default\n      return ErrorCode.SERVER_ERROR.code;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"601f914e4448cab7640fecfb5d15f8f2e2af0bf6","date":1508947828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.DistributedUpdatesAsyncException#buildCode(List[Error]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.DistributedUpdatesAsyncException#buildCode(List[Error]).mjava","sourceNew":"    /** Helper method for constructor */\n    private static int buildCode(List<Error> errors) {\n      assert null != errors;\n      assert 0 < errors.size();\n\n      int minCode = Integer.MAX_VALUE;\n      int maxCode = Integer.MIN_VALUE;\n      for (Error error : errors) {\n        log.trace(\"REMOTE ERROR: {}\", error);\n        minCode = Math.min(error.statusCode, minCode);\n        maxCode = Math.max(error.statusCode, maxCode);\n      }\n      if (minCode == maxCode) {\n        // all codes are consistent, use that...\n        return minCode;\n      } else if (400 <= minCode && maxCode < 500) {\n        // all codes are 4xx, use 400\n        return ErrorCode.BAD_REQUEST.code;\n      } \n      // ...otherwise use sensible default\n      return ErrorCode.SERVER_ERROR.code;\n    }\n\n","sourceOld":"    /** Helper method for constructor */\n    private static final int buildCode(List<Error> errors) {\n      assert null != errors;\n      assert 0 < errors.size();\n\n      int minCode = Integer.MAX_VALUE;\n      int maxCode = Integer.MIN_VALUE;\n      for (Error error : errors) {\n        log.trace(\"REMOTE ERROR: {}\", error);\n        minCode = Math.min(error.statusCode, minCode);\n        maxCode = Math.max(error.statusCode, maxCode);\n      }\n      if (minCode == maxCode) {\n        // all codes are consistent, use that...\n        return minCode;\n      } else if (400 <= minCode && maxCode < 500) {\n        // all codes are 4xx, use 400\n        return ErrorCode.BAD_REQUEST.code;\n      } \n      // ...otherwise use sensible default\n      return ErrorCode.SERVER_ERROR.code;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"]},"commit2Childs":{"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}