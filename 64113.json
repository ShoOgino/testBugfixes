{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","commits":[{"id":"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7","date":1495529154,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","sourceNew":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          OrdinalMap ordinalMap = OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          OrdinalMap ordinalMap = OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testEquals_globalOrdinalsJoin().mjava","sourceNew":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          OrdinalMap ordinalMap = OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          OrdinalMap ordinalMap = OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testEquals_globalOrdinalsJoin() throws Exception {\n    final int numDocs = atLeast(random(), 50);\n    try (final Directory dir = newDirectory()) {\n      try (final RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setMergePolicy(newLogMergePolicy()))) {\n        String joinField = \"field\";\n        for (int id = 0; id < numDocs; id++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"\" + id, Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name\" + (id % 7), Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + random().nextInt(13))));\n          w.addDocument(doc);\n        }\n\n        Set<ScoreMode> scoreModes = EnumSet.allOf(ScoreMode.class);\n        ScoreMode scoreMode1 = RandomPicks.randomFrom(random(), scoreModes);\n        scoreModes.remove(scoreMode1);\n        ScoreMode scoreMode2 = RandomPicks.randomFrom(random(), scoreModes);\n\n        final Query x;\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          x = JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n              indexSearcher, scoreMode1, ordinalMap);\n          assertEquals(\"identical calls to createJoinQuery\",\n              x, JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap));\n\n          assertFalse(\"score mode (\" + scoreMode1 + \" != \" + scoreMode2 + \"), but queries are equal\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode2, ordinalMap)));\n          assertFalse(\"fromQuery (name:name5 != name:name6) but queries equals\",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name6\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n\n        for (int i = 0; i < 13; i++) {\n          Document doc = new Document();\n          doc.add(new TextField(\"id\", \"new_id\" , Field.Store.NO));\n          doc.add(new TextField(\"name\", \"name5\", Field.Store.NO));\n          doc.add(new SortedDocValuesField(joinField, new BytesRef(\"\" + i)));\n          w.addDocument(doc);\n        }\n        try (IndexReader r = w.getReader()) {\n          SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n          for (int i = 0; i < values.length; i++) {\n            LeafReader leafReader =  r.leaves().get(i).reader();\n            values[i] = DocValues.getSorted(leafReader, joinField);\n          }\n          MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n              null, values, PackedInts.DEFAULT\n          );\n          IndexSearcher indexSearcher = new IndexSearcher(r);\n          assertFalse(\"Query shouldn't be equal, because different index readers \",\n              x.equals(JoinUtil.createJoinQuery(joinField, new TermQuery(new Term(\"name\", \"name5\")), new MatchAllDocsQuery(),\n                  indexSearcher, scoreMode1, ordinalMap)));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"957c610636f393a85a38f1af670540028db13e6b":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["e9017cf144952056066919f1ebc7897ff9bd71b1","957c610636f393a85a38f1af670540028db13e6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["957c610636f393a85a38f1af670540028db13e6b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","957c610636f393a85a38f1af670540028db13e6b"],"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}