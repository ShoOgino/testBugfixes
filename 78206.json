{"path":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","commits":[{"id":"c33aa37f7cb15bff94880004576bd9347e871dbc","date":1355453481,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"/dev/null","sourceNew":"  public void doTestNumRequests() throws Exception {\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8","date":1356657569,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","sourceNew":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","sourceOld":"  public void doTestNumRequests() throws Exception {\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"/dev/null","sourceNew":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7623716022a9a68898e329e8ffe6c36d168fba7","date":1384524101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","sourceNew":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,f1!f2!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);\n  }\n\n","sourceOld":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","sourceNew":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,f1!f2!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);\n  }\n\n","sourceOld":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doTestNumRequests().mjava","sourceNew":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", ShardParams._ROUTE_, \"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", ShardParams._ROUTE_, \"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", ShardParams._ROUTE_, \"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", ShardParams._ROUTE_, \"b!,f1!f2!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);\n  }\n\n","sourceOld":"  public void doTestNumRequests() throws Exception {\n    log.info(\"### STARTING doTestNumRequests\");\n\n    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);\n    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);\n    CloudJettyRunner replica =  null;\n    for (CloudJettyRunner r : runners) {\n      if (r != leader) replica = r;\n    }\n\n    long nStart = getNumRequests();\n    leader.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    long nEnd = getNumRequests();\n    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    nStart = getNumRequests();\n    replica.client.solrClient.add( sdoc(\"id\",\"b!doc1\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.\n\n    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);\n\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shards\",bucket1) );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    replica.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!\") );\n    nEnd = getNumRequests();\n    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\") );\n    nEnd = getNumRequests();\n    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,d!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.\n\n    nStart = getNumRequests();\n    leader2.client.solrClient.query( params(\"q\",\"*:*\", \"shard.keys\",\"b!,f1!f2!\") );\n    nEnd = getNumRequests();\n    assertEquals(5, nEnd - nStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["f7623716022a9a68898e329e8ffe6c36d168fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["e0920dbf6195ede2c071dfb0b0c939297dc1a0c8","f7623716022a9a68898e329e8ffe6c36d168fba7"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8":["c33aa37f7cb15bff94880004576bd9347e871dbc"],"c33aa37f7cb15bff94880004576bd9347e871dbc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c33aa37f7cb15bff94880004576bd9347e871dbc"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"e0920dbf6195ede2c071dfb0b0c939297dc1a0c8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f7623716022a9a68898e329e8ffe6c36d168fba7"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c33aa37f7cb15bff94880004576bd9347e871dbc":["e0920dbf6195ede2c071dfb0b0c939297dc1a0c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}