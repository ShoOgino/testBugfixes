{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}