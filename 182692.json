{"path":"lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest#assertSplit(LeafReader,double,double,String...).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest#assertSplit(LeafReader,double,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  public static void assertSplit(LeafReader originalIndex, double testRatio, double crossValidationRatio, String... fieldNames) throws Exception {\n\n    BaseDirectoryWrapper trainingIndex = newDirectory();\n    BaseDirectoryWrapper testIndex = newDirectory();\n    BaseDirectoryWrapper crossValidationIndex = newDirectory();\n\n    try {\n      DatasetSplitter datasetSplitter = new DatasetSplitter(testRatio, crossValidationRatio);\n      datasetSplitter.split(originalIndex, trainingIndex, testIndex, crossValidationIndex, new MockAnalyzer(random()), fieldNames);\n\n      assertNotNull(trainingIndex);\n      assertNotNull(testIndex);\n      assertNotNull(crossValidationIndex);\n\n      DirectoryReader trainingReader = DirectoryReader.open(trainingIndex);\n      assertTrue((int) (originalIndex.maxDoc() * (1d - testRatio - crossValidationRatio)) == trainingReader.maxDoc());\n      DirectoryReader testReader = DirectoryReader.open(testIndex);\n      assertTrue((int) (originalIndex.maxDoc() * testRatio) == testReader.maxDoc());\n      DirectoryReader cvReader = DirectoryReader.open(crossValidationIndex);\n      assertTrue((int) (originalIndex.maxDoc() * crossValidationRatio) == cvReader.maxDoc());\n\n      trainingReader.close();\n      testReader.close();\n      cvReader.close();\n      closeQuietly(trainingReader);\n      closeQuietly(testReader);\n      closeQuietly(cvReader);\n    } finally {\n      if (trainingIndex != null) {\n        trainingIndex.close();\n      }\n      if (testIndex != null) {\n        testIndex.close();\n      }\n      if (crossValidationIndex != null) {\n        crossValidationIndex.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e2d06d853b2be7aee1c9d69a6b36d26410459a9","date":1460361562,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest#assertSplit(LeafReader,double,double,String...).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/utils/DataSplitterTest#assertSplit(LeafReader,double,double,String...).mjava","sourceNew":"  public static void assertSplit(LeafReader originalIndex, double testRatio, double crossValidationRatio, String... fieldNames) throws Exception {\n\n    BaseDirectoryWrapper trainingIndex = newDirectory();\n    BaseDirectoryWrapper testIndex = newDirectory();\n    BaseDirectoryWrapper crossValidationIndex = newDirectory();\n\n    try {\n      DatasetSplitter datasetSplitter = new DatasetSplitter(testRatio, crossValidationRatio);\n      datasetSplitter.split(originalIndex, trainingIndex, testIndex, crossValidationIndex, new MockAnalyzer(random()), true, classFieldName, fieldNames);\n\n      assertNotNull(trainingIndex);\n      assertNotNull(testIndex);\n      assertNotNull(crossValidationIndex);\n\n      DirectoryReader trainingReader = DirectoryReader.open(trainingIndex);\n      assertEquals((int) (originalIndex.maxDoc() * (1d - testRatio - crossValidationRatio)), trainingReader.maxDoc(), 20);\n      DirectoryReader testReader = DirectoryReader.open(testIndex);\n      assertEquals((int) (originalIndex.maxDoc() * testRatio), testReader.maxDoc(), 20);\n      DirectoryReader cvReader = DirectoryReader.open(crossValidationIndex);\n      assertEquals((int) (originalIndex.maxDoc() * crossValidationRatio), cvReader.maxDoc(), 20);\n\n      trainingReader.close();\n      testReader.close();\n      cvReader.close();\n      closeQuietly(trainingReader);\n      closeQuietly(testReader);\n      closeQuietly(cvReader);\n    } finally {\n      if (trainingIndex != null) {\n        trainingIndex.close();\n      }\n      if (testIndex != null) {\n        testIndex.close();\n      }\n      if (crossValidationIndex != null) {\n        crossValidationIndex.close();\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertSplit(LeafReader originalIndex, double testRatio, double crossValidationRatio, String... fieldNames) throws Exception {\n\n    BaseDirectoryWrapper trainingIndex = newDirectory();\n    BaseDirectoryWrapper testIndex = newDirectory();\n    BaseDirectoryWrapper crossValidationIndex = newDirectory();\n\n    try {\n      DatasetSplitter datasetSplitter = new DatasetSplitter(testRatio, crossValidationRatio);\n      datasetSplitter.split(originalIndex, trainingIndex, testIndex, crossValidationIndex, new MockAnalyzer(random()), fieldNames);\n\n      assertNotNull(trainingIndex);\n      assertNotNull(testIndex);\n      assertNotNull(crossValidationIndex);\n\n      DirectoryReader trainingReader = DirectoryReader.open(trainingIndex);\n      assertTrue((int) (originalIndex.maxDoc() * (1d - testRatio - crossValidationRatio)) == trainingReader.maxDoc());\n      DirectoryReader testReader = DirectoryReader.open(testIndex);\n      assertTrue((int) (originalIndex.maxDoc() * testRatio) == testReader.maxDoc());\n      DirectoryReader cvReader = DirectoryReader.open(crossValidationIndex);\n      assertTrue((int) (originalIndex.maxDoc() * crossValidationRatio) == cvReader.maxDoc());\n\n      trainingReader.close();\n      testReader.close();\n      cvReader.close();\n      closeQuietly(trainingReader);\n      closeQuietly(testReader);\n      closeQuietly(cvReader);\n    } finally {\n      if (trainingIndex != null) {\n        trainingIndex.close();\n      }\n      if (testIndex != null) {\n        testIndex.close();\n      }\n      if (crossValidationIndex != null) {\n        crossValidationIndex.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e2d06d853b2be7aee1c9d69a6b36d26410459a9":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e2d06d853b2be7aee1c9d69a6b36d26410459a9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4e2d06d853b2be7aee1c9d69a6b36d26410459a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4e2d06d853b2be7aee1c9d69a6b36d26410459a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}