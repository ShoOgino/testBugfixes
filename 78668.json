{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","commits":[{"id":"81e895c48138613a33de7e1609d4c41cc5832b82","date":1494496160,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"/dev/null","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    result.put(Meta.GET_NODES, new ApiCommand() {\n      @Override\n      public CommandMeta meta() {\n        return Meta.GET_NODES;\n      }\n\n      @Override\n      public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n        rsp.add(\"nodes\", ((CollectionHandlerApi) apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes());\n      }\n    });\n    for (Meta meta : Meta.values()) {\n      if(result.get(meta) == null){\n        throw new RuntimeException(\"No implementation for \"+ meta.name());\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360b3962efc30aa8b2c39c3087aa36069674bbe7","date":1494557674,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"/dev/null","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    result.put(Meta.GET_NODES, new ApiCommand() {\n      @Override\n      public CommandMeta meta() {\n        return Meta.GET_NODES;\n      }\n\n      @Override\n      public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n        rsp.add(\"nodes\", ((CollectionHandlerApi) apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes());\n      }\n    });\n    for (Meta meta : Meta.values()) {\n      if(result.get(meta) == null){\n        throw new RuntimeException(\"No implementation for \"+ meta.name());\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"/dev/null","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    result.put(Meta.GET_NODES, new ApiCommand() {\n      @Override\n      public CommandMeta meta() {\n        return Meta.GET_NODES;\n      }\n\n      @Override\n      public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n        rsp.add(\"nodes\", ((CollectionHandlerApi) apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes());\n      }\n    });\n    for (Meta meta : Meta.values()) {\n      if(result.get(meta) == null){\n        throw new RuntimeException(\"No implementation for \"+ meta.name());\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    result.put(Meta.GET_NODES, new ApiCommand() {\n      @Override\n      public CommandMeta meta() {\n        return Meta.GET_NODES;\n      }\n\n      @Override\n      public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n        rsp.add(\"nodes\", ((CollectionHandlerApi) apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes());\n      }\n    });\n    for (Meta meta : Meta.values()) {\n      if(result.get(meta) == null){\n        throw new RuntimeException(\"No implementation for \"+ meta.name());\n      }\n    }\n\n    return result.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> apiMapping = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          apiMapping.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(apiMapping, Meta.GET_NODES, CollectionHandlerApi::getNodes);\n    addApi(apiMapping, Meta.SET_CLUSTER_PROPERTY_OBJ, CollectionHandlerApi::setClusterObj);\n    addApi(apiMapping, Meta.ADD_RUNTIME_LIB, wrap(CollectionHandlerApi::addUpdateRuntimeLib));\n    addApi(apiMapping, Meta.UPDATE_RUNTIME_LIB, wrap(CollectionHandlerApi::addUpdateRuntimeLib));\n    addApi(apiMapping, Meta.DELETE_RUNTIME_LIB, wrap(CollectionHandlerApi::deleteRuntimeLib));\n    addApi(apiMapping, Meta.ADD_REQ_HANDLER, wrap(CollectionHandlerApi::addRequestHandler));\n    addApi(apiMapping, Meta.DELETE_REQ_HANDLER, wrap(CollectionHandlerApi::deleteReqHandler));\n\n    for (Meta meta : Meta.values()) {\n      if (apiMapping.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return apiMapping.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> apiMapping = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          apiMapping.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(apiMapping, Meta.GET_NODES, CollectionHandlerApi::getNodes);\n    addApi(apiMapping, Meta.SET_CLUSTER_PROPERTY_OBJ, CollectionHandlerApi::setClusterObj);\n    addApi(apiMapping, Meta.ADD_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.UPDATE_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.DELETE_RUNTIME_LIB, wrap(CollectionHandlerApi::deletePackage));\n    addApi(apiMapping, Meta.ADD_REQ_HANDLER, wrap(CollectionHandlerApi::addRequestHandler));\n    addApi(apiMapping, Meta.DELETE_REQ_HANDLER, wrap(CollectionHandlerApi::deleteReqHandler));\n\n    for (Meta meta : Meta.values()) {\n      if (apiMapping.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return apiMapping.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> apiMapping = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          apiMapping.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(apiMapping, Meta.GET_NODES, CollectionHandlerApi::getNodes);\n    addApi(apiMapping, Meta.SET_CLUSTER_PROPERTY_OBJ, CollectionHandlerApi::setClusterObj);\n    addApi(apiMapping, Meta.ADD_RUNTIME_LIB, wrap(CollectionHandlerApi::addUpdateRuntimeLib));\n    addApi(apiMapping, Meta.UPDATE_RUNTIME_LIB, wrap(CollectionHandlerApi::addUpdateRuntimeLib));\n    addApi(apiMapping, Meta.DELETE_RUNTIME_LIB, wrap(CollectionHandlerApi::deleteRuntimeLib));\n    addApi(apiMapping, Meta.ADD_REQ_HANDLER, wrap(CollectionHandlerApi::addRequestHandler));\n    addApi(apiMapping, Meta.DELETE_REQ_HANDLER, wrap(CollectionHandlerApi::deleteReqHandler));\n\n    for (Meta meta : Meta.values()) {\n      if (apiMapping.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return apiMapping.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> apiMapping = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          apiMapping.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(apiMapping, Meta.GET_NODES, CollectionHandlerApi::getNodes);\n    addApi(apiMapping, Meta.SET_CLUSTER_PROPERTY_OBJ, CollectionHandlerApi::setClusterObj);\n    addApi(apiMapping, Meta.ADD_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.UPDATE_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.DELETE_RUNTIME_LIB, wrap(CollectionHandlerApi::deletePackage));\n    addApi(apiMapping, Meta.ADD_REQ_HANDLER, wrap(CollectionHandlerApi::addRequestHandler));\n    addApi(apiMapping, Meta.DELETE_REQ_HANDLER, wrap(CollectionHandlerApi::deleteReqHandler));\n\n    for (Meta meta : Meta.values()) {\n      if (apiMapping.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return apiMapping.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> apiMapping = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          apiMapping.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(apiMapping, Meta.GET_NODES, CollectionHandlerApi::getNodes);\n    addApi(apiMapping, Meta.SET_CLUSTER_PROPERTY_OBJ, CollectionHandlerApi::setClusterObj);\n    addApi(apiMapping, Meta.ADD_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.UPDATE_PACKAGE, wrap(CollectionHandlerApi::addUpdatePackage));\n    addApi(apiMapping, Meta.DELETE_RUNTIME_LIB, wrap(CollectionHandlerApi::deletePackage));\n    addApi(apiMapping, Meta.ADD_REQ_HANDLER, wrap(CollectionHandlerApi::addRequestHandler));\n    addApi(apiMapping, Meta.DELETE_REQ_HANDLER, wrap(CollectionHandlerApi::deleteReqHandler));\n\n    for (Meta meta : Meta.values()) {\n      if (apiMapping.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return apiMapping.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : {}\", meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : \" + meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b6680904fafe5905f847812d32dc7ad79c96a0","date":1600243603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : {}\", meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#createCollMapping().mjava","sourceNew":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n\n    return result.values();\n  }\n\n","sourceOld":"  private static Collection<ApiCommand> createCollMapping() {\n    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);\n\n    for (Meta meta : Meta.values()) {\n      for (CollectionOperation op : CollectionOperation.values()) {\n        if (op.action == meta.action) {\n          result.put(meta, new ApiCommand() {\n            @Override\n            public CommandMeta meta() {\n              return meta;\n            }\n\n            @Override\n            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {\n              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);\n            }\n          });\n        }\n      }\n    }\n    //The following APIs have only V2 implementations\n    addApi(result, Meta.GET_NODES, params -> params.rsp.add(\"nodes\", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));\n    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {\n      List<CommandOperation> commands = params.req.getCommands(true);\n      if (commands == null || commands.isEmpty()) throw new RuntimeException(\"Empty commands\");\n      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n\n      try {\n        clusterProperties.setClusterProperties(commands.get(0).getDataMap());\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n      }\n    });\n\n    for (Meta meta : Meta.values()) {\n      if (result.get(meta) == null) {\n        log.error(\"ERROR_INIT. No corresponding API implementation for : {}\", meta.commandName);\n      }\n    }\n\n    return result.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"81e895c48138613a33de7e1609d4c41cc5832b82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","360b3962efc30aa8b2c39c3087aa36069674bbe7"],"680b6449f09827f58fe987aff279e014c311d966":["575e66bd4b2349209027f6801184da7fc3cba13f","c0b6680904fafe5905f847812d32dc7ad79c96a0"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81e895c48138613a33de7e1609d4c41cc5832b82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"b0b597c65628ca9e73913a07e81691f8229bae35":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"81e895c48138613a33de7e1609d4c41cc5832b82":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"575e66bd4b2349209027f6801184da7fc3cba13f":["c0b6680904fafe5905f847812d32dc7ad79c96a0","680b6449f09827f58fe987aff279e014c311d966"],"c44cc06c26e456fe9c215072b79fce30babe3975":["575e66bd4b2349209027f6801184da7fc3cba13f","b0b597c65628ca9e73913a07e81691f8229bae35"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["680b6449f09827f58fe987aff279e014c311d966"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81e895c48138613a33de7e1609d4c41cc5832b82","e9017cf144952056066919f1ebc7897ff9bd71b1","360b3962efc30aa8b2c39c3087aa36069674bbe7"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}