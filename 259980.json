{"path":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","commits":[{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      CollectionAdminRequest.createCollection(\"ocptest\" + i, 4, \"conf1\", server, i + \"\");\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", 30, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      CollectionAdminRequest.createCollection(\"ocptest\" + i, 4, \"conf1\", server, i + \"\");\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", 30, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c8fec3cd782d7ae08ef7a6459a3e3ef41005c83","date":1404591706,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      CollectionAdminRequest.createCollection(\"ocptest\" + i, 4, \"conf1\", server, i + \"\");\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      CollectionAdminRequest.createCollection(\"ocptest\" + i, 4, \"conf1\", server, i + \"\");\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", 30, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a7d7ef06ef6f04ba2de657e90e0458048a967c6","date":1409691631,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      Create createCollectionRequest = new Create();\n      createCollectionRequest.setCollectionName(\"ocptest\" + i);\n      createCollectionRequest.setNumShards(4);\n      createCollectionRequest.setConfigName(\"conf1\");\n      createCollectionRequest.setAsyncId(String.valueOf(i));\n      createCollectionRequest.process(server);\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      CollectionAdminRequest.createCollection(\"ocptest\" + i, 4, \"conf1\", server, i + \"\");\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      Create createCollectionRequest = new Create();\n      createCollectionRequest.setCollectionName(\"ocptest\" + i);\n      createCollectionRequest.setNumShards(4);\n      createCollectionRequest.setConfigName(\"conf1\");\n      createCollectionRequest.setAsyncId(String.valueOf(i));\n      createCollectionRequest.process(client);\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", client).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      Create createCollectionRequest = new Create();\n      createCollectionRequest.setCollectionName(\"ocptest\" + i);\n      createCollectionRequest.setNumShards(4);\n      createCollectionRequest.setConfigName(\"conf1\");\n      createCollectionRequest.setAsyncId(String.valueOf(i));\n      createCollectionRequest.process(server);\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", server).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, server);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        Create createCollectionRequest = new Create();\n        createCollectionRequest.setCollectionName(\"ocptest\" + i);\n        createCollectionRequest.setNumShards(4);\n        createCollectionRequest.setConfigName(\"conf1\");\n        createCollectionRequest.setAsyncId(String.valueOf(i));\n        createCollectionRequest.process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n      Create createCollectionRequest = new Create();\n      createCollectionRequest.setCollectionName(\"ocptest\" + i);\n      createCollectionRequest.setNumShards(4);\n      createCollectionRequest.setConfigName(\"conf1\");\n      createCollectionRequest.setAsyncId(String.valueOf(i));\n      createCollectionRequest.process(client);\n    }\n\n    boolean pass = false;\n    int counter = 0;\n    while(true) {\n      int numRunningTasks = 0;\n      for (int i = 1; i <= NUM_COLLECTIONS; i++)\n        if (getRequestState(i + \"\", client).equals(\"running\"))\n          numRunningTasks++;\n      if(numRunningTasks > 1) {\n        pass = true;\n        break;\n      } else if(counter++ > 100)\n        break;\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n    for(int i=1;i<=NUM_COLLECTIONS;i++) {\n      String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n      assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n    }\n  }\n\n","bugFix":["6f26f74e4969851a019d28f10315cb1c77786f22","bafca15d8e408346a67f4282ad1143b88023893b","4a7d7ef06ef6f04ba2de657e90e0458048a967c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        Create createCollectionRequest = new Create();\n        createCollectionRequest.setCollectionName(\"ocptest\" + i);\n        createCollectionRequest.setNumShards(4);\n        createCollectionRequest.setConfigName(\"conf1\");\n        createCollectionRequest.setAsyncId(String.valueOf(i));\n        createCollectionRequest.process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        Create createCollectionRequest = new Create();\n        createCollectionRequest.setCollectionName(\"ocptest\" + i);\n        createCollectionRequest.setNumShards(4);\n        createCollectionRequest.setConfigName(\"conf1\");\n        createCollectionRequest.setAsyncId(String.valueOf(i));\n        createCollectionRequest.process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        Create createCollectionRequest = new Create();\n        createCollectionRequest.setCollectionName(\"ocptest\" + i);\n        createCollectionRequest.setNumShards(4);\n        createCollectionRequest.setConfigName(\"conf1\");\n        createCollectionRequest.setAsyncId(String.valueOf(i));\n        createCollectionRequest.process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client).equals(\"running\"))\n            numRunningTasks++;\n        if(numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if(counter++ > 100)\n          break;\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for(int i=1;i<=NUM_COLLECTIONS;i++) {\n        String state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertTrue(\"Task \" + i + \" did not complete, final state: \" + state,state.equals(\"completed\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",4,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",4,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",4,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",4,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        new Create()\n                .setCollectionName(\"ocptest\" + i)\n                .setNumShards(4)\n                .setConfigName(\"conf1\")\n                .setAsyncId(String.valueOf(i))\n                .process(client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testParallelCollectionAPICalls().mjava","sourceNew":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",3,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","sourceOld":"  private void testParallelCollectionAPICalls() throws IOException, SolrServerException {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      for(int i = 1 ; i <= NUM_COLLECTIONS ; i++) {\n        CollectionAdminRequest.createCollection(\"ocptest\" + i,\"conf1\",4,1).processAsync(String.valueOf(i), client);\n      }\n  \n      boolean pass = false;\n      int counter = 0;\n      while(true) {\n        int numRunningTasks = 0;\n        for (int i = 1; i <= NUM_COLLECTIONS; i++)\n          if (getRequestState(i + \"\", client) == RequestStatusState.RUNNING) {\n            numRunningTasks++;\n          }\n        if (numRunningTasks > 1) {\n          pass = true;\n          break;\n        } else if (counter++ > 100) {\n          break;\n        }\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      assertTrue(\"More than one tasks were supposed to be running in parallel but they weren't.\", pass);\n      for (int i = 1; i <= NUM_COLLECTIONS; i++) {\n        final RequestStatusState state = getRequestStateAfterCompletion(i + \"\", REQUEST_STATUS_TIMEOUT, client);\n        assertSame(\"Task \" + i + \" did not complete, final state: \" + state, RequestStatusState.COMPLETED, state);\n      }\n    }\n  }\n\n","bugFix":["ac97ea104d893f16aab430d9904473bc1f233f3c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3217321f3e1d7922898c6c633d17acfa840d6875"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"bafca15d8e408346a67f4282ad1143b88023893b":["4a7d7ef06ef6f04ba2de657e90e0458048a967c6"],"3217321f3e1d7922898c6c633d17acfa840d6875":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","ac97ea104d893f16aab430d9904473bc1f233f3c"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f26f74e4969851a019d28f10315cb1c77786f22"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","3217321f3e1d7922898c6c633d17acfa840d6875"],"4a7d7ef06ef6f04ba2de657e90e0458048a967c6":["7c8fec3cd782d7ae08ef7a6459a3e3ef41005c83"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"7c8fec3cd782d7ae08ef7a6459a3e3ef41005c83":["6f26f74e4969851a019d28f10315cb1c77786f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"b7605579001505896d48b07160075a5c8b8e128e":[],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4a7d7ef06ef6f04ba2de657e90e0458048a967c6":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","7c8fec3cd782d7ae08ef7a6459a3e3ef41005c83"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"7c8fec3cd782d7ae08ef7a6459a3e3ef41005c83":["4a7d7ef06ef6f04ba2de657e90e0458048a967c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}