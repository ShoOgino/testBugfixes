{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","sourceNew":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","sourceNew":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"273ff2f5b0b365591fcbe91ea23b5e97027ca60d","date":1551111277,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","sourceNew":"  @Test\n  public void testBadActionNames() {\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","bugFix":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7dccce9b0ec051304926da532b96944956895","date":1551188806,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testBadActionNames().mjava","sourceNew":"  @Test\n  public void testBadActionNames() {\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testBadActionNames() throws Exception {\n\n    // try a bad action\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91f7dccce9b0ec051304926da532b96944956895":["b94236357aaa22b76c10629851fe4e376e0cea82","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91f7dccce9b0ec051304926da532b96944956895"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["91f7dccce9b0ec051304926da532b96944956895","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"91f7dccce9b0ec051304926da532b96944956895":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["91f7dccce9b0ec051304926da532b96944956895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}