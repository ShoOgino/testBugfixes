{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance seg=\" + segment + \" target=\" + target + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader(freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n          //System.out.println(\"  init skipper freqOffset=\" + freqOffset + \" skipOffset=\" + skipOffset + \" vs len=\" + freqIn.length());\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, storePayloads, storeOffsets);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n          startOffset = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          offsetLength = skipper.getOffsetLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance seg=\" + segment + \" target=\" + target + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader(freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n          //System.out.println(\"  init skipper freqOffset=\" + freqOffset + \" skipOffset=\" + skipOffset + \" vs len=\" + freqIn.length());\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, storePayloads, storeOffsets);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n          startOffset = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          offsetLength = skipper.getOffsetLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance seg=\" + segment + \" target=\" + target + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader(freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n          //System.out.println(\"  init skipper freqOffset=\" + freqOffset + \" skipOffset=\" + skipOffset + \" vs len=\" + freqIn.length());\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, storePayloads, storeOffsets);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n          startOffset = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          offsetLength = skipper.getOffsetLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance seg=\" + segment + \" target=\" + target + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader(freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n          //System.out.println(\"  init skipper freqOffset=\" + freqOffset + \" skipOffset=\" + skipOffset + \" vs len=\" + freqIn.length());\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, storePayloads, storeOffsets);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n          startOffset = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          offsetLength = skipper.getOffsetLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentFullPositionsEnum#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      //System.out.println(\"StandardR.D&PE advance seg=\" + segment + \" target=\" + target + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader(freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped, since reset() was called, so now we\n          // load the skip data for this posting\n          //System.out.println(\"  init skipper freqOffset=\" + freqOffset + \" skipOffset=\" + skipOffset + \" vs len=\" + freqIn.length());\n          skipper.init(freqOffset+skipOffset,\n                       freqOffset, proxOffset,\n                       limit, storePayloads, storeOffsets);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n          ord = newOrd;\n          doc = accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n          lazyProxPointer = skipper.getProxPointer();\n          posPendingCount = 0;\n          position = 0;\n          startOffset = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          offsetLength = skipper.getOffsetLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        nextDoc();\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}