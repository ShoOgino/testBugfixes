{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","commits":[{"id":"4ac0ed2ea5d445efaeeb080747c3a4fd381e3e10","date":1376966773,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"487204058e79506a6ddba0065cfff810bc15b06a","date":1378216488,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField(\"numbers\"));\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"820c994610cafbde5892c00924bdf69fffaaf38f","date":1378227060,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField(\"numbers\"));\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["820c994610cafbde5892c00924bdf69fffaaf38f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046","date":1417033646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testDocsWithField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithField() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (random().nextInt(4) >= 0) {\n        doc.add(new NumericDocValuesField(\"numbers\", random().nextLong()));\n      }\n      doc.add(new NumericDocValuesField(\"numbersAlways\", random().nextLong()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    Bits multi = MultiDocValues.getDocsWithField(ir, \"numbers\");\n    Bits single = merged.getDocsWithField(\"numbers\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      assertEquals(single.length(), multi.length());\n      for (int i = 0; i < numDocs; i++) {\n        assertEquals(single.get(i), multi.get(i));\n      }\n    }\n    \n    multi = MultiDocValues.getDocsWithField(ir, \"numbersAlways\");\n    single = merged.getDocsWithField(\"numbersAlways\");\n    assertEquals(single.length(), multi.length());\n    for (int i = 0; i < numDocs; i++) {\n      assertEquals(single.get(i), multi.get(i));\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ac0ed2ea5d445efaeeb080747c3a4fd381e3e10"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","ad2a673349939e48652bf304cccf673c3412198f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"4ac0ed2ea5d445efaeeb080747c3a4fd381e3e10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"487204058e79506a6ddba0065cfff810bc15b06a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"820c994610cafbde5892c00924bdf69fffaaf38f":["487204058e79506a6ddba0065cfff810bc15b06a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["820c994610cafbde5892c00924bdf69fffaaf38f"],"ad2a673349939e48652bf304cccf673c3412198f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","487204058e79506a6ddba0065cfff810bc15b06a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4ac0ed2ea5d445efaeeb080747c3a4fd381e3e10":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"487204058e79506a6ddba0065cfff810bc15b06a":["820c994610cafbde5892c00924bdf69fffaaf38f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4ac0ed2ea5d445efaeeb080747c3a4fd381e3e10"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"820c994610cafbde5892c00924bdf69fffaaf38f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}