{"path":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","pathOld":"/dev/null","sourceNew":"  final protected boolean termCompare(Term term) {\n      if (field == term.field()) {\n          String searchText = term.text();\n          if (searchText.startsWith(pre)) {\n            return wildcardEquals(text, 0, searchText, preLen);\n          }\n      }\n      endEnum = true;\n      return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","sourceNew":"  protected final boolean termCompare(Term term) {\n      if (field == term.field()) {\n          String searchText = term.text();\n          if (searchText.startsWith(pre)) {\n            return wildcardEquals(text, 0, searchText, preLen);\n          }\n      }\n      endEnum = true;\n      return false;\n  }\n\n","sourceOld":"  final protected boolean termCompare(Term term) {\n      if (field == term.field()) {\n          String searchText = term.text();\n          if (searchText.startsWith(pre)) {\n            return wildcardEquals(text, 0, searchText, preLen);\n          }\n      }\n      endEnum = true;\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3449282534151d4584c6dd66673158b9d62996a7","date":1063188287,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","sourceNew":"  protected final boolean termCompare(Term term) {\n    if (field == term.field()) {\n      String searchText = term.text();\n      if (searchText.startsWith(pre)) {\n        return wildcardEquals(text, 0, searchText, preLen);\n      }\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"  protected final boolean termCompare(Term term) {\n      if (field == term.field()) {\n          String searchText = term.text();\n          if (searchText.startsWith(pre)) {\n            return wildcardEquals(text, 0, searchText, preLen);\n          }\n      }\n      endEnum = true;\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","sourceNew":"  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field()) {\n      String searchText = term.text();\n      if (searchText.startsWith(pre)) {\n        return wildcardEquals(text, 0, searchText, preLen);\n      }\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"  protected final boolean termCompare(Term term) {\n    if (field == term.field()) {\n      String searchText = term.text();\n      if (searchText.startsWith(pre)) {\n        return wildcardEquals(text, 0, searchText, preLen);\n      }\n    }\n    endEnum = true;\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#termCompare(Term).mjava","sourceNew":"  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field()) {\n      String searchText = term.text();\n      if (searchText.startsWith(pre)) {\n        return wildcardEquals(text, 0, searchText, preLen);\n      }\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field()) {\n      String searchText = term.text();\n      if (searchText.startsWith(pre)) {\n        return wildcardEquals(text, 0, searchText, preLen);\n      }\n    }\n    endEnum = true;\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3449282534151d4584c6dd66673158b9d62996a7":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"8a9e385641d717e641408d8fbbc62be8fc766357":["3449282534151d4584c6dd66673158b9d62996a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"3449282534151d4584c6dd66673158b9d62996a7":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["3449282534151d4584c6dd66673158b9d62996a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}