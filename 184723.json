{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiTerms.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seekCeil(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (StringHelper.startsWith(termsEnum.term(), prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}