{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","commits":[{"id":"2350f91b2ef67a3fe85dc56c6fa0630586abf442","date":1430446502,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", i, cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008","date":1431878853,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", i, cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n  }\n\n","sourceOld":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", i, cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735","date":1493175404,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","sourceOld":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", i, cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n  }\n\n","bugFix":["2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","sourceOld":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", i, cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dec8faa342587767c2f95ad26a8315b8068392b","date":1578083291,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap<>();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","sourceOld":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#doBigger(Client,ModifiableSolrParams).mjava","sourceNew":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap<>();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","sourceOld":"  public void doBigger(Client client, ModifiableSolrParams p) throws Exception {\n    MacroExpander m = new MacroExpander(p.getMap());\n\n    String cat_s = m.expand(\"${cat_s}\");\n    String where_s = m.expand(\"${where_s}\");\n\n    client.deleteByQuery(\"*:*\", null);\n\n    Random r = new Random(0);  // make deterministic\n    int numCat = 1;\n    int numWhere = 2000000000;\n    int commitPercent = 10;\n    int ndocs=1000;\n\n    Map<Integer, Map<Integer, List<Integer>>> model = new HashMap();  // cat->where->list<ids>\n    for (int i=0; i<ndocs; i++) {\n      Integer cat = r.nextInt(numCat);\n      Integer where = r.nextInt(numWhere);\n      client.add( sdoc(\"id\", getId(i), cat_s,cat, where_s, where) , null );\n      Map<Integer,List<Integer>> sub = model.get(cat);\n      if (sub == null) {\n        sub = new HashMap<>();\n        model.put(cat, sub);\n      }\n      List<Integer> ids = sub.get(where);\n      if (ids == null) {\n        ids = new ArrayList<>();\n        sub.put(where, ids);\n      }\n      ids.add(i);\n\n      if (r.nextInt(100) < commitPercent) {\n        client.commit();\n      }\n    }\n\n    client.commit();\n\n    int sz = model.get(0).size();\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n            , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'unique($where_s)'}  }}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n    );\n\n    if (client.local()) {\n      // distrib estimation prob won't match\n      client.testJQ(params(p, \"q\", \"*:*\"\n              , \"json.facet\", \"{f1:{type:terms, field:${cat_s}, limit:2, facet:{x:'hll($where_s)'}  }}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{  'buckets':[{ 'val':'0', 'count':\" + ndocs + \", x:\" + sz + \" }]} } \"\n      );\n    }\n\n    client.testJQ(params(p, \"q\", \"*:*\"\n        , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:990}}\"\n        )\n        , \"facets=={ 'count':\" + ndocs + \",\" +\n            \"'f1':{buckets:[{val:'00990',count:1}]}} \"\n    );\n\n\n    for (int i=0; i<20; i++) {\n      int off = random().nextInt(ndocs);\n      client.testJQ(params(p, \"q\", \"*:*\", \"off\",Integer.toString(off)\n          , \"json.facet\", \"{f1:{type:terms, field:id, limit:1, offset:${off}}}\"\n          )\n          , \"facets=={ 'count':\" + ndocs + \",\" +\n              \"'f1':{buckets:[{val:'\"  + getId(off)  + \"',count:1}]}} \"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008","9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735"],"9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"],"2350f91b2ef67a3fe85dc56c6fa0630586abf442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0dec8faa342587767c2f95ad26a8315b8068392b":["9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735","0dec8faa342587767c2f95ad26a8315b8068392b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dec8faa342587767c2f95ad26a8315b8068392b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735":["e9017cf144952056066919f1ebc7897ff9bd71b1","0dec8faa342587767c2f95ad26a8315b8068392b","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2350f91b2ef67a3fe85dc56c6fa0630586abf442":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"],"0dec8faa342587767c2f95ad26a8315b8068392b":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2350f91b2ef67a3fe85dc56c6fa0630586abf442"],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["e9017cf144952056066919f1ebc7897ff9bd71b1","9fed7a1fcc332afbb217fb8b7e9cddc74d0bb735"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}