{"path":"solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","commits":[{"id":"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2","date":1433415299,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    for (Map.Entry<String, Object> next : collectionProps) {\n      Map<String, Object> collMap = (Map<String, Object>) next.getValue();\n      Map<String, Object> shards = (Map<String, Object>) collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String, Object> shardMap = (Map<String, Object>) nextShard;\n        Map<String, Object> replicas = (Map<String, Object>) shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String, Object> replicaMap = (Map<String, Object>) nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String) replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}