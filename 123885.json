{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n      final int numBytes = source.length - (in.getPosition() - source.offset);\n      if (numBytes > floorData.length) {\n        floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n      }\n      System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n      floorDataReader.reset(floorData, 0, numBytes);\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n      //if (DEBUG) {\n      //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n      //}\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","sourceNew":null,"sourceOld":"    public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n      final int numBytes = source.length - (in.getPosition() - source.offset);\n      if (numBytes > floorData.length) {\n        floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n      }\n      System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n      floorDataReader.reset(floorData, 0, numBytes);\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n      //if (DEBUG) {\n      //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n      //}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":[],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e50f0da93c6dcee20d8792637b1786e2c34975e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}