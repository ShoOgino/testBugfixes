{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(SegmentInfo si, FieldInfos fis) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    // nocommit what IOCtx\n    boolean success = false;\n    IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(0, 0)));\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DELCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDelCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DSOFFSET);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocStoreOffset()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DSSEGMENT);\n      SimpleTextUtil.write(output, si.getDocStoreSegment(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DSCOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getDocStoreIsCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DELGEN);\n      SimpleTextUtil.write(output, Long.toString(si.getDelGen()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<Integer,Long> normGen = si.getNormGen();\n      int numNormGen = normGen == null ? 0 : normGen.size();\n      SimpleTextUtil.write(output, SI_NUM_NORMGEN);\n      SimpleTextUtil.write(output, Integer.toString(numNormGen), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      // nocommit no more:\n      if (numNormGen > 0) {\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          SimpleTextUtil.write(output, SI_NORMGEN_KEY);\n          SimpleTextUtil.write(output, Integer.toString(entry.getKey()), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_NORMGEN_VALUE);\n          SimpleTextUtil.write(output, Long.toString(entry.getValue()), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63caed6eb28209e181e97822c4c8fdf808884c3b","date":1337712793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc669044b7422515d5ac03531ad22b2cec9e371b","date":1337720320,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"bc669044b7422515d5ac03531ad22b2cec9e371b":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"]},"commit2Childs":{"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["bc669044b7422515d5ac03531ad22b2cec9e371b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["352763be0465236f8e2ac188aa1b761cb3e1c9ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"bc669044b7422515d5ac03531ad22b2cec9e371b":[],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc669044b7422515d5ac03531ad22b2cec9e371b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}