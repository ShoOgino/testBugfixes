{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","commits":[{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor,Map[String,TableSpec],int,String,String).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor,\n                                      Map<String, TableSpec> tableMap,\n                                      int numWorkers,\n                                      String workerCollection,\n                                      String workerZkHost) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n    for(String field : fields) {\n\n      if(comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n    for(SortItem sortItem : sorts) {\n      if(comma) {\n        siBuf.append(\",\");\n      }\n      siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n    }\n\n    TableSpec tableSpec = tableMap.get(sqlVisitor.table);\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n    params.put(\"sort\", siBuf.toString());\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bba396c158346d92cdd5ff662e97ac6166a2147","date":1443059349,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripSingleQuotes(stripQuotes(sortItem.getSortKey().toString())) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripSingleQuotes(stripQuotes(sortItem.getSortKey().toString())) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream = null;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream = null;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream = null;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6299ebaf4e18ea70d828fe29b3779aa345cd4b11","date":1454887041,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    } else {\n      return tupleStream;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":null,"sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"fl\", fl.toString());\n    params.set(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.set(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.set(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.set(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"fl\", fl.toString());\n    params.set(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.set(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.set(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.set(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"fl\", fl.toString());\n    params.set(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.set(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.set(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.set(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    Map<String, String> params = new HashMap();\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","sourceNew":null,"sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    Set<String> fieldSet = new HashSet();\n    Metric[] metrics = getMetrics(fields, fieldSet);\n    if(metrics.length > 0) {\n      return doAggregates(sqlVisitor, metrics);\n    }\n\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(getSortField(sortItem, sqlVisitor.reverseColumnAliases) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n        siBuf.append(\"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+\",score\";\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"fl\", fl.toString());\n    params.set(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.set(\"sort\", siBuf.toString());\n    }\n\n    TupleStream tupleStream;\n\n    if(sqlVisitor.limit > -1) {\n      params.set(\"rows\", Integer.toString(sqlVisitor.limit));\n      tupleStream = new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.set(CommonParams.QT, \"/export\");\n      tupleStream = new CloudSolrStream(zkHost, collection, params);\n    }\n\n    return new SelectStream(tupleStream, sqlVisitor.columnAliases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","d2af3708aa5f155e8f27905be60c119be0e39be8"],"6299ebaf4e18ea70d828fe29b3779aa345cd4b11":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["6299ebaf4e18ea70d828fe29b3779aa345cd4b11","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","6299ebaf4e18ea70d828fe29b3779aa345cd4b11"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["d2af3708aa5f155e8f27905be60c119be0e39be8","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6299ebaf4e18ea70d828fe29b3779aa345cd4b11":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","d984627825732e682759c22df7a3b171a80f3812","e66a459d38c1c4a2f97128433dab546f683a9fed"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["36479872320bb00635cb97ca6757614c88562e1b"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}