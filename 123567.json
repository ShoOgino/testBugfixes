{"path":"src/java/org/apache/lucene/index/IndexReader#close().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"/dev/null","sourceNew":"  /** Closes files associated with this index.\n    Also saves any new deletions to disk.\n    No other methods should be called after this has been called. */\n  abstract public void close() throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e316f9ea0ab451f736a2a2b65103c3910bfad8e","date":1009307680,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n    abstract public void close() throws IOException;\n\n","sourceOld":"  /** Closes files associated with this index.\n    Also saves any new deletions to disk.\n    No other methods should be called after this has been called. */\n  abstract public void close() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fb2e14da294a8c919c6356cbbc8049158c368a7","date":1013197182,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n  public final synchronized void close() throws IOException {\n    doClose();\n    if (writeLock != null) {\n      writeLock.release();  // release write lock\n      writeLock = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n    abstract public void close() throws IOException;\n\n","bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n  public final synchronized void close() throws IOException {\n    commit();\n    doClose();\n    if(closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n  public final synchronized void close() throws IOException {\n    doClose();\n    if (writeLock != null) {\n      writeLock.release();  // release write lock\n      writeLock = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (directoryOwner && isClosed) {\n      throw new IOException(\"this reader is already closed\");\n    }\n    commit();\n    doClose();\n    if(closeDirectory)\n      directory.close();\n    if (directoryOwner) {\n      isClosed = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   */\n  public final synchronized void close() throws IOException {\n    commit();\n    doClose();\n    if(closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      commit();\n      doClose();\n      if (directoryOwner)\n        closed = true;\n      if(closeDirectory)\n        directory.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (directoryOwner && isClosed) {\n      throw new IOException(\"this reader is already closed\");\n    }\n    commit();\n    doClose();\n    if(closeDirectory)\n      directory.close();\n    if (directoryOwner) {\n      isClosed = true;\n    }\n  }\n\n","bugFix":["f653aecb322b74d99e6ecdb93765e453a3d7aa71","1b54a9bc667895a2095a886184bf69a3179e63df","3fb2e14da294a8c919c6356cbbc8049158c368a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      commit();\n      doClose();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      commit();\n      doClose();\n      if (directoryOwner)\n        closed = true;\n      if(closeDirectory)\n        directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      decRef();\n      closed = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      commit();\n      doClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#close().mjava","sourceNew":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      decRef();\n      closed = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      decRef();\n      closed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"1b54a9bc667895a2095a886184bf69a3179e63df":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"3fb2e14da294a8c919c6356cbbc8049158c368a7":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["3fb2e14da294a8c919c6356cbbc8049158c368a7"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["1b54a9bc667895a2095a886184bf69a3179e63df"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}