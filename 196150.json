{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#push(FrozenBufferedDeletes).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedDeletes packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert deletes.isEmpty() || deletes.get(deletes.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    deletes.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + deletes.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" segmentPrivate?=\" + packet.isSegmentPrivate + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", String.format(Locale.ROOT, \"push new packet (%s), packetCount=%d, bytesUsed=%.3f MB\", packet, updates.size(), bytesUsed.get()/1024./1024.));\n    }\n    assert checkDeleteStats();\n\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" segmentPrivate?=\" + packet.isSegmentPrivate + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", String.format(Locale.ROOT, \"push new packet (%s), packetCount=%d, bytesUsed=%.3f MB\", packet, updates.size(), bytesUsed.get()/1024./1024.));\n    }\n    assert checkDeleteStats();\n\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" segmentPrivate?=\" + packet.isSegmentPrivate + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", String.format(Locale.ROOT, \"push new packet (%s), packetCount=%d, bytesUsed=%.3f MB\", packet, updates.size(), bytesUsed.get()/1024./1024.));\n    }\n    assert checkDeleteStats();\n\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n    assert packet.delGen() < nextGen;\n    assert updates.isEmpty() || updates.get(updates.size()-1).delGen() < packet.delGen() : \"Delete packets must be in order\";\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"push deletes \" + packet + \" segmentPrivate?=\" + packet.isSegmentPrivate + \" delGen=\" + packet.delGen() + \" packetCount=\" + updates.size() + \" totBytesUsed=\" + bytesUsed.get());\n    }\n    assert checkDeleteStats();\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#push(FrozenBufferedUpdates).mjava","sourceNew":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", String.format(Locale.ROOT, \"push new packet (%s), packetCount=%d, bytesUsed=%.3f MB\", packet, updates.size(), bytesUsed.get()/1024./1024.));\n    }\n    assert checkDeleteStats();\n\n    return packet.delGen();\n  }\n\n","sourceOld":"  // Appends a new packet of buffered deletes to the stream,\n  // setting its generation:\n  public synchronized long push(FrozenBufferedUpdates packet) {\n    /*\n     * The insert operation must be atomic. If we let threads increment the gen\n     * and push the packet afterwards we risk that packets are out of order.\n     * With DWPT this is possible if two or more flushes are racing for pushing\n     * updates. If the pushed packets get our of order would loose documents\n     * since deletes are applied to the wrong segments.\n     */\n    packet.setDelGen(nextGen++);\n    assert packet.any();\n    assert checkDeleteStats();\n\n    updates.add(packet);\n    numTerms.addAndGet(packet.numTermDeletes);\n    bytesUsed.addAndGet(packet.bytesUsed);\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", String.format(Locale.ROOT, \"push new packet (%s), packetCount=%d, bytesUsed=%.3f MB\", packet, updates.size(), bytesUsed.get()/1024./1024.));\n    }\n    assert checkDeleteStats();\n\n    return packet.delGen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7e4c214a1f904dde76f5611b56d4081533055b3b","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["7e4c214a1f904dde76f5611b56d4081533055b3b","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}