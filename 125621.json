{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesBasic().mjava","commits":[{"id":"6652cc2bf75afdcb0c22e7b20d7708f365d20416","date":1428845341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalFiniteCasesBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalFiniteCasesBasic() throws Exception {\n    // 0 (incl) - 00 (incl)\n    byte[] zeros = new byte[3];\n    Automaton a = makeBinaryInterval(new BytesRef(zeros, 0, 1), true, new BytesRef(zeros, 0, 2), true);\n    assertTrue(Operations.isFinite(a));\n    assertFalse(accepts(a, new BytesRef()));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));\n\n    // '' (incl) - 00 (incl)\n    a = makeBinaryInterval(new BytesRef(), true, new BytesRef(zeros, 0, 2), true);\n    assertTrue(Operations.isFinite(a));\n    assertTrue(accepts(a, new BytesRef()));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));\n\n    // '' (excl) - 00 (incl)\n    a = makeBinaryInterval(new BytesRef(), false, new BytesRef(zeros, 0, 2), true);\n    assertTrue(Operations.isFinite(a));\n    assertFalse(accepts(a, new BytesRef()));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 1)));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));\n\n    // 0 (excl) - 00 (incl)\n    a = makeBinaryInterval(new BytesRef(zeros, 0, 1), false, new BytesRef(zeros, 0, 2), true);\n    assertTrue(Operations.isFinite(a));\n    assertFalse(accepts(a, new BytesRef()));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 1)));\n    assertTrue(accepts(a, new BytesRef(zeros, 0, 2)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));\n\n    // 0 (excl) - 00 (excl)\n    a = makeBinaryInterval(new BytesRef(zeros, 0, 1), false, new BytesRef(zeros, 0, 2), false);\n    assertTrue(Operations.isFinite(a));\n    assertFalse(accepts(a, new BytesRef()));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 1)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 2)));\n    assertFalse(accepts(a, new BytesRef(zeros, 0, 3)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}