{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#openOutputStream(String).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#openOutputStream(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public OutputStream openOutputStream(String storedResourceId) throws IOException {\n      final String znodePath = getZnodeForResource(storedResourceId);\n      final boolean retryOnConnLoss = this.retryOnConnLoss;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream() {\n        @Override\n        public void close() {\n          byte[] znodeData = toByteArray();\n          try {\n            if (zkClient.exists(znodePath, retryOnConnLoss)) {\n              zkClient.setData(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to existing znode {}\", znodeData.length, znodePath);\n            } else {\n              zkClient.makePath(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to new znode {}\", znodeData.length, znodePath);\n            }\n          } catch (Exception e) {\n            // have to throw a runtimer here as we're in close, \n            // which doesn't throw IOException\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;              \n            } else {\n              throw new ResourceException(Status.SERVER_ERROR_INTERNAL, \n                  \"Failed to save data to ZooKeeper znode: \"+znodePath+\" due to: \"+e, e);\n            }\n          }\n        }\n      };\n      return baos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#openOutputStream(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#openOutputStream(String).mjava","sourceNew":"    @Override\n    public OutputStream openOutputStream(String storedResourceId) throws IOException {\n      final String znodePath = getZnodeForResource(storedResourceId);\n      final boolean retryOnConnLoss = this.retryOnConnLoss;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream() {\n        @Override\n        public void close() {\n          byte[] znodeData = toByteArray();\n          try {\n            if (zkClient.exists(znodePath, retryOnConnLoss)) {\n              zkClient.setData(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to existing znode {}\", znodeData.length, znodePath);\n            } else {\n              zkClient.makePath(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to new znode {}\", znodeData.length, znodePath);\n            }\n          } catch (Exception e) {\n            // have to throw a runtimer here as we're in close, \n            // which doesn't throw IOException\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;              \n            } else {\n              throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Failed to save data to ZooKeeper znode: \"+znodePath+\" due to: \"+e, e);\n            }\n          }\n        }\n      };\n      return baos;\n    }\n\n","sourceOld":"    @Override\n    public OutputStream openOutputStream(String storedResourceId) throws IOException {\n      final String znodePath = getZnodeForResource(storedResourceId);\n      final boolean retryOnConnLoss = this.retryOnConnLoss;\n      ByteArrayOutputStream baos = new ByteArrayOutputStream() {\n        @Override\n        public void close() {\n          byte[] znodeData = toByteArray();\n          try {\n            if (zkClient.exists(znodePath, retryOnConnLoss)) {\n              zkClient.setData(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to existing znode {}\", znodeData.length, znodePath);\n            } else {\n              zkClient.makePath(znodePath, znodeData, retryOnConnLoss);\n              log.info(\"Wrote {} bytes to new znode {}\", znodeData.length, znodePath);\n            }\n          } catch (Exception e) {\n            // have to throw a runtimer here as we're in close, \n            // which doesn't throw IOException\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;              \n            } else {\n              throw new ResourceException(Status.SERVER_ERROR_INTERNAL, \n                  \"Failed to save data to ZooKeeper znode: \"+znodePath+\" due to: \"+e, e);\n            }\n          }\n        }\n      };\n      return baos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}