{"path":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    final FST<T>.BytesReader in = fst.getBytesReader(0);\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    final FST<T>.BytesReader in = fst.getBytesReader(0);\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4708e7bf7695781d702d204d178627b4faddc03f"],"4708e7bf7695781d702d204d178627b4faddc03f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["4708e7bf7695781d702d204d178627b4faddc03f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4708e7bf7695781d702d204d178627b4faddc03f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}