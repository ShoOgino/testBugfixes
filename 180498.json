{"path":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","commits":[{"id":"abf644a9bed9c9f68be70fcfbe59137ec716f54a","date":1206114973,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abf644a9bed9c9f68be70fcfbe59137ec716f54a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abf644a9bed9c9f68be70fcfbe59137ec716f54a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abf644a9bed9c9f68be70fcfbe59137ec716f54a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abf644a9bed9c9f68be70fcfbe59137ec716f54a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}