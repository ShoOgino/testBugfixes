{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractShardUrls(String,String).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractShardUrls(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<List<String>> extractShardUrls(String zkHost, String collection) {\n\n    DocCollection docCollection = extractDocCollection(zkHost, collection);\n    List<Slice> slices = getSortedSlices(docCollection.getSlices());\n    List<List<String>> solrUrls = new ArrayList<List<String>>(slices.size());\n    for (Slice slice : slices) {\n      if (slice.getLeader() == null) {\n        throw new IllegalArgumentException(\"Cannot find SolrCloud slice leader. \" +\n            \"It looks like not all of your shards are registered in ZooKeeper yet\");\n      }\n      Collection<Replica> replicas = slice.getReplicas();\n      List<String> urls = new ArrayList<String>(replicas.size());\n      for (Replica replica : replicas) {\n        ZkCoreNodeProps props = new ZkCoreNodeProps(replica);\n        urls.add(props.getCoreUrl());\n      }\n      solrUrls.add(urls);\n    }\n    return solrUrls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractShardUrls(String,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractShardUrls(String,String).mjava","sourceNew":"  public List<List<String>> extractShardUrls(String zkHost, String collection) {\n\n    DocCollection docCollection = extractDocCollection(zkHost, collection);\n    List<Slice> slices = getSortedSlices(docCollection.getSlices());\n    List<List<String>> solrUrls = new ArrayList<List<String>>(slices.size());\n    for (Slice slice : slices) {\n      if (slice.getLeader() == null) {\n        throw new IllegalArgumentException(\"Cannot find SolrCloud slice leader. \" +\n            \"It looks like not all of your shards are registered in ZooKeeper yet\");\n      }\n      Collection<Replica> replicas = slice.getReplicas();\n      List<String> urls = new ArrayList<String>(replicas.size());\n      for (Replica replica : replicas) {\n        ZkCoreNodeProps props = new ZkCoreNodeProps(replica);\n        urls.add(props.getCoreUrl());\n      }\n      solrUrls.add(urls);\n    }\n    return solrUrls;\n  }\n\n","sourceOld":"  public List<List<String>> extractShardUrls(String zkHost, String collection) {\n\n    DocCollection docCollection = extractDocCollection(zkHost, collection);\n    List<Slice> slices = getSortedSlices(docCollection.getSlices());\n    List<List<String>> solrUrls = new ArrayList<List<String>>(slices.size());\n    for (Slice slice : slices) {\n      if (slice.getLeader() == null) {\n        throw new IllegalArgumentException(\"Cannot find SolrCloud slice leader. \" +\n            \"It looks like not all of your shards are registered in ZooKeeper yet\");\n      }\n      Collection<Replica> replicas = slice.getReplicas();\n      List<String> urls = new ArrayList<String>(replicas.size());\n      for (Replica replica : replicas) {\n        ZkCoreNodeProps props = new ZkCoreNodeProps(replica);\n        urls.add(props.getCoreUrl());\n      }\n      solrUrls.add(urls);\n    }\n    return solrUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}