{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          // We haven't yet skipped for this posting\n          skipper.init(skipOffset,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadOffset,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n\n        final int newCount = skipper.skipTo(target); \n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          //skipper.getPosIndex().seek(posReader);\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadOffset = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n      } while (target > doc);\n\n      return doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          // We haven't yet skipped for this posting\n          skipper.init(skipOffset,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadOffset,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n\n        final int newCount = skipper.skipTo(target); \n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          //skipper.getPosIndex().seek(posReader);\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadOffset = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          // We haven't yet skipped for this posting\n          skipper.init(skipOffset,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadOffset,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n\n        final int newCount = skipper.skipTo(target); \n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          //skipper.getPosIndex().seek(posReader);\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadOffset = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          // We haven't yet skipped for this posting\n          skipper.init(skipOffset,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadOffset,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n\n        final int newCount = skipper.skipTo(target); \n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          //skipper.getPosIndex().seek(posReader);\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadOffset = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n      } while (target > doc);\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff28d83336d21b964812b94574b7e8cea46a3cc","date":1297437050,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      // TODO: jump right to next() if target is < X away\n      // from where we are now?\n\n      if (docFreq >= skipInterval) {\n\n        // There are enough docs in the posting to have\n        // skip data\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n          skipper.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n          skipper.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          //System.out.println(\"  doc seek'd to \" + skipper.getDocIndex());\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      //System.out.println(\"SepD&P advance target=\" + target + \" vs current=\" + doc + \" this=\" + this);\n\n      if ((target - skipInterval) >= doc && docFreq >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and its not too close\n\n        if (skipper == null) {\n          //System.out.println(\"  create skipper\");\n          // This DocsEnum has never done any skipping\n          skipper = new SepSkipListReader((IndexInput) skipIn.clone(),\n                                          freqIn,\n                                          docIn,\n                                          posIn,\n                                          maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n          //System.out.println(\"  init skip data skipFP=\" + skipFP);\n          // We haven't yet skipped for this posting\n          skipper.init(skipFP,\n                       docIndex,\n                       freqIndex,\n                       posIndex,\n                       payloadFP,\n                       docFreq,\n                       storePayloads);\n          skipper.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n          skipped = true;\n        }\n        final int newCount = skipper.skipTo(target); \n        //System.out.println(\"  skip newCount=\" + newCount + \" vs \" + count);\n\n        if (newCount > count) {\n\n          // Skipper did move\n          skipper.getFreqIndex().seek(freqReader);\n          skipper.getDocIndex().seek(docReader);\n          // NOTE: don't seek pos here; do it lazily\n          // instead.  Eg a PhraseQuery may skip to many\n          // docs before finally asking for positions...\n          posIndex.set(skipper.getPosIndex());\n          posSeekPending = true;\n          count = newCount;\n          doc = skipper.getDoc();\n          //System.out.println(\"    moved to doc=\" + doc);\n          //payloadIn.seek(skipper.getPayloadPointer());\n          payloadFP = skipper.getPayloadPointer();\n          pendingPosCount = 0;\n          pendingPayloadBytes = 0;\n          payloadPending = false;\n          payloadLength = skipper.getPayloadLength();\n          //System.out.println(\"    move payloadLen=\" + payloadLength);\n        }\n      }\n        \n      // Now, linear scan for the rest:\n      do {\n        if (nextDoc() == NO_MORE_DOCS) {\n          //System.out.println(\"  advance nextDoc=END\");\n          return NO_MORE_DOCS;\n        }\n        //System.out.println(\"  advance nextDoc=\" + doc);\n      } while (target > doc);\n\n      //System.out.println(\"  return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["aff28d83336d21b964812b94574b7e8cea46a3cc"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","aff28d83336d21b964812b94574b7e8cea46a3cc"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b1add9ddc0005b07550d4350720aac22dc9886b3"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","aff28d83336d21b964812b94574b7e8cea46a3cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"aff28d83336d21b964812b94574b7e8cea46a3cc":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","aff28d83336d21b964812b94574b7e8cea46a3cc","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}