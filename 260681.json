{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobContent#[T]_decodeAndCache(String,Decoder[T]).mjava","commits":[{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobContent#[T]_decodeAndCache(String,Decoder[T]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This method decodes the byte[] to a custom Object\n     *\n     * @param key     The key is used to store the decoded Object. it is possible to have multiple\n     *                decoders for the same blob (may be unusual).\n     * @param decoder A decoder instance\n     * @return the decoded Object . If it was already decoded, then return from the cache\n     */\n    public <T> T decodeAndCache(String key, Decoder<T> decoder) {\n      if (decodedObjects == null) {\n        synchronized (this) {\n          if (decodedObjects == null) decodedObjects = new ConcurrentHashMap<>();\n        }\n      }\n\n      Object t = decodedObjects.get(key);\n      if (t != null) return (T) t;\n      t = decoder.decode(new ByteBufferInputStream(buffer));\n      decodedObjects.put(key, t);\n      return (T) t;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobContent#[T]_decodeAndCache(String,Decoder[T]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This method decodes the byte[] to a custom Object\n     *\n     * @param key     The key is used to store the decoded Object. it is possible to have multiple\n     *                decoders for the same blob (may be unusual).\n     * @param decoder A decoder instance\n     * @return the decoded Object . If it was already decoded, then return from the cache\n     */\n    public <T> T decodeAndCache(String key, Decoder<T> decoder) {\n      if (decodedObjects == null) {\n        synchronized (this) {\n          if (decodedObjects == null) decodedObjects = new ConcurrentHashMap<>();\n        }\n      }\n\n      Object t = decodedObjects.get(key);\n      if (t != null) return (T) t;\n      t = decoder.decode(new ByteBufferInputStream(buffer));\n      decodedObjects.put(key, t);\n      return (T) t;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobContent#[T]_decodeAndCache(String,Decoder[T]).mjava","sourceNew":null,"sourceOld":"    /**\n     * This method decodes the byte[] to a custom Object\n     *\n     * @param key     The key is used to store the decoded Object. it is possible to have multiple\n     *                decoders for the same blob (may be unusual).\n     * @param decoder A decoder instance\n     * @return the decoded Object . If it was already decoded, then return from the cache\n     */\n    public <T> T decodeAndCache(String key, Decoder<T> decoder) {\n      if (decodedObjects == null) {\n        synchronized (this) {\n          if (decodedObjects == null) decodedObjects = new ConcurrentHashMap<>();\n        }\n      }\n\n      Object t = decodedObjects.get(key);\n      if (t != null) return (T) t;\n      t = decoder.decode(new ByteBufferInputStream(buffer));\n      decodedObjects.put(key, t);\n      return (T) t;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobContent#[T]_decodeAndCache(String,Decoder[T]).mjava","sourceNew":null,"sourceOld":"    /**\n     * This method decodes the byte[] to a custom Object\n     *\n     * @param key     The key is used to store the decoded Object. it is possible to have multiple\n     *                decoders for the same blob (may be unusual).\n     * @param decoder A decoder instance\n     * @return the decoded Object . If it was already decoded, then return from the cache\n     */\n    public <T> T decodeAndCache(String key, Decoder<T> decoder) {\n      if (decodedObjects == null) {\n        synchronized (this) {\n          if (decodedObjects == null) decodedObjects = new ConcurrentHashMap<>();\n        }\n      }\n\n      Object t = decodedObjects.get(key);\n      if (t != null) return (T) t;\n      t = decoder.decode(new ByteBufferInputStream(buffer));\n      decodedObjects.put(key, t);\n      return (T) t;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"713122036535651642e6d4fe57ce12b449e18473":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1","a5296efc4b319f5647b606629c093a94b23692c6"],"713122036535651642e6d4fe57ce12b449e18473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}