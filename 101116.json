{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217deea97c6f9889ae5841798ceb2d62a98bee16","date":1359314941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n          * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ids = new int[hashSize];\n      Arrays.fill(ids, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ords = new int[hashSize];\n      Arrays.fill(ords, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(Integer.BYTES * -(hashSize - newSize));\n      hashSize = newSize;\n      ids = new int[hashSize];\n      Arrays.fill(ids, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ids = new int[hashSize];\n      Arrays.fill(ids, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#shrink(int).mjava","sourceNew":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(Integer.BYTES * -(hashSize - newSize));\n      hashSize = newSize;\n      ids = new int[hashSize];\n      Arrays.fill(ids, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean shrink(int targetSize) {\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = hashSize;\n    while (newSize >= 8 && newSize / 4 > targetSize) {\n      newSize /= 2;\n    }\n    if (newSize != hashSize) {\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * -(hashSize - newSize));\n      hashSize = newSize;\n      ids = new int[hashSize];\n      Arrays.fill(ids, -1);\n      hashHalfSize = newSize / 2;\n      hashMask = newSize - 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"217deea97c6f9889ae5841798ceb2d62a98bee16":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","217deea97c6f9889ae5841798ceb2d62a98bee16"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["bbccaf0f052c2a25526a56531803c5ebac7c8f41","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"217deea97c6f9889ae5841798ceb2d62a98bee16":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["217deea97c6f9889ae5841798ceb2d62a98bee16","d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}