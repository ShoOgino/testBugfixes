{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#advance(int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        TempPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"    try skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          // if (DEBUG) {\n          //   System.out.println(\"    create skipper\");\n          // }\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        TempPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        true,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          // if (DEBUG) {\n          //   System.out.println(\"    init skipper\");\n          // }\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"    skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer() + \" pos.fp=\" + skipper.getPosPointer() + \" pos.bufferUpto=\" + skipper.getPosBufferUpto() + \" pay.fp=\" + skipper.getPayPointer() + \" lastStartOffset=\" + lastStartOffset);\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        position = 0;\n        lastStartOffset = 0;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}