{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}