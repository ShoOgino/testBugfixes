{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"2a1862266772deb28cdcb7d996b64d2177022687":["770342641f7b505eaa8dccdc666158bff2419109"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2a1862266772deb28cdcb7d996b64d2177022687":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["770342641f7b505eaa8dccdc666158bff2419109"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}