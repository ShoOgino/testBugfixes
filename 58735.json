{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FunctionQuery functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));\n\n    doTestCustomScore(functionQuery, 1.0);\n    doTestCustomScore(functionQuery, 5.0);\n\n    // same values, but in float format\n    valuesCreator = new FloatValuesCreator(FLOAT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));\n\n    doTestCustomScore(functionQuery, 1.0);\n    doTestCustomScore(functionQuery, 6.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FloatFieldSource fieldSource = new FloatFieldSource(valuesCreator);\n\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","sourceOld":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FunctionQuery functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));\n\n    doTestCustomScore(functionQuery, 1.0);\n    doTestCustomScore(functionQuery, 5.0);\n\n    // same values, but in float format\n    valuesCreator = new FloatValuesCreator(FLOAT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    functionQuery = new FunctionQuery(new FloatFieldSource(valuesCreator));\n\n    doTestCustomScore(functionQuery, 1.0);\n    doTestCustomScore(functionQuery, 6.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FloatFieldSource fieldSource = new FloatFieldSource(valuesCreator);\n\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FloatFieldSource fieldSource = new FloatFieldSource(valuesCreator);\n\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","sourceOld":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    FloatValuesCreator valuesCreator = new FloatValuesCreator(INT_FIELD, null, CachedArrayCreator.CACHE_VALUES_AND_BITS);\n    FloatFieldSource fieldSource = new FloatFieldSource(valuesCreator);\n\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomScoreFloat().mjava","sourceNew":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","sourceOld":"  /**\n   * Test that CustomScoreQuery of Type.FLOAT returns the expected scores.\n   */\n  @Test\n  public void testCustomScoreFloat() throws Exception {\n    // INT field can be parsed as float\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(INT_AS_FLOAT_VALUESOURCE, 5.0);\n\n    // same values, but in float format\n    doTestCustomScore(FLOAT_VALUESOURCE, 1.0);\n    doTestCustomScore(FLOAT_VALUESOURCE, 6.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["382fe3a6ca9745891afebda9b9a57cc158305545"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"382fe3a6ca9745891afebda9b9a57cc158305545":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}