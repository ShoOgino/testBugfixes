{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","commits":[{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(IndexReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(IndexReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ca474b88b90218279fc4b893727bcefbb1f725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34ca474b88b90218279fc4b893727bcefbb1f725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ca474b88b90218279fc4b893727bcefbb1f725","5cab9a86bd67202d20b6adc463008c8e982b070a"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}