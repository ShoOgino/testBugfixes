{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c45bbf26db88631f7a389cbff0f4eab70f55ec64","date":1303271007,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a00afb46b1a8a7ee8772ebbd41076442006ce5e4","date":1325512163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = newTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = defaultField == null ? new WeightedSpanTermExtractor()\n        : new WeightedSpanTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#initExtractor(TokenStream).mjava","sourceNew":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = newTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  private TokenStream initExtractor(TokenStream tokenStream) throws IOException {\n    WeightedSpanTermExtractor qse = newTermExtractor(defaultField);\n    qse.setMaxDocCharsToAnalyze(maxCharsToAnalyze);\n    qse.setExpandMultiTermQuery(expandMultiTermQuery);\n    qse.setWrapIfNotCachingTokenFilter(wrapToCaching);\n    if (reader == null) {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTerms(query,\n          tokenStream, field);\n    } else {\n      this.fieldWeightedSpanTerms = qse.getWeightedSpanTermsWithScores(query,\n          tokenStream, field, reader);\n    }\n    if(qse.isCachedTokenStream()) {\n      return qse.getTokenStream();\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"c45bbf26db88631f7a389cbff0f4eab70f55ec64":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["9454a6510e2db155fb01faa5c049b06ece95fab9","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c45bbf26db88631f7a389cbff0f4eab70f55ec64":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c45bbf26db88631f7a389cbff0f4eab70f55ec64","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}