{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)),\n                    useDocValues(new SortField (\"float\", SortField.Type.FLOAT)));\n      assertMatches (full, queryX, sort, \"IGEAC\");\n\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)),\n                    useDocValues(new SortField (null, SortField.Type.DOC, true)));\n      assertMatches (full, queryX, sort, \"CEAGI\");\n\n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)),\n                    useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches (full, queryX, sort, \"GICEA\");\n    }\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortCombos().mjava","sourceNew":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)),\n                    useDocValues(new SortField (\"float\", SortField.Type.FLOAT)));\n      assertMatches (full, queryX, sort, \"IGEAC\");\n\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)),\n                    useDocValues(new SortField (null, SortField.Type.DOC, true)));\n      assertMatches (full, queryX, sort, \"CEAGI\");\n\n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)),\n                    useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches (full, queryX, sort, \"GICEA\");\n    }\n  }\n\n","sourceOld":"  // test sorts using a series of fields\n  public void testSortCombos() throws Exception {\n    sort.setSort (new SortField (\"int\", SortField.Type.INT), new SortField (\"float\", SortField.Type.FLOAT) );\n    assertMatches (full, queryX, sort, \"IGEAC\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true), new SortField (null, SortField.Type.DOC, true) );\n    assertMatches (full, queryX, sort, \"CEAGI\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT), new SortField (\"string\", SortField.Type.STRING) );\n    assertMatches (full, queryX, sort, \"GICEA\");\n\n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT)),\n                    useDocValues(new SortField (\"float\", SortField.Type.FLOAT)));\n      assertMatches (full, queryX, sort, \"IGEAC\");\n\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)),\n                    useDocValues(new SortField (null, SortField.Type.DOC, true)));\n      assertMatches (full, queryX, sort, \"CEAGI\");\n\n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT)),\n                    useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches (full, queryX, sort, \"GICEA\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["28088b0a688977b79dec2cc9119cff2fb4aab7ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}