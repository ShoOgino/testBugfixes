{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (LegacyNumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (FieldType.LegacyNumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (FieldType.LegacyNumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (LegacyNumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (NumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (NumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (NumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (NumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#getNumberType(NumberType,String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#getNumberType(NumberType,String).mjava","sourceNew":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (LegacyNumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (FieldType.LegacyNumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (FieldType.LegacyNumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (LegacyNumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","sourceOld":"  private static Number getNumberType(NumberType numberType, String fieldName) {\n    \n    if (numberType == null) {\n      return null;\n    }\n    \n    switch (numberType) {\n      \n      case POSITIVE:\n        return RANDOM_NUMBER_MAP.get(fieldName);\n        \n      case NEGATIVE:\n        Number number = RANDOM_NUMBER_MAP.get(fieldName);\n        \n        if (LegacyNumericType.LONG.name().equals(fieldName)\n            || DATE_FIELD_NAME.equals(fieldName)) {\n          number = -number.longValue();\n          \n        } else if (FieldType.LegacyNumericType.DOUBLE.name().equals(fieldName)) {\n          number = -number.doubleValue();\n          \n        } else if (FieldType.LegacyNumericType.FLOAT.name().equals(fieldName)) {\n          number = -number.floatValue();\n          \n        } else if (LegacyNumericType.INT.name().equals(fieldName)) {\n          number = -number.intValue();\n          \n        } else {\n          throw new IllegalArgumentException(\"field name not found: \"\n              + fieldName);\n        }\n        \n        return number;\n        \n      default:\n        return 0;\n        \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["770342641f7b505eaa8dccdc666158bff2419109"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"770342641f7b505eaa8dccdc666158bff2419109":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}