{"path":"lucene/src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-ReusableAnalyzerBase],String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-ReusableAnalyzerBase],String,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-ReusableAnalyzerBase],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends ReusableAnalyzerBase> aClass, final String resource,\n      final String comment) throws IOException {\n    final Set<String> wordSet = WordlistLoader.getWordSet(aClass, resource,\n        comment);\n    final CharArraySet set = new CharArraySet(Version.LUCENE_31, wordSet.size(), ignoreCase);\n    set.addAll(wordSet);\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends ReusableAnalyzerBase> aClass, final String resource,\n      final String comment) throws IOException {\n    final Set<String> wordSet = WordlistLoader.getWordSet(aClass, resource,\n        comment);\n    final CharArraySet set = new CharArraySet(Version.LUCENE_31, wordSet.size(), ignoreCase);\n    set.addAll(wordSet);\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-ReusableAnalyzerBase],String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/StopwordAnalyzerBase#loadStopwordSet(boolean,Class[#-extends-ReusableAnalyzerBase],String,String).mjava","sourceNew":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends ReusableAnalyzerBase> aClass, final String resource,\n      final String comment) throws IOException {\n    final Set<String> wordSet = WordlistLoader.getWordSet(aClass, resource,\n        comment);\n    final CharArraySet set = new CharArraySet(Version.LUCENE_31, wordSet.size(), ignoreCase);\n    set.addAll(wordSet);\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Creates a CharArraySet from a file resource associated with a class. (See\n   * {@link Class#getResourceAsStream(String)}).\n   * \n   * @param ignoreCase\n   *          <code>true</code> if the set should ignore the case of the\n   *          stopwords, otherwise <code>false</code>\n   * @param aClass\n   *          a class that is associated with the given stopwordResource\n   * @param resource\n   *          name of the resource file associated with the given class\n   * @param comment\n   *          comment string to ignore in the stopword file\n   * @return a CharArraySet containing the distinct stopwords from the given\n   *         file\n   * @throws IOException\n   *           if loading the stopwords throws an {@link IOException}\n   */\n  protected static CharArraySet loadStopwordSet(final boolean ignoreCase,\n      final Class<? extends ReusableAnalyzerBase> aClass, final String resource,\n      final String comment) throws IOException {\n    final Set<String> wordSet = WordlistLoader.getWordSet(aClass, resource,\n        comment);\n    final CharArraySet set = new CharArraySet(Version.LUCENE_31, wordSet.size(), ignoreCase);\n    set.addAll(wordSet);\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}