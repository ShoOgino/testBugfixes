{"path":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"/dev/null","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress != null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"/dev/null","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress != null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5d9ed4e489dd766515b82a66840fe1102e6ad2e","date":1287752703,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress != null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress != null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"/dev/null","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b5d9ed4e489dd766515b82a66840fe1102e6ad2e"],"c26f00b574427b55127e869b935845554afde1fa":["b5d9ed4e489dd766515b82a66840fe1102e6ad2e","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b5d9ed4e489dd766515b82a66840fe1102e6ad2e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b5d9ed4e489dd766515b82a66840fe1102e6ad2e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5d9ed4e489dd766515b82a66840fe1102e6ad2e"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"b5d9ed4e489dd766515b82a66840fe1102e6ad2e":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b5d9ed4e489dd766515b82a66840fe1102e6ad2e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"b5d9ed4e489dd766515b82a66840fe1102e6ad2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}