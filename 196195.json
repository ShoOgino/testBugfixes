{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","pathOld":"/dev/null","sourceNew":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f,new ExtensionProfile()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","sourceNew":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f,new ExtensionProfile()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer);\n        this.httpResponse.setContentType(GDataResponse.XMLMIME_ATOM);\n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.httpResponse.setContentType(GDataResponse.XMLMIME_RSS);\n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","sourceOld":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f,new ExtensionProfile()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a228247de0686f328301f2d13982b56d78533501","date":1156108808,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","sourceNew":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f, new ProvidedServiceStub()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer);\n        this.httpResponse.setContentType(GDataResponse.XMLMIME_ATOM);\n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.httpResponse.setContentType(GDataResponse.XMLMIME_RSS);\n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","sourceOld":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f,new ExtensionProfile()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer);\n        this.httpResponse.setContentType(GDataResponse.XMLMIME_ATOM);\n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.httpResponse.setContentType(GDataResponse.XMLMIME_RSS);\n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(),new ExtensionProfile \n                ()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/server/TestGDataResponse#testSendResponseBaseFeedExtensionProfile().mjava","sourceNew":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f, new ProvidedServiceStub()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer);\n        this.httpResponse.setContentType(GDataResponse.XMLMIME_ATOM);\n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.httpResponse.setContentType(GDataResponse.XMLMIME_RSS);\n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","sourceOld":"    /* \n     * Test method for 'org.apache.lucene.gdata.server.GDataResponse.sendResponse(BaseFeed, ExtensionProfile)' \n     */ \n    public void testSendResponseBaseFeedExtensionProfile() throws IOException { \n        try{ \n            Feed f = null; \n            this.response.sendResponse(f, new ProvidedServiceStub()); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n         \n        try{ \n            Feed f = createFeed(); \n            this.response.sendResponse(f,null); \n            fail(\"Exception expected\"); \n        }catch (IllegalArgumentException e) { \n            // \n        } \n        StringWriter stringWriter = new StringWriter(); \n        PrintWriter writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer);\n        this.httpResponse.setContentType(GDataResponse.XMLMIME_ATOM);\n        this.response.setOutputFormat(OutputFormat.ATOM); \n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedAtom); \n        this.control.reset(); \n         \n        stringWriter = new StringWriter(); \n        writer = new PrintWriter(stringWriter); \n         \n        this.control.expectAndReturn(this.httpResponse.getWriter(),writer); \n        this.response.setOutputFormat(OutputFormat.RSS); \n        this.httpResponse.setContentType(GDataResponse.XMLMIME_RSS);\n        this.control.replay(); \n         \n        this.response.sendResponse(createFeed(), new ProvidedServiceStub()); \n        assertEquals(\"Simple XML representation\",stringWriter.toString(),generatedFeedRSS); \n         \n         \n         \n \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a228247de0686f328301f2d13982b56d78533501"],"a228247de0686f328301f2d13982b56d78533501":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a228247de0686f328301f2d13982b56d78533501":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["a228247de0686f328301f2d13982b56d78533501"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}