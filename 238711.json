{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","commits":[{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,BottomValueChecker).mjava","sourceNew":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      firstComparator = null;\n      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      canSetMinScore = false;\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","sourceOld":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            BottomValueChecker bottomValueChecker) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      firstComparator = null;\n      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      canSetMinScore = false;\n    }\n    this.bottomValueChecker = bottomValueChecker;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":1,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean).mjava","sourceNew":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      firstComparator = null;\n      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      canSetMinScore = false;\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","sourceOld":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      firstComparator = null;\n      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      canSetMinScore = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","sourceNew":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> firstComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n\n    if (firstComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n            && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n            && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      relevanceComparator = (FieldComparator.RelevanceComparator) firstComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      relevanceComparator = null;\n      canSetMinScore = false;\n      if (firstComparator instanceof FilteringFieldComparator) {\n        assert hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE;\n        scoreMode = needsScores ? ScoreMode.TOP_DOCS_WITH_SCORES : ScoreMode.TOP_DOCS;\n      } else {\n        scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","sourceOld":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> fieldComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n    if (fieldComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n          && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n          && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      firstComparator = (FieldComparator.RelevanceComparator) fieldComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      firstComparator = null;\n      scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      canSetMinScore = false;\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#TopFieldCollector(FieldValueHitQueue[Entry],int,HitsThresholdChecker,boolean,MaxScoreAccumulator).mjava","sourceNew":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> firstComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n\n    if (firstComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n            && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n            && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      relevanceComparator = (FieldComparator.RelevanceComparator) firstComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      relevanceComparator = null;\n      canSetMinScore = false;\n      if (hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n        scoreMode = needsScores ? ScoreMode.TOP_DOCS_WITH_SCORES : ScoreMode.TOP_DOCS;\n      } else {\n        scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","sourceOld":"  // Declaring the constructor private prevents extending this class by anyone\n  // else. Note that the class cannot be final since it's extended by the\n  // internal versions. If someone will define a constructor with any other\n  // visibility, then anyone will be able to extend the class, which is not what\n  // we want.\n  private TopFieldCollector(FieldValueHitQueue<Entry> pq, int numHits,\n                            HitsThresholdChecker hitsThresholdChecker, boolean needsScores,\n                            MaxScoreAccumulator minScoreAcc) {\n    super(pq);\n    this.needsScores = needsScores;\n    this.numHits = numHits;\n    this.hitsThresholdChecker = hitsThresholdChecker;\n    this.numComparators = pq.getComparators().length;\n    FieldComparator<?> firstComparator = pq.getComparators()[0];\n    int reverseMul = pq.reverseMul[0];\n\n    if (firstComparator.getClass().equals(FieldComparator.RelevanceComparator.class)\n            && reverseMul == 1 // if the natural sort is preserved (sort by descending relevance)\n            && hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE) {\n      relevanceComparator = (FieldComparator.RelevanceComparator) firstComparator;\n      scoreMode = ScoreMode.TOP_SCORES;\n      canSetMinScore = true;\n    } else {\n      relevanceComparator = null;\n      canSetMinScore = false;\n      if (firstComparator instanceof FilteringFieldComparator) {\n        assert hitsThresholdChecker.getHitsThreshold() != Integer.MAX_VALUE;\n        scoreMode = needsScores ? ScoreMode.TOP_DOCS_WITH_SCORES : ScoreMode.TOP_DOCS;\n      } else {\n        scoreMode = needsScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    }\n    this.minScoreAcc = minScoreAcc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","807314aa41c10866aec273a0e54fd0d24d8971de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["807314aa41c10866aec273a0e54fd0d24d8971de","3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}