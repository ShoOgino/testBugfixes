{"path":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#doTestSoftAndHardCommitMaxTimeRapidAdds(CommitWithinType).mjava","commits":[{"id":"25aea5e95fe9399f6ca9758178fa3a003159ff4d","date":1507651705,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#doTestSoftAndHardCommitMaxTimeRapidAdds(CommitWithinType).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestSoftAndHardCommitMaxTimeRapidAdds(final CommitWithinType commitWithinType)\n    throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n    final int commitWithin = commitWithinType.useValue(softCommitWaitMillis, hardCommitWaitMillis);\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    updater.setCommitWithinSoftCommit(commitWithinType.equals(CommitWithinType.SOFT));\n    \n    softTracker.setTimeUpperBound(commitWithinType.equals(CommitWithinType.SOFT) ? -1 : softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(commitWithinType.equals(CommitWithinType.HARD) ? -1 : hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n\n    final long preFirstNanos = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(commitWithin, \"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    final long postLastNanos = System.nanoTime();\n    \n    monitor.assertSaneOffers();\n\n    final long maxTimeMillis = MILLISECONDS.convert(postLastNanos - preFirstNanos, NANOSECONDS);\n    log.info(\"maxTimeMillis: {}ns - {}ns == {}ms\", postLastNanos, preFirstNanos, maxTimeMillis);\n    \n    // NOTE: explicitly using truncated division of longs to round down\n    // even if evenly divisible, need +1 to account for possible \"last\" commit triggered by \"last\" doc\n    final long maxExpectedSoft = 1L + (maxTimeMillis / softCommitWaitMillis);\n    final long maxExpectedHard = 1L + (maxTimeMillis / hardCommitWaitMillis);\n\n    log.info(\"maxExpectedSoft={}\", maxExpectedSoft);\n    log.info(\"maxExpectedHard={}\", maxExpectedHard);\n\n    // do a loop pool over each monitor queue, asserting that:\n    // - we get at least one commit\n    // - we don't get more then the max possible commits expected\n    // - any commit we do get doesn't happen \"too fast\" relative the previous commit\n    //   (or first doc added for the first commit)\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"softCommit\", preFirstNanos, softCommitWaitMillis,\n                                 maxExpectedSoft, monitor.soft);\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"hardCommit\", preFirstNanos, hardCommitWaitMillis,\n                                 maxExpectedHard, monitor.hard);\n\n    // now wait a bit...\n    // w/o other action we shouldn't see any additional hard/soft commits\n\n    assertNull(\"Got a hard commit we weren't expecting\",\n               monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n               monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}