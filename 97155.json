{"path":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","commits":[{"id":"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad","date":1434033347,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when reRankQuery parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"569aade36ab5d95a5e6b8fca9676ce35657ba6b6","date":1454328039,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","sourceNew":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when reRankQuery parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","sourceNew":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when reRankQuery parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","sourceNew":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    SolrException se = expectThrows(SolrException.class, \"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\",\n        () -> h.query(req(params))\n    );\n    assertTrue(se.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    try {\n      h.query(req(params));\n      fail(\"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\");\n    } catch (SolrException e) {\n      assertTrue(e.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"589da39fe2c1d2e0588909e1d22d66523f04ffe1","date":1591826390,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter().mjava","sourceNew":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    ignoreException(\"reRankQuery parameter is mandatory\");\n    SolrException se = expectThrows(SolrException.class, \"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\",\n        () -> h.query(req(params))\n    );\n    assertTrue(se.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n    unIgnoreException(\"reRankQuery parameter is mandatory\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testRerankQueryParsingShouldFailWithoutMandatoryReRankQueryParameter() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\", \"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\", \"2\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"2\");\n\n    SolrException se = expectThrows(SolrException.class, \"A syntax error should be thrown when \"+ReRankQParserPlugin.RERANK_QUERY+\" parameter is not specified\",\n        () -> h.query(req(params))\n    );\n    assertTrue(se.code() == SolrException.ErrorCode.BAD_REQUEST.code);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"589da39fe2c1d2e0588909e1d22d66523f04ffe1":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["589da39fe2c1d2e0588909e1d22d66523f04ffe1"]},"commit2Childs":{"a6be80501b3ee38dea6ab1d6439aa049acdfa0ad":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6be80501b3ee38dea6ab1d6439aa049acdfa0ad"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","464e7336798bc8a1281d5cf610c649c5a0784e83"],"589da39fe2c1d2e0588909e1d22d66523f04ffe1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["589da39fe2c1d2e0588909e1d22d66523f04ffe1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}