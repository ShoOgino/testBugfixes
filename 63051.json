{"path":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.IgnoreCommitOptimizeUpdateProcessor#processCommit(CommitUpdateCommand).mjava","commits":[{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.IgnoreCommitOptimizeUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n      if (ignoreOptimizeOnly && !cmd.optimize) {\n        // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n        // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n      if (errorCode != null) {\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n        rsp.setException(new SolrException(errorCode, responseMsg));\n      } else {\n        // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with status code: 200\", cmdType);\n        if (responseMsg != null) {\n          NamedList<Object> responseHeader = rsp.getResponseHeader();\n          if (responseHeader != null) {\n            responseHeader.add(\"msg\", responseMsg);\n          } else {\n            responseHeader = new SimpleOrderedMap<Object>();\n            responseHeader.add(\"msg\", responseMsg);\n            rsp.add(\"responseHeader\", responseHeader);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.IgnoreCommitOptimizeUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.IgnoreCommitOptimizeUpdateProcessor#processCommit(CommitUpdateCommand).mjava","sourceNew":"    @Override\n    public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n      if (ignoreOptimizeOnly && !cmd.optimize) {\n        // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n        // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n      if (errorCode != null) {\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n        rsp.setException(new SolrException(errorCode, responseMsg));\n      } else {\n        // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with status code: 200\", cmdType);\n        if (responseMsg != null) {\n          NamedList<Object> responseHeader = rsp.getResponseHeader();\n          if (responseHeader != null) {\n            responseHeader.add(\"msg\", responseMsg);\n          } else {\n            responseHeader = new SimpleOrderedMap<Object>();\n            responseHeader.add(\"msg\", responseMsg);\n            rsp.addResponseHeader(responseHeader);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n      if (ignoreOptimizeOnly && !cmd.optimize) {\n        // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n        // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n      if (errorCode != null) {\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n        rsp.setException(new SolrException(errorCode, responseMsg));\n      } else {\n        // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with status code: 200\", cmdType);\n        if (responseMsg != null) {\n          NamedList<Object> responseHeader = rsp.getResponseHeader();\n          if (responseHeader != null) {\n            responseHeader.add(\"msg\", responseMsg);\n          } else {\n            responseHeader = new SimpleOrderedMap<Object>();\n            responseHeader.add(\"msg\", responseMsg);\n            rsp.add(\"responseHeader\", responseHeader);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}