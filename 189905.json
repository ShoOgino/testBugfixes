{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"270881512f74569f7bc71bfe95534b337d53a60b","date":1454112544,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n    assertPointsEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n    assertPointsEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n    assertPointsEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertReaderEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertTermsEquals(info, leftReader, rightReader, true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n    assertPointsEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void assertReaderEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assertReaderStatisticsEquals(info, leftReader, rightReader);\n    assertFieldsEquals(info, leftReader, MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNormsEquals(info, leftReader, rightReader);\n    assertStoredFieldsEquals(info, leftReader, rightReader);\n    assertTermVectorsEquals(info, leftReader, rightReader);\n    assertDocValuesEquals(info, leftReader, rightReader);\n    assertDeletedDocsEquals(info, leftReader, rightReader);\n    assertFieldInfosEquals(info, leftReader, rightReader);\n    assertPointsEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"270881512f74569f7bc71bfe95534b337d53a60b":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["51c8450b3b616b6777f722ff4083c0bf946381a2","8d15e34266d75e4e8b95da046cd0afc812367b38"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["51c8450b3b616b6777f722ff4083c0bf946381a2","270881512f74569f7bc71bfe95534b337d53a60b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"]},"commit2Childs":{"270881512f74569f7bc71bfe95534b337d53a60b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["270881512f74569f7bc71bfe95534b337d53a60b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}