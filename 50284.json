{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush(boolean).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush(boolean closeDocStore) throws IOException {\n    assert numDocsInRAM > 0;\n\n    initFlushState(closeDocStore);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n      \n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            docStoreOffset, flushState.docStoreSegmentName,\n            false,    \n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   docStoreOffset, flushState.docStoreSegmentName,\n                                   false,    \n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush() throws IOException {\n    assert numDocsInRAM > 0;\n\n    flushState = new SegmentWriteState(infoStream, directory, segment, docFieldProcessor.fieldInfos,\n        numDocsInRAM, writer.getConfig().getTermIndexInterval(),\n        writer.codecs);\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  SegmentInfo flush(boolean closeDocStore) throws IOException {\n    assert numDocsInRAM > 0;\n\n    initFlushState(closeDocStore);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null) {\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    }\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n      \n      consumer.flush(flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs,\n            directory, false,\n            docStoreOffset, flushState.docStoreSegmentName,\n            false,    \n            hasProx(),\n            getCodec());\n\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + ramAllocator.nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + ramAllocator.nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + ramAllocator.nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      long maxSequenceID = sequenceIDs[numDocsInRAM-1];\n      doAfterFlush();\n      \n      // Create new SegmentInfo, but do not add to our\n      // segmentInfos until deletes are flushed\n      // successfully.\n      SegmentInfo newSegment = new SegmentInfo(flushState.segmentName,\n                                   flushState.numDocs,\n                                   directory, false,\n                                   docStoreOffset, flushState.docStoreSegmentName,\n                                   false,    \n                                   hasProx(),\n                                   getCodec());\n\n      \n      newSegment.setMinSequenceID(sequenceIDs[0]);\n      newSegment.setMaxSequenceID(maxSequenceID);\n      \n      IndexWriter.setDiagnostics(newSegment, \"flush\");\n      success = true;\n\n      return newSegment;\n    } finally {\n      if (!success) {\n        setAborting();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"833a7987bc1c94455fde83e3311f72bddedcfb93":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","833a7987bc1c94455fde83e3311f72bddedcfb93"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}