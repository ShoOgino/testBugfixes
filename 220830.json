{"path":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    tokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a Text field, so\n    // that the index stores the path, and so that the path is searchable\n    doc.add(Field.Text(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    tokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a Text field, so\n    // that the index stores the path, and so that the path is searchable\n    doc.add(Field.Text(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbdcd094e2f9e4815621e4b813461caabc9546a","date":1091569764,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    tokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    tokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a Text field, so\n    // that the index stores the path, and so that the path is searchable\n    doc.add(Field.Text(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"084b9d2e7ab4baff4e2d1eb1d02b2d256496cf9f","date":1091569990,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    tokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c50958a6b1cf91d7ee822f5e4e7ce02ccbe5a457","date":1094160194,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\", DateField.timeToString(f.lastModified()),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(new Field(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"path\", f.getPath()));\n\n    // Add the last modified date of the file a field named \"modified\".  Use a\n    // Keyword field, so that it's searchable, but so that no attempt is made\n    // to tokenize the field into words.\n    doc.add(Field.Keyword(\"modified\",\n\t\t\t  DateField.timeToString(f.lastModified())));\n\n    // Add the contents of the file a field named \"contents\".  Use a Text\n    // field, specifying a Reader, so that the text of the file is tokenized.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(Field.Text(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fe73f6848cbfa49743e37b86b3e184dfc15a8cc","date":1094160837,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\", DateField.timeToString(f.lastModified()),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\", DateField.timeToString(f.lastModified()),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // ?? why doesn't FileReader work here ??\n    FileInputStream is = new FileInputStream(f);\n    Reader reader = new BufferedReader(new InputStreamReader(is));\n    doc.add(new Field(\"contents\", reader));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"426b1f604ca4a5f07bd99a50f2cb66c29604e8ae","date":1094420877,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a keyword field as encoded by <a\n    href=\"lucene.document.DateField.html\">DateField</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\", DateField.timeToString(f.lastModified()),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.UN_TOKENIZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/FileDocument#Document(File).mjava","sourceNew":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","sourceOld":"  /** Makes a document for a File.\n    <p>\n    The document has three fields:\n    <ul>\n    <li><code>path</code>--containing the pathname of the file, as a stored,\n    untokenized field;\n    <li><code>modified</code>--containing the last modified date of the file as\n    a field as created by <a\n    href=\"lucene.document.DateTools.html\">DateTools</a>; and\n    <li><code>contents</code>--containing the full contents of the file, as a\n    Reader field;\n    */\n  public static Document Document(File f)\n       throws java.io.FileNotFoundException {\n\t \n    // make a new, empty document\n    Document doc = new Document();\n\n    // Add the path of the file as a field named \"path\".  Use a field that is \n    // indexed (i.e. searchable), but don't tokenize the field into words.\n    doc.add(new Field(\"path\", f.getPath(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the last modified date of the file a field named \"modified\".  Use \n    // a field that is indexed (i.e. searchable), but don't tokenize the field\n    // into words.\n    doc.add(new Field(\"modified\",\n        DateTools.timeToString(f.lastModified(), DateTools.Resolution.MINUTE),\n        Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n    // Add the contents of the file to a field named \"contents\".  Specify a Reader,\n    // so that the text of the file is tokenized and indexed, but not stored.\n    // Note that FileReader expects the file to be in the system's default encoding.\n    // If that's not the case searching for special characters will fail.\n    doc.add(new Field(\"contents\", new FileReader(f)));\n\n    // return the document\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1bbdcd094e2f9e4815621e4b813461caabc9546a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"c50958a6b1cf91d7ee822f5e4e7ce02ccbe5a457":["084b9d2e7ab4baff4e2d1eb1d02b2d256496cf9f"],"084b9d2e7ab4baff4e2d1eb1d02b2d256496cf9f":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"426b1f604ca4a5f07bd99a50f2cb66c29604e8ae":["8fe73f6848cbfa49743e37b86b3e184dfc15a8cc"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["426b1f604ca4a5f07bd99a50f2cb66c29604e8ae"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"8fe73f6848cbfa49743e37b86b3e184dfc15a8cc":["c50958a6b1cf91d7ee822f5e4e7ce02ccbe5a457"]},"commit2Childs":{"1bbdcd094e2f9e4815621e4b813461caabc9546a":["084b9d2e7ab4baff4e2d1eb1d02b2d256496cf9f"],"c50958a6b1cf91d7ee822f5e4e7ce02ccbe5a457":["8fe73f6848cbfa49743e37b86b3e184dfc15a8cc"],"084b9d2e7ab4baff4e2d1eb1d02b2d256496cf9f":["c50958a6b1cf91d7ee822f5e4e7ce02ccbe5a457"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"426b1f604ca4a5f07bd99a50f2cb66c29604e8ae":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"8fe73f6848cbfa49743e37b86b3e184dfc15a8cc":["426b1f604ca4a5f07bd99a50f2cb66c29604e8ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}