{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#SynonymQuery(Term...).mjava","commits":[{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#SynonymQuery(Term...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new SynonymQuery, matching any of the supplied terms.\n   * <p>\n   * The terms must all have the same field.\n   */\n  public SynonymQuery(Term... terms) {\n    this.terms = Objects.requireNonNull(terms).clone();\n    // check that all terms are the same field\n    String field = null;\n    for (Term term : terms) {\n      if (field == null) {\n        field = term.field();\n      } else if (!term.field().equals(field)) {\n        throw new IllegalArgumentException(\"Synonyms must be across the same field\");\n      }\n    }\n    if (terms.length > BooleanQuery.getMaxClauseCount()) {\n      throw new BooleanQuery.TooManyClauses();\n    }\n    Arrays.sort(this.terms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":4,"author":"jimczi","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery#SynonymQuery(Term...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new SynonymQuery, matching any of the supplied terms.\n   * <p>\n   * The terms must all have the same field.\n   */\n  public SynonymQuery(Term... terms) {\n    this.terms = Objects.requireNonNull(terms).clone();\n    // check that all terms are the same field\n    String field = null;\n    for (Term term : terms) {\n      if (field == null) {\n        field = term.field();\n      } else if (!term.field().equals(field)) {\n        throw new IllegalArgumentException(\"Synonyms must be across the same field\");\n      }\n    }\n    if (terms.length > BooleanQuery.getMaxClauseCount()) {\n      throw new BooleanQuery.TooManyClauses();\n    }\n    Arrays.sort(this.terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}