{"path":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<String>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<String>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","sourceNew":"  private String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","sourceOld":"  private String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<String>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b82485108ad24cfd45d88a7465e68000f54055c","date":1430225324,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsUpdateLog#getLogList(Path).mjava","sourceNew":"  public String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","sourceOld":"  private String[] getLogList(Path tlogDir) throws FileNotFoundException, IOException {\n    final String prefix = TLOG_NAME+'.';\n    FileStatus[] files = fs.listStatus(tlogDir, new PathFilter() {\n      \n      @Override\n      public boolean accept(Path name) {\n        return name.getName().startsWith(prefix);\n      }\n    });\n    List<String> fileList = new ArrayList<>(files.length);\n    for (FileStatus file : files) {\n      fileList.add(file.getPath().getName());\n    }\n    return fileList.toArray(new String[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"2b82485108ad24cfd45d88a7465e68000f54055c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b82485108ad24cfd45d88a7465e68000f54055c"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2b82485108ad24cfd45d88a7465e68000f54055c"],"2b82485108ad24cfd45d88a7465e68000f54055c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}