{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetLabels#testBasic().mjava","commits":[{"id":"2b0ae449d456c3d95466275e466ca402ce36f52b","date":1601304937,"type":0,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetLabels#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    // Writes facet ords to a separate directory from the main index:\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"Publish Date\", true);\n\n    for (Document doc : prepareDocuments()) {\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector fc = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    TaxonomyFacetLabels taxoLabels = new TaxonomyFacetLabels(taxoReader, FacetsConfig.DEFAULT_INDEX_FIELD_NAME);\n\n    // Check labels for all dimensions\n    List<FacetLabel> facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs());\n    assertEquals(\"Incorrect number of facet labels received\", 10, facetLabels.size());\n\n    // Check labels for all dimensions\n    assertTrue(facetLabels.stream()\n        .filter(l -> \"Author\".equals(l.components[0]))\n        .map(l -> l.components[1]).collect(Collectors.toSet())\n        .equals(Set.of(\"Bob\", \"Lisa\", \"Susan\", \"Frank\", \"Tom\")));\n\n    assertTrue(facetLabels.stream()\n        .filter(l -> \"Publish Date\".equals(l.components[0]))\n        .map(l -> String.join(\"/\", l.components[1], l.components[2], l.components[3]))\n        .collect(Collectors.toSet())\n        .equals(Set.of(\"2010/10/15\", \"2010/10/20\", \"2012/1/1\", \"2012/1/7\", \"1999/5/5\")));\n\n    // Check labels for a specific dimension\n    facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), \"Publish Date\");\n    assertEquals(\"Incorrect number of facet labels received for 'Publish Date'\", 5, facetLabels.size());\n\n    assertTrue(facetLabels.stream()\n        .map(l -> String.join(\"/\", l.components[1], l.components[2], l.components[3]))\n        .collect(Collectors.toSet())\n        .equals(Set.of(\"2010/10/15\", \"2010/10/20\", \"2012/1/1\", \"2012/1/7\", \"1999/5/5\")));\n\n    try {\n      facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), null, true);\n      fail(\"IllegalArgumentException was not thrown for using docIds supplied in decreasing order\");\n    } catch (IllegalArgumentException ae) {\n      assertTrue(ae.getMessage().contains(\"docs out of order\"));\n    }\n\n    try {\n      facetLabels = lookupFacetLabels(taxoLabels, fc.getMatchingDocs(), \"Publish Date\", true);\n      fail(\"Assertion error was not thrown for using docIds supplied in decreasing order\");\n    } catch (IllegalArgumentException ae) {\n      assertTrue(ae.getMessage().contains(\"docs out of order\"));\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, searcher.getIndexReader(), taxoReader, taxoDir, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b0ae449d456c3d95466275e466ca402ce36f52b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b0ae449d456c3d95466275e466ca402ce36f52b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}