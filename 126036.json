{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":null,"sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}