{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","commits":[{"id":"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","date":1374158194,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new TermFreq(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new TermFreq(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new TermFreqArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new TermFreq(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new TermFreq(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new TermFreqArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<TermFreqPayload> keys = new ArrayList<TermFreqPayload>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new TermFreqPayload(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new TermFreqPayload(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new TermFreq(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new TermFreq(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new TermFreqArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<TermFreqPayload> keys = new ArrayList<TermFreqPayload>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new TermFreqPayload(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new TermFreqPayload(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33f87fe6faf49dfc1e66f45e841e24838c2f725c","date":1383142987,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + _TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<Input>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testNonLatinRandomEdits().mjava","sourceNew":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    Directory tempDir = getDirectory();\n    FuzzySuggester suggester = new FuzzySuggester(tempDir, \"fuzzy\",analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","sourceOld":"  public void testNonLatinRandomEdits() throws IOException {\n    List<Input> keys = new ArrayList<>();\n    int numTerms = atLeast(100);\n    for (int i = 0; i < numTerms; i++) {\n      keys.add(new Input(\"буу\" + TestUtil.randomSimpleString(random()), 1 + random().nextInt(100)));\n    }\n    keys.add(new Input(\"фуу бар буу фар\", 12));\n    MockAnalyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    FuzzySuggester suggester = new FuzzySuggester(analyzer, analyzer, FuzzySuggester.EXACT_FIRST | FuzzySuggester.PRESERVE_SEP, 256, -1, true, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        0, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, true);\n    suggester.build(new InputArrayIterator(keys));\n    int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      String addRandomEdit = addRandomEdit(\"фуу бар буу\", 0);\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(addRandomEdit, random()), false, 2);\n      assertEquals(addRandomEdit, 1, results.size());\n      assertEquals(\"фуу бар буу фар\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n    }\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"6613659748fe4411a7dcf85266e55db1f95f7315":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}