{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * \n     * Constructor that accepts already parsed values of start and end. This constructor\n     * can only be used with numeric field types.\n     * \n     * @param schemaField schemaField for this range\n     * @param startStr String representation of the start value of this interval. Can be a \"*\".\n     * @param endStr String representation of the end value of this interval. Can be a \"*\".\n     * @param includeLower Indicates weather this interval should include values equal to start\n     * @param includeUpper Indicates weather this interval should include values equal to end\n     * @param key String key of this interval\n     */\n    FacetInterval(SchemaField schemaField, String startStr, String endStr,\n        boolean includeLower, boolean includeUpper, String key) {\n      assert schemaField.getType().getNumericType() != null: \"Only numeric fields supported with this constructor\";\n      this.key = key;\n      this.startOpen = !includeLower;\n      this.endOpen = !includeUpper;\n      this.start = getLimitFromString(schemaField, startStr);\n      this.end = getLimitFromString(schemaField, endStr);\n      assert start == null || end == null || start.compareTo(end) < 0: \n        \"Bad start/end limits: \" + startStr + \"/\" + endStr;\n      setNumericLimits(schemaField);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * \n     * Constructor that accepts already parsed values of start and end. This constructor\n     * can only be used with numeric field types.\n     * \n     * @param schemaField schemaField for this range\n     * @param startStr String representation of the start value of this interval. Can be a \"*\".\n     * @param endStr String representation of the end value of this interval. Can be a \"*\".\n     * @param includeLower Indicates weather this interval should include values equal to start\n     * @param includeUpper Indicates weather this interval should include values equal to end\n     * @param key String key of this interval\n     */\n    public FacetInterval(SchemaField schemaField, String startStr, String endStr,\n        boolean includeLower, boolean includeUpper, String key) {\n      assert schemaField.getType().getNumericType() != null: \"Only numeric fields supported with this constructor\";\n      this.key = key;\n      this.startOpen = !includeLower;\n      this.endOpen = !includeUpper;\n      this.start = getLimitFromString(schemaField, startStr);\n      this.end = getLimitFromString(schemaField, endStr);\n      assert start == null || end == null || start.compareTo(end) < 0: \n        \"Bad start/end limits: \" + startStr + \"/\" + endStr;\n      setNumericLimits(schemaField);\n    }\n\n","sourceOld":"    /**\n     * \n     * Constructor that accepts already parsed values of start and end. This constructor\n     * can only be used with numeric field types.\n     * \n     * @param schemaField schemaField for this range\n     * @param startStr String representation of the start value of this interval. Can be a \"*\".\n     * @param endStr String representation of the end value of this interval. Can be a \"*\".\n     * @param includeLower Indicates weather this interval should include values equal to start\n     * @param includeUpper Indicates weather this interval should include values equal to end\n     * @param key String key of this interval\n     */\n    FacetInterval(SchemaField schemaField, String startStr, String endStr,\n        boolean includeLower, boolean includeUpper, String key) {\n      assert schemaField.getType().getNumericType() != null: \"Only numeric fields supported with this constructor\";\n      this.key = key;\n      this.startOpen = !includeLower;\n      this.endOpen = !includeUpper;\n      this.start = getLimitFromString(schemaField, startStr);\n      this.end = getLimitFromString(schemaField, endStr);\n      assert start == null || end == null || start.compareTo(end) < 0: \n        \"Bad start/end limits: \" + startStr + \"/\" + endStr;\n      setNumericLimits(schemaField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#FacetInterval(SchemaField,String,String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * \n     * Constructor that accepts already parsed values of start and end. This constructor\n     * can only be used with numeric field types.\n     * \n     * @param schemaField schemaField for this range\n     * @param startStr String representation of the start value of this interval. Can be a \"*\".\n     * @param endStr String representation of the end value of this interval. Can be a \"*\".\n     * @param includeLower Indicates weather this interval should include values equal to start\n     * @param includeUpper Indicates weather this interval should include values equal to end\n     * @param key String key of this interval\n     */\n    public FacetInterval(SchemaField schemaField, String startStr, String endStr,\n        boolean includeLower, boolean includeUpper, String key) {\n      assert schemaField.getType().getNumberType() != null: \"Only numeric fields supported with this constructor\";\n      this.key = key;\n      this.startOpen = !includeLower;\n      this.endOpen = !includeUpper;\n      this.start = getLimitFromString(schemaField, startStr);\n      this.end = getLimitFromString(schemaField, endStr);\n      assert start == null || end == null || start.compareTo(end) < 0: \n        \"Bad start/end limits: \" + startStr + \"/\" + endStr;\n      setNumericLimits(schemaField);\n    }\n\n","sourceOld":"    /**\n     * \n     * Constructor that accepts already parsed values of start and end. This constructor\n     * can only be used with numeric field types.\n     * \n     * @param schemaField schemaField for this range\n     * @param startStr String representation of the start value of this interval. Can be a \"*\".\n     * @param endStr String representation of the end value of this interval. Can be a \"*\".\n     * @param includeLower Indicates weather this interval should include values equal to start\n     * @param includeUpper Indicates weather this interval should include values equal to end\n     * @param key String key of this interval\n     */\n    public FacetInterval(SchemaField schemaField, String startStr, String endStr,\n        boolean includeLower, boolean includeUpper, String key) {\n      assert schemaField.getType().getNumericType() != null: \"Only numeric fields supported with this constructor\";\n      this.key = key;\n      this.startOpen = !includeLower;\n      this.endOpen = !includeUpper;\n      this.start = getLimitFromString(schemaField, startStr);\n      this.end = getLimitFromString(schemaField, endStr);\n      assert start == null || end == null || start.compareTo(end) < 0: \n        \"Bad start/end limits: \" + startStr + \"/\" + endStr;\n      setNumericLimits(schemaField);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d81baa64023bbb9b43f6d929ee168b105940d30"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}