{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsSingle(SortedDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals to this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}