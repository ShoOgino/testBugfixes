{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9499b09dd7d06d975f31e59a9b00653a86f9cad2","date":1343325589,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33dd2fc33a7c6ae46d3decff17689539385ef33f","date":1364971259,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (!quiet && (files == null || files.length == 0)) {\n        log.warn(\"No files added to classloader from lib: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33dd2fc33a7c6ae46d3decff17689539385ef33f"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["aba371508186796cc6151d8223a5b4e16d02e26e","33dd2fc33a7c6ae46d3decff17689539385ef33f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","9499b09dd7d06d975f31e59a9b00653a86f9cad2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}