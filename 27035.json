{"path":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return EMPTY_LIST_OF_MAPS;\n\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList<String> names = new NamedList<String>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? EMPTY_LIST_OF_MAPS : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b5f7137bd9491c6596681b1f56e481e17964e581","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b5f7137bd9491c6596681b1f56e481e17964e581","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["b5f7137bd9491c6596681b1f56e481e17964e581"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","b5f7137bd9491c6596681b1f56e481e17964e581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","b5f7137bd9491c6596681b1f56e481e17964e581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"b5f7137bd9491c6596681b1f56e481e17964e581":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}