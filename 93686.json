{"path":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","commits":[{"id":"a41defcc937912bab1b97f83c666668b3e7e7831","date":1126880252,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = (SpanQuery)clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = (SpanQuery)clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["a41defcc937912bab1b97f83c666668b3e7e7831"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a41defcc937912bab1b97f83c666668b3e7e7831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a41defcc937912bab1b97f83c666668b3e7e7831"],"a41defcc937912bab1b97f83c666668b3e7e7831":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}