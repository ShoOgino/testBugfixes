{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = ((SolrDispatchFilter) jettys.get(0)\n        .getDispatchFilter().getFilter()).getCores().getZkController()\n        .getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = ((SolrDispatchFilter) jettys.get(0)\n        .getDispatchFilter().getFilter()).getCores().getZkController()\n        .getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = ((SolrDispatchFilter) jettys.get(0)\n        .getDispatchFilter().getFilter()).getCores().getZkController()\n        .getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = ((SolrDispatchFilter) jettys.get(0)\n        .getDispatchFilter().getFilter()).getCores().getZkController()\n        .getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c1bfa19d78d06a6c7d5423f700e90e4b6724352","date":1476445387,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n    System.setProperty(\"collection\", temporaryCollection);\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["28288370235ed02234a64753cdbf0c6ec096304a"],"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["3c1bfa19d78d06a6c7d5423f700e90e4b6724352"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"3c1bfa19d78d06a6c7d5423f700e90e4b6724352":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3c1bfa19d78d06a6c7d5423f700e90e4b6724352","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["3c1bfa19d78d06a6c7d5423f700e90e4b6724352","197bbedf08450ade98a11f4a0001448059666bec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1088b72b3b4cc45316b7595bd09023c859cd2327","3c1bfa19d78d06a6c7d5423f700e90e4b6724352"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c1bfa19d78d06a6c7d5423f700e90e4b6724352":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["e7da9d8536c11576df10e348efa79d2739170936"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["3c1bfa19d78d06a6c7d5423f700e90e4b6724352","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}