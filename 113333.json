{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n\n      // For all clauses e.g. one* two~\n      for (BooleanClause clause : qc) {\n        Query childQuery = clause.getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n\n      // For all clauses e.g. one* two~\n      for (BooleanClause clause : qc) {\n        Query childQuery = clause.getQuery();\n\n        float boost = 1f;\n        while (childQuery instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) childQuery;\n          boost *= bq.getBoost();\n          childQuery = bq.getQuery();\n        }\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanQuery stq = new SpanTermQuery(tq.getTerm());\n          if (boost != 1f) {\n            stq = new SpanBoostQuery(stq, boost);\n          }\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n\n      // For all clauses e.g. one* two~\n      for (BooleanClause clause : qc) {\n        Query childQuery = clause.getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4636a6c87ecee6029b76024c78a0b49031928d1d","date":1525921420,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n\n      // For all clauses e.g. one* two~\n      for (BooleanClause clause : qc) {\n        Query childQuery = clause.getQuery();\n\n        float boost = 1f;\n        while (childQuery instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) childQuery;\n          boost *= bq.getBoost();\n          childQuery = bq.getQuery();\n        }\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanQuery stq = new SpanTermQuery(tq.getTerm());\n          if (boost != 1f) {\n            stq = new SpanBoostQuery(stq, boost);\n          }\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else if (childQuery instanceof MatchNoDocsQuery) {\n          // Insert fake term e.g. phrase query was for \"Fred Smithe*\" and\n          // there were no \"Smithe*\" terms - need to\n          // prevent match on just \"Fred\".\n          SpanQuery stq = new SpanTermQuery(new Term(field,\n                                                     \"Dummy clause because no terms found - must match nothing\"));\n          chosenList.add(stq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<>();\n      ArrayList<SpanQuery> nots = new ArrayList<>();\n\n      // For all clauses e.g. one* two~\n      for (BooleanClause clause : qc) {\n        Query childQuery = clause.getQuery();\n\n        float boost = 1f;\n        while (childQuery instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) childQuery;\n          boost *= bq.getBoost();\n          childQuery = bq.getQuery();\n        }\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (clause.getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanQuery stq = new SpanTermQuery(tq.getTerm());\n          if (boost != 1f) {\n            stq = new SpanBoostQuery(stq, boost);\n          }\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4636a6c87ecee6029b76024c78a0b49031928d1d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4636a6c87ecee6029b76024c78a0b49031928d1d"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4636a6c87ecee6029b76024c78a0b49031928d1d"],"4636a6c87ecee6029b76024c78a0b49031928d1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}