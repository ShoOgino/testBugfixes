{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tTermDocs td = reader.termDocs(new Term(KEY_FIELD,url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.next();\n\t\t\tlastDoc=td.doc();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tTermDocs td = reader.termDocs(new Term(KEY_FIELD,url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.next();\n\t\t\tlastDoc=td.doc();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getDeletedDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tTermDocs td = reader.termDocs(new Term(KEY_FIELD,url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.next();\n\t\t\tlastDoc=td.doc();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getDeletedDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tTermDocs td = reader.termDocs(new Term(KEY_FIELD,url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.next();\n\t\t\tlastDoc=td.doc();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getLiveDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getDeletedDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getLiveDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getDeletedDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getLiveDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getDeletedDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"\tpublic void testKeepsFirstFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setKeepMode(DuplicateFilter.KM_USE_FIRST_OCCURRENCE);\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n                        DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                                  MultiFields.getLiveDocs(reader),\n                                                                  KEY_FIELD,\n                                                                  new BytesRef(url));\n\t\t\tint lastDoc=0;\n\t\t\ttd.nextDoc();\n\t\t\tlastDoc=td.docID();\n\t\t\tassertEquals(\"Duplicate urls should return first doc\",lastDoc, hits[i].doc);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e141595402370bee958745de8b1c9de1fa182581":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","e141595402370bee958745de8b1c9de1fa182581","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"5f4e87790277826a2aea119328600dfb07761f32":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}