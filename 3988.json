{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testHashCodePrefix().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testHashCodePrefix().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testHashCodePrefix().mjava","sourceNew":"  @Test \n  public void testHashCodePrefix() {\n    // First, repeat the tests of testHashCode() using hashCode(-1)\n    // just to make sure nothing was broken in this variant:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p2.add(\"hi\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    \n    // Now move to testing prefixes:\n    CategoryPath p = new CategoryPath();\n    p.add(\"this\");\n    p.add(\"is\");\n    p.add(\"a\");\n    p.add(\"test\");\n    assertEquals(p.hashCode(), p.hashCode(4));\n    assertEquals(new CategoryPath().hashCode(), p.hashCode(0));\n    assertEquals(new CategoryPath(p, 1).hashCode(), p.hashCode(1));\n    assertEquals(new CategoryPath(p, 2).hashCode(), p.hashCode(2));\n    assertEquals(new CategoryPath(p, 3).hashCode(), p.hashCode(3));\n  }\n\n","sourceOld":"  @Test \n  public void testHashCodePrefix() {\n    // First, repeat the tests of testHashCode() using hashCode(-1)\n    // just to make sure nothing was broken in this variant:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p2.add(\"hi\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    \n    // Now move to testing prefixes:\n    CategoryPath p = new CategoryPath();\n    p.add(\"this\");\n    p.add(\"is\");\n    p.add(\"a\");\n    p.add(\"test\");\n    assertEquals(p.hashCode(), p.hashCode(4));\n    assertEquals(new CategoryPath().hashCode(), p.hashCode(0));\n    assertEquals(new CategoryPath(p, 1).hashCode(), p.hashCode(1));\n    assertEquals(new CategoryPath(p, 2).hashCode(), p.hashCode(2));\n    assertEquals(new CategoryPath(p, 3).hashCode(), p.hashCode(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testHashCodePrefix().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testHashCodePrefix() {\n    // First, repeat the tests of testHashCode() using hashCode(-1)\n    // just to make sure nothing was broken in this variant:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p2.add(\"hi\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    \n    // Now move to testing prefixes:\n    CategoryPath p = new CategoryPath();\n    p.add(\"this\");\n    p.add(\"is\");\n    p.add(\"a\");\n    p.add(\"test\");\n    assertEquals(p.hashCode(), p.hashCode(4));\n    assertEquals(new CategoryPath().hashCode(), p.hashCode(0));\n    assertEquals(new CategoryPath(p, 1).hashCode(), p.hashCode(1));\n    assertEquals(new CategoryPath(p, 2).hashCode(), p.hashCode(2));\n    assertEquals(new CategoryPath(p, 3).hashCode(), p.hashCode(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testHashCodePrefix().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testHashCodePrefix() {\n    // First, repeat the tests of testHashCode() using hashCode(-1)\n    // just to make sure nothing was broken in this variant:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p2.add(\"hi\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(p1.hashCode(-1), p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.hashCode(-1)==p2.hashCode(-1));\n    \n    // Now move to testing prefixes:\n    CategoryPath p = new CategoryPath();\n    p.add(\"this\");\n    p.add(\"is\");\n    p.add(\"a\");\n    p.add(\"test\");\n    assertEquals(p.hashCode(), p.hashCode(4));\n    assertEquals(new CategoryPath().hashCode(), p.hashCode(0));\n    assertEquals(new CategoryPath(p, 1).hashCode(), p.hashCode(1));\n    assertEquals(new CategoryPath(p, 2).hashCode(), p.hashCode(2));\n    assertEquals(new CategoryPath(p, 3).hashCode(), p.hashCode(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}