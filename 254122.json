{"path":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(Random random, int numHits) throws IOException {\n        createIndex(random, numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(Random,int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(Random random, int numHits) throws IOException {\n        createIndex(random, numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n\n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d47f68d60cbff5718136b945ba8c55982342f38":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8d47f68d60cbff5718136b945ba8c55982342f38"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"8d47f68d60cbff5718136b945ba8c55982342f38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["8d47f68d60cbff5718136b945ba8c55982342f38"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}