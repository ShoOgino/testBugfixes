{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}