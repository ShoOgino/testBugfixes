{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","commits":[{"id":"89f8b19763ea545f1e428dfa5efb8235beaaa05e","date":1151436680,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","pathOld":"/dev/null","sourceNew":"        private void fillMetaData(String recoverString) throws RecoverException{\n            StringTokenizer tokenizer = new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);\n            String temp = tokenizer.nextToken();\n            if(temp.equals(\"D\"))\n                this.operation = StorageOperation.DELETE;\n            else if(temp.equals(\"U\"))\n                this.operation = StorageOperation.UPDATE;\n            else if(temp.equals(\"I\"))\n                this.operation = StorageOperation.INSERT;\n            else\n                throw new RecoverException(\"Illegal metadata --- \"+recoverString);\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover feed Id -- \"+temp);\n            this.feedId = temp;\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover entry Id -- \"+temp);\n             this.entryId = temp;\n            \n            temp = tokenizer.nextToken();\n            try{\n                this.timestamp = Long.parseLong(temp);\n            }catch (Exception e) {\n                throw new RecoverException(\"Can't recover timestamp -- \"+temp,e);\n            }\n            \n            if(this.operation != StorageOperation.DELETE){\n                temp = tokenizer.nextToken();\n                if(temp == null)\n                    throw new RecoverException(\"Can't recover service -- \"+temp);  \n                if(!GDataServerRegistry.getRegistry().isServiceRegistered(temp))\n                    throw new RecoverException(\"Service in recover metadata is not registered  - \"+temp);\n                this.config = GDataServerRegistry.getRegistry().getProvidedService(temp);\n                \n            }\n            \n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","sourceNew":"        private void fillMetaData(String recoverString) throws RecoverException{\n            StringTokenizer tokenizer = new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);\n            String temp = tokenizer.nextToken();\n            if(temp.equals(\"D\"))\n                this.operation = StorageOperation.DELETE;\n            else if(temp.equals(\"U\"))\n                this.operation = StorageOperation.UPDATE;\n            else if(temp.equals(\"I\"))\n                this.operation = StorageOperation.INSERT;\n            else\n                throw new RecoverException(\"Illegal metadata --- \"+recoverString);\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover feed Id -- is null\");\n            this.feedId = temp;\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover entry Id -- is null\");\n             this.entryId = temp;\n            \n            temp = tokenizer.nextToken();\n            try{\n                this.timestamp = Long.parseLong(temp);\n            }catch (Exception e) {\n                throw new RecoverException(\"Can't recover timestamp -- is null\",e);\n            }\n            \n            if(this.operation != StorageOperation.DELETE){\n                temp = tokenizer.nextToken();\n                if(temp == null)\n                    throw new RecoverException(\"Can't recover service -- is null\");  \n                if(!GDataServerRegistry.getRegistry().isServiceRegistered(temp))\n                    throw new RecoverException(\"Service in recover metadata is not registered  - \"+temp);\n                this.config = GDataServerRegistry.getRegistry().getProvidedService(temp);\n                \n            }\n            \n        }\n\n","sourceOld":"        private void fillMetaData(String recoverString) throws RecoverException{\n            StringTokenizer tokenizer = new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);\n            String temp = tokenizer.nextToken();\n            if(temp.equals(\"D\"))\n                this.operation = StorageOperation.DELETE;\n            else if(temp.equals(\"U\"))\n                this.operation = StorageOperation.UPDATE;\n            else if(temp.equals(\"I\"))\n                this.operation = StorageOperation.INSERT;\n            else\n                throw new RecoverException(\"Illegal metadata --- \"+recoverString);\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover feed Id -- \"+temp);\n            this.feedId = temp;\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover entry Id -- \"+temp);\n             this.entryId = temp;\n            \n            temp = tokenizer.nextToken();\n            try{\n                this.timestamp = Long.parseLong(temp);\n            }catch (Exception e) {\n                throw new RecoverException(\"Can't recover timestamp -- \"+temp,e);\n            }\n            \n            if(this.operation != StorageOperation.DELETE){\n                temp = tokenizer.nextToken();\n                if(temp == null)\n                    throw new RecoverException(\"Can't recover service -- \"+temp);  \n                if(!GDataServerRegistry.getRegistry().isServiceRegistered(temp))\n                    throw new RecoverException(\"Service in recover metadata is not registered  - \"+temp);\n                this.config = GDataServerRegistry.getRegistry().getProvidedService(temp);\n                \n            }\n            \n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/recover/RecoverReader.RecoverStrategy#fillMetaData(String).mjava","sourceNew":"        private void fillMetaData(String recoverString) throws RecoverException{\n            StringTokenizer tokenizer = new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);\n            String temp = tokenizer.nextToken();\n            if(temp.equals(\"D\"))\n                this.operation = StorageOperation.DELETE;\n            else if(temp.equals(\"U\"))\n                this.operation = StorageOperation.UPDATE;\n            else if(temp.equals(\"I\"))\n                this.operation = StorageOperation.INSERT;\n            else\n                throw new RecoverException(\"Illegal metadata --- \"+recoverString);\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover feed Id -- is null\");\n            this.feedId = temp;\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover entry Id -- is null\");\n             this.entryId = temp;\n            \n            temp = tokenizer.nextToken();\n            try{\n                this.timestamp = Long.parseLong(temp);\n            }catch (Exception e) {\n                throw new RecoverException(\"Can't recover timestamp -- is null\",e);\n            }\n            \n            if(this.operation != StorageOperation.DELETE){\n                temp = tokenizer.nextToken();\n                if(temp == null)\n                    throw new RecoverException(\"Can't recover service -- is null\");  \n                if(!GDataServerRegistry.getRegistry().isServiceRegistered(temp))\n                    throw new RecoverException(\"Service in recover metadata is not registered  - \"+temp);\n                this.config = GDataServerRegistry.getRegistry().getProvidedService(temp);\n                \n            }\n            \n        }\n\n","sourceOld":"        private void fillMetaData(String recoverString) throws RecoverException{\n            StringTokenizer tokenizer = new StringTokenizer(recoverString,RecoverWriter.META_DATA_SEPARATOR);\n            String temp = tokenizer.nextToken();\n            if(temp.equals(\"D\"))\n                this.operation = StorageOperation.DELETE;\n            else if(temp.equals(\"U\"))\n                this.operation = StorageOperation.UPDATE;\n            else if(temp.equals(\"I\"))\n                this.operation = StorageOperation.INSERT;\n            else\n                throw new RecoverException(\"Illegal metadata --- \"+recoverString);\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover feed Id -- is null\");\n            this.feedId = temp;\n            temp = tokenizer.nextToken();\n            if(temp == null)\n                throw new RecoverException(\"Can't recover entry Id -- is null\");\n             this.entryId = temp;\n            \n            temp = tokenizer.nextToken();\n            try{\n                this.timestamp = Long.parseLong(temp);\n            }catch (Exception e) {\n                throw new RecoverException(\"Can't recover timestamp -- is null\",e);\n            }\n            \n            if(this.operation != StorageOperation.DELETE){\n                temp = tokenizer.nextToken();\n                if(temp == null)\n                    throw new RecoverException(\"Can't recover service -- is null\");  \n                if(!GDataServerRegistry.getRegistry().isServiceRegistered(temp))\n                    throw new RecoverException(\"Service in recover metadata is not registered  - \"+temp);\n                this.config = GDataServerRegistry.getRegistry().getProvidedService(temp);\n                \n            }\n            \n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}