{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser#SimpleTerm().mjava","commits":[{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}