{"path":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    \n    if (maxWordCount < DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    \n    if (termBufferLength < maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["d085fb336a7208eea2214e5ffcc803960819b60b"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["d085fb336a7208eea2214e5ffcc803960819b60b","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d085fb336a7208eea2214e5ffcc803960819b60b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}