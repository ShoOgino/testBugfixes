{"path":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","commits":[{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the command operations into command objects\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the command operations into command objects\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the command operations into command objects\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) {\n        ObjectBuilder.checkEOF(parser);\n        return operations;\n      }\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader,Set[String]).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) {\n        ObjectBuilder.checkEOF(parser);\n        return operations;\n      }\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        @SuppressWarnings({\"rawtypes\"})\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects from a json payload\n   *\n   * @param rdr               The payload\n   * @param singletonCommands commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) {\n        ObjectBuilder.checkEOF(parser);\n        return operations;\n      }\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}