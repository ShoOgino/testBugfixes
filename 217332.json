{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","commits":[{"id":"7c00763ceedfa0fc93dffe88eddf2ba67e7585de","date":1215037404,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29","date":1225382306,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":["2bef851a005f4fcbbec72fcbb9bb3abaece56aa0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the binary response parser\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd4f0da23db5d5db48f3fa44d077e05a5a4f2b29":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}