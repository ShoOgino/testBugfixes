{"path":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc3f14899cdc45c5d2b0ada50798af081c9e045","date":1363612341,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    if (!Constants.JRE_IS_MINIMUM_JAVA7) {\n      System.err.println(\"WARNING: TestIOUtils.testSuppressedExceptions: Full test coverage only with Java 7, as suppressed exception recording is not supported before.\");\n    }\n    \n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb0477d450d605e8388a8b01633c2903006fa785","date":1394630267,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":"  public void testSuppressedExceptions() {\n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n      assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n    }\n  }\n\n","sourceOld":"  public void testSuppressedExceptions() {\n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n        assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      if (Constants.JRE_IS_MINIMUM_JAVA7) {\n        assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n          trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIOUtils#testSuppressedExceptions().mjava","sourceNew":null,"sourceOld":"  public void testSuppressedExceptions() {\n    // test with prior exception\n    try {\n      final TestException t = new TestException();\n      IOUtils.closeWhileHandlingException(t, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      assertEquals(\"BASE-EXCEPTION\", e1.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e1.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      assertTrue(\"Stack trace does not contain first suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-1\"));\n      assertTrue(\"Stack trace does not contain second suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n    } catch (IOException e2) {\n      fail(\"IOException should not be thrown here\");\n    }\n    \n    // test without prior exception\n    try {\n      IOUtils.closeWhileHandlingException((TestException) null, new BrokenCloseable(1), new BrokenCloseable(2));\n    } catch (TestException e1) {\n      fail(\"TestException should not be thrown here\");\n    } catch (IOException e2) {\n      assertEquals(\"TEST-IO-EXCEPTION-1\", e2.getMessage());\n      final StringWriter sw = new StringWriter();\n      final PrintWriter pw = new PrintWriter(sw);\n      e2.printStackTrace(pw);\n      pw.flush();\n      final String trace = sw.toString();\n      if (VERBOSE) {\n        System.out.println(\"TestIOUtils.testSuppressedExceptions: Thrown Exception stack trace:\");\n        System.out.println(trace);\n      }\n      assertTrue(\"Stack trace does not contain suppressed Exception: \" + trace,\n        trace.contains(\"java.io.IOException: TEST-IO-EXCEPTION-2\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcc3f14899cdc45c5d2b0ada50798af081c9e045":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eb0477d450d605e8388a8b01633c2903006fa785":["dcc3f14899cdc45c5d2b0ada50798af081c9e045"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["eb0477d450d605e8388a8b01633c2903006fa785"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"]},"commit2Childs":{"dcc3f14899cdc45c5d2b0ada50798af081c9e045":["eb0477d450d605e8388a8b01633c2903006fa785"],"eb0477d450d605e8388a8b01633c2903006fa785":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dcc3f14899cdc45c5d2b0ada50798af081c9e045"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}