{"path":"src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","commits":[{"id":"28e349236232860728fc91596fa4a1ec2c64bde6","date":1253259442,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    \n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setTermBuffer(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setTermBuffer(str, index, matcher.start() - index);\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setTermBuffer(str, index, str.length() - index);\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b528c0f4a455e28e018997abac080e9ade0ae9d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b528c0f4a455e28e018997abac080e9ade0ae9d3","date":1261133020,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setTermBuffer(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setTermBuffer(str, index, matcher.start() - index);\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setTermBuffer(str, index, str.length() - index);\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    \n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setTermBuffer(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setTermBuffer(str, index, matcher.start() - index);\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setTermBuffer(str, index, str.length() - index);\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":["28e349236232860728fc91596fa4a1ec2c64bde6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setTermBuffer(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setTermBuffer(str, index, matcher.start() - index);\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setTermBuffer(str, index, str.length() - index);\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setTermBuffer(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setTermBuffer(str, index, matcher.start() - index);\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setTermBuffer(str, index, str.length() - index);\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"28e349236232860728fc91596fa4a1ec2c64bde6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b528c0f4a455e28e018997abac080e9ade0ae9d3":["28e349236232860728fc91596fa4a1ec2c64bde6"],"ad94625fb8d088209f46650c8097196fec67f00c":["b528c0f4a455e28e018997abac080e9ade0ae9d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28e349236232860728fc91596fa4a1ec2c64bde6":["b528c0f4a455e28e018997abac080e9ade0ae9d3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["28e349236232860728fc91596fa4a1ec2c64bde6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b528c0f4a455e28e018997abac080e9ade0ae9d3":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}