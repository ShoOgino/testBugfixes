{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#removeCore(CloudState,String,String).mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#removeCore(CloudState,String,String).mjava","pathOld":"/dev/null","sourceNew":"      /*\n       * Remove core from cloudstate\n       */\n      private CloudState removeCore(final CloudState cloudState, final String collection, final String coreNodeName) {\n        final LinkedHashMap<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        for(String collectionName: cloudState.getCollections()) {\n          if(collection.equals(collectionName)) {\n            Map<String, Slice> slices = cloudState.getSlices(collection);\n            LinkedHashMap<String, Slice> newSlices = new LinkedHashMap<String, Slice>();\n            for(Slice slice: slices.values()) {\n              if(slice.getShards().containsKey(coreNodeName)) {\n                LinkedHashMap<String, ZkNodeProps> newShards = new LinkedHashMap<String, ZkNodeProps>();\n                newShards.putAll(slice.getShards());\n                newShards.remove(coreNodeName);\n                Slice newSlice = new Slice(slice.getName(), newShards);\n                newSlices.put(slice.getName(), newSlice);\n              } else {\n                newSlices.put(slice.getName(), slice);\n              }\n            }\n            newStates.put(collectionName, newSlices);\n          } else {\n            newStates.put(collectionName, cloudState.getSlices(collectionName));\n          }\n        }\n        CloudState newState = new CloudState(cloudState.getLiveNodes(), newStates);\n        return newState;\n     }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c7cbf6b69f2a4acc536536fe1a152a8ad572d05","8c7cbf6b69f2a4acc536536fe1a152a8ad572d05"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#removeCore(CloudState,String,String).mjava","pathOld":"/dev/null","sourceNew":"      /*\n       * Remove core from cloudstate\n       */\n      private CloudState removeCore(final CloudState cloudState, final String collection, final String coreNodeName) {\n        final LinkedHashMap<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        for(String collectionName: cloudState.getCollections()) {\n          if(collection.equals(collectionName)) {\n            Map<String, Slice> slices = cloudState.getSlices(collection);\n            LinkedHashMap<String, Slice> newSlices = new LinkedHashMap<String, Slice>();\n            for(Slice slice: slices.values()) {\n              if(slice.getShards().containsKey(coreNodeName)) {\n                LinkedHashMap<String, ZkNodeProps> newShards = new LinkedHashMap<String, ZkNodeProps>();\n                newShards.putAll(slice.getShards());\n                newShards.remove(coreNodeName);\n                Slice newSlice = new Slice(slice.getName(), newShards);\n                newSlices.put(slice.getName(), newSlice);\n              } else {\n                newSlices.put(slice.getName(), slice);\n              }\n            }\n            newStates.put(collectionName, newSlices);\n          } else {\n            newStates.put(collectionName, cloudState.getSlices(collectionName));\n          }\n        }\n        CloudState newState = new CloudState(cloudState.getLiveNodes(), newStates);\n        return newState;\n     }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#removeCore(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#removeCore(CloudState,String,String).mjava","sourceNew":"      /*\n       * Remove core from cloudstate\n       */\n      private CloudState removeCore(final CloudState cloudState, ZkNodeProps message) {\n        \n        final String coreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n\n        final LinkedHashMap<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        for(String collectionName: cloudState.getCollections()) {\n          if(collection.equals(collectionName)) {\n            Map<String, Slice> slices = cloudState.getSlices(collection);\n            LinkedHashMap<String, Slice> newSlices = new LinkedHashMap<String, Slice>();\n            for(Slice slice: slices.values()) {\n              if(slice.getShards().containsKey(coreNodeName)) {\n                LinkedHashMap<String, ZkNodeProps> newShards = new LinkedHashMap<String, ZkNodeProps>();\n                newShards.putAll(slice.getShards());\n                newShards.remove(coreNodeName);\n                Slice newSlice = new Slice(slice.getName(), newShards);\n                newSlices.put(slice.getName(), newSlice);\n              } else {\n                newSlices.put(slice.getName(), slice);\n              }\n            }\n            newStates.put(collectionName, newSlices);\n          } else {\n            newStates.put(collectionName, cloudState.getSlices(collectionName));\n          }\n        }\n        CloudState newState = new CloudState(cloudState.getLiveNodes(), newStates);\n        return newState;\n     }\n\n","sourceOld":"      /*\n       * Remove core from cloudstate\n       */\n      private CloudState removeCore(final CloudState cloudState, final String collection, final String coreNodeName) {\n        final LinkedHashMap<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        for(String collectionName: cloudState.getCollections()) {\n          if(collection.equals(collectionName)) {\n            Map<String, Slice> slices = cloudState.getSlices(collection);\n            LinkedHashMap<String, Slice> newSlices = new LinkedHashMap<String, Slice>();\n            for(Slice slice: slices.values()) {\n              if(slice.getShards().containsKey(coreNodeName)) {\n                LinkedHashMap<String, ZkNodeProps> newShards = new LinkedHashMap<String, ZkNodeProps>();\n                newShards.putAll(slice.getShards());\n                newShards.remove(coreNodeName);\n                Slice newSlice = new Slice(slice.getName(), newShards);\n                newSlices.put(slice.getName(), newSlice);\n              } else {\n                newSlices.put(slice.getName(), slice);\n              }\n            }\n            newStates.put(collectionName, newSlices);\n          } else {\n            newStates.put(collectionName, cloudState.getSlices(collectionName));\n          }\n        }\n        CloudState newState = new CloudState(cloudState.getLiveNodes(), newStates);\n        return newState;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}