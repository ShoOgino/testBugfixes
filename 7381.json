{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"/dev/null","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(dataOut, entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"/dev/null","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(dataOut, entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"/dev/null","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(dataOut, entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(dataOut, entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","f6e3376a314fcc2b31bc46d399c2ff23552b78d6","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}