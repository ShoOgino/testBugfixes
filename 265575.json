{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","commits":[{"id":"9a8c1fed54a78c6182431f53f6658213fabd80a6","date":1399575602,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6cc2915889370c9313ee1741da315e976bdd574"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6cc2915889370c9313ee1741da315e976bdd574","date":1422111819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":["9a8c1fed54a78c6182431f53f6658213fabd80a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testLiveMaxMergeCount().mjava","sourceNew":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(MergeSource mergeSource, MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(mergeSource, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testLiveMaxMergeCount() throws Exception {\n    Directory d = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setSegmentsPerTier(1000);\n    tmp.setMaxMergeAtOnce(1000);\n    tmp.setMaxMergeAtOnceExplicit(10);\n    iwc.setMergePolicy(tmp);\n    iwc.setMaxBufferedDocs(2);\n    iwc.setRAMBufferSizeMB(-1);\n\n    final AtomicInteger maxRunningMergeCount = new AtomicInteger();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n\n        final AtomicInteger runningMergeCount = new AtomicInteger();\n\n        @Override\n        public void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          int count = runningMergeCount.incrementAndGet();\n          // evil?\n          synchronized (this) {\n            if (count > maxRunningMergeCount.get()) {\n              maxRunningMergeCount.set(count);\n            }\n          }\n          try {\n            super.doMerge(writer, merge);\n          } finally {\n            runningMergeCount.decrementAndGet();\n          }\n\n        }\n      };\n\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxMergeCount());\n    assertEquals(ConcurrentMergeScheduler.AUTO_DETECT_MERGES_AND_THREADS, cms.getMaxThreadCount());\n\n    cms.setMaxMergesAndThreads(5, 3);\n\n    iwc.setMergeScheduler(cms);\n\n    IndexWriter w = new IndexWriter(d, iwc);\n    // Makes 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    // No merges should have run so far, because TMP has high segmentsPerTier:\n    assertEquals(0, maxRunningMergeCount.get());\n    w.forceMerge(1);\n\n    // At most 5 merge threads should have launched at once:\n    assertTrue(\"maxRunningMergeCount=\" + maxRunningMergeCount, maxRunningMergeCount.get() <= 5);\n    maxRunningMergeCount.set(0);\n\n    // Makes another 100 segments\n    for(int i=0;i<200;i++) {\n      w.addDocument(new Document());\n    }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).setMaxMergesAndThreads(1, 1);\n    w.forceMerge(1);\n\n    // At most 1 merge thread should have launched at once:\n    assertEquals(1, maxRunningMergeCount.get());\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["c6cc2915889370c9313ee1741da315e976bdd574"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6cc2915889370c9313ee1741da315e976bdd574":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9a8c1fed54a78c6182431f53f6658213fabd80a6"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"9a8c1fed54a78c6182431f53f6658213fabd80a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a8c1fed54a78c6182431f53f6658213fabd80a6"],"c6cc2915889370c9313ee1741da315e976bdd574":["89697e7abc9807639c384eecf5a2a6eef1080426"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["c6cc2915889370c9313ee1741da315e976bdd574"],"9a8c1fed54a78c6182431f53f6658213fabd80a6":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}