{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MergeJoinStream#read().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MergeJoinStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    if(joinTuples.size() > 0) {\n      return joinTuples.removeFirst();\n    }\n\n    OUTER:\n    while(true) {\n      if(listA.size() == 0) {\n        //Stream A needs to be advanced.\n        Tuple a = streamA.read();\n        if(a.EOF) {\n          return a;\n        }\n\n        listA.add(a);\n        INNERA:\n        while(true) {\n          Tuple a1 = streamA.read();\n          if(a1.EOF) {\n            streamA.pushBack(a1);\n            break INNERA;\n          }\n\n          if(comp.compare(a,a1) == 0) {\n            listA.add(a1);\n          } else {\n            streamA.pushBack(a1);\n            break INNERA;\n          }\n        }\n      }\n\n      if(listB.size() == 0) {\n        //StreamB needs to be advanced.\n        Tuple b = streamB.read();\n        if(b.EOF) {\n          return b;\n        }\n\n        listB.add(b);\n        INNERA:\n        while(true) {\n          Tuple b1 = streamB.read();\n\n          if(b1.EOF) {\n            streamB.pushBack(b1);\n            break INNERA;\n          }\n\n          if(comp.compare(b,b1) == 0) {\n            listB.add(b1);\n          } else {\n            streamB.pushBack(b1);\n            break INNERA;\n          }\n        }\n      }\n\n      int c = comp.compare(listA.get(0),listB.get(0));\n      if(c == 0) {\n        //The Tuple lists match. So build all the Tuple combinations.\n        for(Tuple aa : listA) {\n          for(Tuple bb : listB) {\n            Tuple clone = aa.clone();\n            clone.fields.putAll(bb.fields);\n            joinTuples.add(clone);\n          }\n        }\n\n        //This will advance both streams.\n        listA.clear();\n        listB.clear();\n\n        return joinTuples.removeFirst();\n      } else if(c < 0) {\n        //This will advance streamA\n        listA.clear();\n      } else {\n        //This will advance streamB\n        listB.clear();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MergeJoinStream#read().mjava","sourceNew":null,"sourceOld":"  public Tuple read() throws IOException {\n\n    if(joinTuples.size() > 0) {\n      return joinTuples.removeFirst();\n    }\n\n    OUTER:\n    while(true) {\n      if(listA.size() == 0) {\n        //Stream A needs to be advanced.\n        Tuple a = streamA.read();\n        if(a.EOF) {\n          return a;\n        }\n\n        listA.add(a);\n        INNERA:\n        while(true) {\n          Tuple a1 = streamA.read();\n          if(a1.EOF) {\n            streamA.pushBack(a1);\n            break INNERA;\n          }\n\n          if(comp.compare(a,a1) == 0) {\n            listA.add(a1);\n          } else {\n            streamA.pushBack(a1);\n            break INNERA;\n          }\n        }\n      }\n\n      if(listB.size() == 0) {\n        //StreamB needs to be advanced.\n        Tuple b = streamB.read();\n        if(b.EOF) {\n          return b;\n        }\n\n        listB.add(b);\n        INNERA:\n        while(true) {\n          Tuple b1 = streamB.read();\n\n          if(b1.EOF) {\n            streamB.pushBack(b1);\n            break INNERA;\n          }\n\n          if(comp.compare(b,b1) == 0) {\n            listB.add(b1);\n          } else {\n            streamB.pushBack(b1);\n            break INNERA;\n          }\n        }\n      }\n\n      int c = comp.compare(listA.get(0),listB.get(0));\n      if(c == 0) {\n        //The Tuple lists match. So build all the Tuple combinations.\n        for(Tuple aa : listA) {\n          for(Tuple bb : listB) {\n            Tuple clone = aa.clone();\n            clone.fields.putAll(bb.fields);\n            joinTuples.add(clone);\n          }\n        }\n\n        //This will advance both streams.\n        listA.clear();\n        listB.clear();\n\n        return joinTuples.removeFirst();\n      } else if(c < 0) {\n        //This will advance streamA\n        listA.clear();\n      } else {\n        //This will advance streamB\n        listB.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}