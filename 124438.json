{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","commits":[{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[]).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#relateRangeToQuery(byte[],byte[],QueryRelation).mjava","sourceNew":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(ShapeField.BYTES, 0, minTriangle, 3 * ShapeField.BYTES, 2 * ShapeField.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","sourceOld":"  /** relates a range of triangles (internal node) to the query */\n  protected Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle, QueryRelation queryRelation) {\n    // compute bounding box of internal node\n    Relation r = relateRangeBBoxToQuery(LatLonShape.BYTES, 0, minTriangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, maxTriangle);\n    if (queryRelation == QueryRelation.DISJOINT) {\n      return transposeRelation(r);\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}