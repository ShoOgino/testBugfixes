{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    // nocommit add wrapping:\n    TopScorer inScorer = in.topScorer(context, scoreDocsInOrder, acceptDocs);\n    //return AssertingScorer.wrap(new Random(random.nextLong()), inScorer);\n    return inScorer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db2ba7af1ae7547cae4abc3231fbd5aae59b9fc9","date":1393956681,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    TopScorer inScorer = in.topScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingTopScorer.shouldWrap(inScorer)) {\n      return AssertingTopScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    // nocommit add wrapping:\n    TopScorer inScorer = in.topScorer(context, scoreDocsInOrder, acceptDocs);\n    //return AssertingScorer.wrap(new Random(random.nextLong()), inScorer);\n    return inScorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    TopScorer inScorer = in.topScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingTopScorer.shouldWrap(inScorer)) {\n      return AssertingTopScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["db2ba7af1ae7547cae4abc3231fbd5aae59b9fc9"],"db2ba7af1ae7547cae4abc3231fbd5aae59b9fc9":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["db2ba7af1ae7547cae4abc3231fbd5aae59b9fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":[],"db2ba7af1ae7547cae4abc3231fbd5aae59b9fc9":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5794e5c995c57444b154b01a9f3c837cd530a77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}