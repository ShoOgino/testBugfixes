{"path":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxStats().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteboxStats() throws Exception {\n    final SchemaField analysisField = h.getCore().getLatestSchema().getField(\"multigrams_body\");\n    assertNotNull(analysisField);\n    final String input = \"BROWN fox lAzY  dog xxxyyyzzz\";\n\n    // a function we'll re-use on phrases generated from the above input\n    // the multiplier let's us simulate multiple shards returning the same values\n    BiConsumer<Integer,List<Phrase>> assertions = (mult, phrases) -> {\n      final Phrase brown_fox = phrases.get(1);\n      assertEquals(\"BROWN fox\", brown_fox.getSubSequence());\n      \n      assertEquals(mult * 1, brown_fox.getTTF(\"multigrams_title\"));\n      assertEquals(mult * 1, brown_fox.getDocFreq(\"multigrams_title\"));\n      assertEquals(mult * 1, brown_fox.getConjunctionDocCount(\"multigrams_title\"));\n      \n      assertEquals(mult * 3, brown_fox.getTTF(\"multigrams_body\"));\n      assertEquals(mult * 2, brown_fox.getDocFreq(\"multigrams_body\"));\n      assertEquals(mult * 2, brown_fox.getConjunctionDocCount(\"multigrams_body\"));\n      \n      final Phrase fox_lazy = phrases.get(6);\n      assertEquals(\"fox lAzY\", fox_lazy.getSubSequence());\n      \n      assertEquals(mult * 0, fox_lazy.getTTF(\"multigrams_title\"));\n      assertEquals(mult * 0, fox_lazy.getDocFreq(\"multigrams_title\"));\n      assertEquals(mult * 1, fox_lazy.getConjunctionDocCount(\"multigrams_title\"));\n      \n      assertEquals(mult * 0, fox_lazy.getTTF(\"multigrams_body\"));\n      assertEquals(mult * 0, fox_lazy.getDocFreq(\"multigrams_body\"));\n      assertEquals(mult * 2, fox_lazy.getConjunctionDocCount(\"multigrams_body\"));\n      \n      final Phrase bfld = phrases.get(3);\n      assertEquals(\"BROWN fox lAzY  dog\", bfld.getSubSequence());\n      \n      expectThrows(SolrException.class, () -> { bfld.getTTF(\"multigrams_title\"); });\n      expectThrows(SolrException.class, () -> { bfld.getDocFreq(\"multigrams_title\"); });\n      assertEquals(mult * 0, bfld.getConjunctionDocCount(\"multigrams_title\"));\n      \n      expectThrows(SolrException.class, () -> { bfld.getTTF(\"multigrams_body\"); });\n      expectThrows(SolrException.class, () -> { bfld.getDocFreq(\"multigrams_body\"); });\n      assertEquals(mult * 1, bfld.getConjunctionDocCount(\"multigrams_body\"));\n      \n      final Phrase xyz = phrases.get(phrases.size()-1);\n      \n      assertEquals(\"xxxyyyzzz\", xyz.getSubSequence());\n      assertEquals(mult * 0, xyz.getTTF(\"multigrams_title\"));\n      assertEquals(mult * 0, xyz.getDocFreq(\"multigrams_title\"));\n      assertEquals(mult * 0, xyz.getConjunctionDocCount(\"multigrams_title\"));\n      \n      assertEquals(mult * 0, xyz.getTTF(\"multigrams_body\"));\n      assertEquals(mult * 0, xyz.getDocFreq(\"multigrams_body\"));\n      assertEquals(mult * 0, xyz.getConjunctionDocCount(\"multigrams_body\"));\n      return;\n    };\n\n\n    final List<Phrase> phrasesLocal = Phrase.extractPhrases(input, analysisField, 3, 7);\n    \n    // freshly parsed phrases, w/o any stats populated, all the stats should be 0\n    assertions.accept(0, phrasesLocal);\n\n    // If we populate with our index stats, we should get the basic values in our BiConsumer\n    try (SolrQueryRequest req = req()) {\n      Phrase.populateStats(phrasesLocal, Arrays.asList(\"multigrams_body\",\"multigrams_title\"),\n                           req.getSearcher());\n    }\n    assertions.accept(1, phrasesLocal);\n\n    // likewise, if we create a new freshly parsed set of phrases, and \"merge\" in the previous index stats\n    // (ie: merge results from one shard) we should get the same results\n    final List<Phrase> phrasesMerged = Phrase.extractPhrases(input, analysisField, 3, 7);\n    Phrase.populateStats(phrasesMerged, Phrase.formatShardResponse(phrasesLocal));\n    assertions.accept(1, phrasesMerged);\n\n    // if we merge in a second copy of the same results (ie: two identical shards)\n    // our results should be double what we had before\n    Phrase.populateStats(phrasesMerged, Phrase.formatShardResponse(phrasesLocal));\n    assertions.accept(2, phrasesMerged);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}