{"path":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93f99fbcc3ed1f90a1c2f4130724420f00baa8f2","date":1341663916,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes());\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    IndexableField stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(\"UTF-8\"));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, \"UTF-8\");\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.shutdown();    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.shutdown();    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare its content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare its content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare it's content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare it's content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestBinaryDocument#testBinaryFieldInIndex().mjava","sourceNew":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare its content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare its content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFieldInIndex()\n    throws Exception\n  {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    StoredField binaryFldStored = new StoredField(\"binaryStored\", binaryValStored.getBytes(StandardCharsets.UTF_8));\n    Field stringFldStored = new Field(\"stringStored\", binaryValStored, ft);\n\n    Document doc = new Document();\n    \n    doc.add(binaryFldStored);\n    \n    doc.add(stringFldStored);\n\n    /** test for field count */\n    assertEquals(2, doc.getFields().size());\n    \n    /** add the doc to a ram index */\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = writer.getReader();\n    StoredDocument docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary stored field and compare its content with the original one */\n    BytesRef bytes = docFromReader.getBinaryValue(\"binaryStored\");\n    assertNotNull(bytes);\n    String binaryFldStoredTest = new String(bytes.bytes, bytes.offset, bytes.length, StandardCharsets.UTF_8);\n    assertTrue(binaryFldStoredTest.equals(binaryValStored));\n    \n    /** fetch the string field and compare its content with the original one */\n    String stringFldStoredTest = docFromReader.get(\"stringStored\");\n    assertTrue(stringFldStoredTest.equals(binaryValStored));\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1d028314cced5858683a1bb4741423d0f934257b","7d89d7e4e5101347833eea558851bf4209218619"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","93f99fbcc3ed1f90a1c2f4130724420f00baa8f2"],"7d89d7e4e5101347833eea558851bf4209218619":["1d028314cced5858683a1bb4741423d0f934257b"],"93f99fbcc3ed1f90a1c2f4130724420f00baa8f2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"46d8ada1fff8d18cb197c38c7983225162599948":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","2acf500f78aa12b92e371fd89c719291986b6b90"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1d028314cced5858683a1bb4741423d0f934257b":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["46d8ada1fff8d18cb197c38c7983225162599948"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","1d028314cced5858683a1bb4741423d0f934257b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93f99fbcc3ed1f90a1c2f4130724420f00baa8f2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","2acf500f78aa12b92e371fd89c719291986b6b90","93f99fbcc3ed1f90a1c2f4130724420f00baa8f2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}