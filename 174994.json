{"path":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<Object>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":["c464a33a41a74ada47869a7372815aafb469df1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095","date":1356979334,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<Object>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<Object>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<Object>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese( ResponseBuilder rb, SolrIndexSearcher searcher,\n      DocList docs, int flags ) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper \n      = new MoreLikeThisHandler.MoreLikeThisHelper( p, searcher );\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n\n    SimpleOrderedMap<Object> dbg = null;\n    if( rb.isDebug() ){\n      dbg = new SimpleOrderedMap<Object>();\n    }\n\n    while( iterator.hasNext() ) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n      DocListAndSet sim = mltHelper.getMoreLikeThis( id, 0, rows, null, null, flags );\n      String name = schema.printableUniqueKey( searcher.doc( id ) );\n      mlt.add(name, sim.docList);\n      \n      if( dbg != null ){\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add( \"rawMLTQuery\", mltHelper.getRawMLTQuery().toString() );\n        docDbg.add( \"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString() );\n        docDbg.add( \"realMLTQuery\", mltHelper.getRealMLTQuery().toString() );\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while( mltIte.hasNext() ){\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey( searcher.doc( mltid ) );\n          explains.add( key, searcher.explain( mltHelper.getRealMLTQuery(), mltid ) );\n        }\n        docDbg.add( \"explain\", explains );\n        dbg.add( name, docDbg );\n      }\n    }\n\n    // add debug information\n    if( dbg != null ){\n      rb.addDebugInfo( \"moreLikeThis\", dbg );\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<DocList>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<Object>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<Object>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<Object>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":["c464a33a41a74ada47869a7372815aafb469df1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c464a33a41a74ada47869a7372815aafb469df1a","date":1558062703,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int).mjava","sourceNew":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mltResponse = new SimpleOrderedMap<>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<>();\n    }\n\n    SimpleOrderedMap<Object> interestingTermsResponse = null;\n    MoreLikeThisParams.TermStyle interestingTermsConfig = MoreLikeThisParams.TermStyle.get(p.get(MoreLikeThisParams.INTERESTING_TERMS));\n    List<MoreLikeThisHandler.InterestingTerm> interestingTerms = (interestingTermsConfig == MoreLikeThisParams.TermStyle.NONE)\n        ? null : new ArrayList<>(mltHelper.getMoreLikeThis().getMaxQueryTerms());\n\n    if (interestingTerms != null) {\n      interestingTermsResponse = new SimpleOrderedMap<>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n\n      DocListAndSet similarDocuments = mltHelper.getMoreLikeThis(id, 0, rows, null, interestingTerms,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mltResponse.add(name, similarDocuments.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<>();\n        DocIterator similarDocumentsIterator = similarDocuments.docList.iterator();\n        while (similarDocumentsIterator.hasNext()) {\n          int mltid = similarDocumentsIterator.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n\n      if (interestingTermsResponse != null) {\n        if (interestingTermsConfig == MoreLikeThisParams.TermStyle.DETAILS) {\n          SimpleOrderedMap<Float> interestingTermsWithScore = new SimpleOrderedMap<>();\n          for (MoreLikeThisHandler.InterestingTerm interestingTerm : interestingTerms) {\n            interestingTermsWithScore.add(interestingTerm.term.toString(), interestingTerm.boost);\n          }\n          interestingTermsResponse.add(name, interestingTermsWithScore);\n        } else {\n          List<String> interestingTermsString = new ArrayList<>(interestingTerms.size());\n          for (MoreLikeThisHandler.InterestingTerm interestingTerm : interestingTerms) {\n            interestingTermsString.add(interestingTerm.term.toString());\n          }\n          interestingTermsResponse.add(name, interestingTermsString);\n        }\n      }\n    }\n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    // add Interesting Terms\n    if (interestingTermsResponse != null) {\n      rb.rsp.add(\"interestingTerms\", interestingTermsResponse);\n    }\n    return mltResponse;\n  }\n\n","sourceOld":"  NamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n      SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n    SolrParams p = rb.req.getParams();\n    IndexSchema schema = searcher.getSchema();\n    MoreLikeThisHandler.MoreLikeThisHelper mltHelper = new MoreLikeThisHandler.MoreLikeThisHelper(\n        p, searcher);\n    NamedList<DocList> mlt = new SimpleOrderedMap<>();\n    DocIterator iterator = docs.iterator();\n    \n    SimpleOrderedMap<Object> dbg = null;\n    if (rb.isDebug()) {\n      dbg = new SimpleOrderedMap<>();\n    }\n    \n    while (iterator.hasNext()) {\n      int id = iterator.nextDoc();\n      int rows = p.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      DocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null,\n          flags);\n      String name = schema.printableUniqueKey(searcher.doc(id));\n      mlt.add(name, sim.docList);\n      \n      if (dbg != null) {\n        SimpleOrderedMap<Object> docDbg = new SimpleOrderedMap<>();\n        docDbg.add(\"rawMLTQuery\", mltHelper.getRawMLTQuery().toString());\n        docDbg\n            .add(\"boostedMLTQuery\", mltHelper.getBoostedMLTQuery().toString());\n        docDbg.add(\"realMLTQuery\", mltHelper.getRealMLTQuery().toString());\n        SimpleOrderedMap<Object> explains = new SimpleOrderedMap<>();\n        DocIterator mltIte = sim.docList.iterator();\n        while (mltIte.hasNext()) {\n          int mltid = mltIte.nextDoc();\n          String key = schema.printableUniqueKey(searcher.doc(mltid));\n          explains.add(key,\n              searcher.explain(mltHelper.getRealMLTQuery(), mltid));\n        }\n        docDbg.add(\"explain\", explains);\n        dbg.add(name, docDbg);\n      }\n    }\n    \n    // add debug information\n    if (dbg != null) {\n      rb.addDebugInfo(\"moreLikeThis\", dbg);\n    }\n    return mlt;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","8d701c455e4783533e275f01bf3e813737b7e593"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c464a33a41a74ada47869a7372815aafb469df1a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["c26f00b574427b55127e869b935845554afde1fa"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c464a33a41a74ada47869a7372815aafb469df1a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c464a33a41a74ada47869a7372815aafb469df1a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c464a33a41a74ada47869a7372815aafb469df1a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}