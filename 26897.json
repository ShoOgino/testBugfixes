{"path":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":null,"sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["1da8d55113b689b06716246649de6f62430f15c0","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}