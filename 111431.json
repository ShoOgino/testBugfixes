{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  protected synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < perThreads.length; i++) {\n      final ThreadState threadState = perThreads[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  protected synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < perThreads.length; i++) {\n      final ThreadState threadState = perThreads[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  protected synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  protected synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < perThreads.length; i++) {\n      final ThreadState threadState = perThreads[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","date":1335212037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  protected synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.resetWriter(null);\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n    \n    // In case any threads are waiting for indexing:\n    notifyAll();\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.size(); i++) {\n      final ThreadState threadState = threadStates.get(i);\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n    \n    // In case any threads are waiting for indexing:\n    notifyAll();\n  }\n\n","sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.length; i++) {\n      final ThreadState threadState = threadStates[i];\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n    \n    // In case any threads are waiting for indexing:\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#deactivateUnreleasedStates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Deactivate all unreleased threadstates \n   */\n  synchronized void deactivateUnreleasedStates() {\n    for (int i = numThreadStatesActive; i < threadStates.size(); i++) {\n      final ThreadState threadState = threadStates.get(i);\n      threadState.lock();\n      try {\n        threadState.deactivate();\n      } finally {\n        threadState.unlock();\n      }\n    }\n    \n    // In case any threads are waiting for indexing:\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["7af110b00ea8df9429309d83e38e0533d82e144f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8881d151c969a46b4293caa77faa7ecd63239100":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8881d151c969a46b4293caa77faa7ecd63239100"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["839ca1793cd9a8eb5bd7c7c62918192d47972f73","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8881d151c969a46b4293caa77faa7ecd63239100":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["8881d151c969a46b4293caa77faa7ecd63239100"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}