{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340c74377cb6e5e48360c014b3fc076221746443","date":1476809457,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad214b6ec1400de3c40b6c120126abe89d51a9ce","date":1476818670,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            docID = target;\n            return true;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    final LongValues values = getNumeric(entry);\n    return new NumericDocValues() {\n\n      int doc = -1;\n      long value;\n\n      @Override\n      public long longValue() throws IOException {\n        return value;\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int doc = target; doc < maxDoc; ++doc) {\n          value = values.get(doc);\n          if (value != 0 || docsWithField.get(doc)) {\n            return this.doc = doc;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        doc = target;\n        value = values.get(doc);\n        return value != 0 || docsWithField.get(doc);\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","340c74377cb6e5e48360c014b3fc076221746443"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"cc018b79379c67835b40b1259cd3dc931df60944":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","cc018b79379c67835b40b1259cd3dc931df60944"],"85b9829d27224bda451a373a47f081afb1c664b8":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"340c74377cb6e5e48360c014b3fc076221746443":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["ad214b6ec1400de3c40b6c120126abe89d51a9ce","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["ad214b6ec1400de3c40b6c120126abe89d51a9ce","340c74377cb6e5e48360c014b3fc076221746443"],"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"340c74377cb6e5e48360c014b3fc076221746443":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}