{"path":"solr/core/src/test/org/apache/solr/cloud/TestUtilizeNode#getReplicaList(String,JettySolrRunner).mjava","commits":[{"id":"e0659d1f3381eb2a3f31dec2bcb97d75097e8537","date":1519949186,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestUtilizeNode#getReplicaList(String,JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of all Replicas for the specified collection hosted on the specified node using\n   * an <em>uncached</em> ClusterState call (so it should be authoritative from ZK).\n   */\n  private List<Replica> getReplicaList(String collectionName, JettySolrRunner jettyNode) throws IOException {\n    DocCollection collection = cluster.getSolrClient().getClusterStateProvider()\n      // we do *NOT* want to trust the cache, because anytime we call this method we have just\n      // done a lot of mucking with the cluster\n      .getClusterState().getCollectionOrNull(collectionName, false);\n    \n    List<Replica> results = new ArrayList<>(3);\n    collection.forEachReplica((s, replica) -> {\n        if (replica.getNodeName().equals(jettyNode.getNodeName())) {\n        results.add(replica);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"688c01b5faa967bfc05d50d34bbdcda362ed4514","date":1539708840,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestUtilizeNode#getReplicaList(String,JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestUtilizeNode#getReplicaList(String,JettySolrRunner).mjava","sourceNew":"  /**\n   * Returns a list of all Replicas for the specified collection hosted on the specified node using\n   * an <em>uncached</em> ClusterState call (so it should be authoritative from ZK).\n   */\n  private List<Replica> getReplicaList(String collectionName, JettySolrRunner jettyNode) throws IOException {\n    DocCollection collection = cluster.getSolrClient().getClusterStateProvider()\n      // we do *NOT* want to trust the cache, because anytime we call this method we have just\n      // done a lot of mucking with the cluster\n      .getClusterState().getCollectionOrNull(collectionName, false);\n    \n    List<Replica> results = new ArrayList<>(3);\n    if (collection != null) {\n      collection.forEachReplica((s, replica) -> {\n        if (replica.getNodeName().equals(jettyNode.getNodeName())) {\n          results.add(replica);\n        }\n      });\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of all Replicas for the specified collection hosted on the specified node using\n   * an <em>uncached</em> ClusterState call (so it should be authoritative from ZK).\n   */\n  private List<Replica> getReplicaList(String collectionName, JettySolrRunner jettyNode) throws IOException {\n    DocCollection collection = cluster.getSolrClient().getClusterStateProvider()\n      // we do *NOT* want to trust the cache, because anytime we call this method we have just\n      // done a lot of mucking with the cluster\n      .getClusterState().getCollectionOrNull(collectionName, false);\n    \n    List<Replica> results = new ArrayList<>(3);\n    collection.forEachReplica((s, replica) -> {\n        if (replica.getNodeName().equals(jettyNode.getNodeName())) {\n        results.add(replica);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestUtilizeNode#getReplicaList(String,JettySolrRunner).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a list of all Replicas for the specified collection hosted on the specified node using\n   * an <em>uncached</em> ClusterState call (so it should be authoritative from ZK).\n   */\n  private List<Replica> getReplicaList(String collectionName, JettySolrRunner jettyNode) throws IOException {\n    DocCollection collection = cluster.getSolrClient().getClusterStateProvider()\n      // we do *NOT* want to trust the cache, because anytime we call this method we have just\n      // done a lot of mucking with the cluster\n      .getClusterState().getCollectionOrNull(collectionName, false);\n    \n    List<Replica> results = new ArrayList<>(3);\n    if (collection != null) {\n      collection.forEachReplica((s, replica) -> {\n        if (replica.getNodeName().equals(jettyNode.getNodeName())) {\n          results.add(replica);\n        }\n      });\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0659d1f3381eb2a3f31dec2bcb97d75097e8537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["688c01b5faa967bfc05d50d34bbdcda362ed4514"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"688c01b5faa967bfc05d50d34bbdcda362ed4514":["e0659d1f3381eb2a3f31dec2bcb97d75097e8537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"e0659d1f3381eb2a3f31dec2bcb97d75097e8537":["688c01b5faa967bfc05d50d34bbdcda362ed4514"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0659d1f3381eb2a3f31dec2bcb97d75097e8537"],"688c01b5faa967bfc05d50d34bbdcda362ed4514":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}