{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","commits":[{"id":"791652abeeebb8642f54a7b42ca914c55805479a","date":1413382171,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   * @param httpClient\n   *          the {@see HttpClient} instance to be used for all requests. The\n   *          provided httpClient should use a multi-threaded connection manager.\n   */\n  public CloudSolrServer(String zkHost, HttpClient httpClient)  {\n    this.zkHost = zkHost;\n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9fe7a9615aadd6e7916a0d67b757a33986c7c06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9fe7a9615aadd6e7916a0d67b757a33986c7c06","date":1413399059,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The\n   *          provided httpClient should use a multi-threaded connection manager.\n   */\n  public CloudSolrServer(String zkHost, HttpClient httpClient)  {\n    this.zkHost = zkHost;\n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   * @param httpClient\n   *          the {@see HttpClient} instance to be used for all requests. The\n   *          provided httpClient should use a multi-threaded connection manager.\n   */\n  public CloudSolrServer(String zkHost, HttpClient httpClient)  {\n    this.zkHost = zkHost;\n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":["791652abeeebb8642f54a7b42ca914c55805479a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The\n   *          provided httpClient should use a multi-threaded connection manager.\n   */\n  public CloudSolrServer(String zkHost, HttpClient httpClient)  {\n    this.zkHost = zkHost;\n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","sourceNew":"  public CloudSolrServer(String zkHost, HttpClient httpClient) {\n    super(zkHost, httpClient);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   *\n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   * @param httpClient\n   *          the {@link HttpClient} instance to be used for all requests. The\n   *          provided httpClient should use a multi-threaded connection manager.\n   */\n  public CloudSolrServer(String zkHost, HttpClient httpClient)  {\n    this.zkHost = zkHost;\n    this.clientIsInternal = httpClient == null;\n    this.myClient = httpClient == null ? HttpClientUtil.createClient(null) : httpClient;\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n    lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0080a8fdc299a09124dea014ed206981c1b8c54","date":1420037360,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String,HttpClient).mjava","sourceNew":null,"sourceOld":"  public CloudSolrServer(String zkHost, HttpClient httpClient) {\n    super(zkHost, httpClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9fe7a9615aadd6e7916a0d67b757a33986c7c06"],"d9fe7a9615aadd6e7916a0d67b757a33986c7c06":["791652abeeebb8642f54a7b42ca914c55805479a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["d9fe7a9615aadd6e7916a0d67b757a33986c7c06"],"791652abeeebb8642f54a7b42ca914c55805479a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"d9fe7a9615aadd6e7916a0d67b757a33986c7c06":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","791652abeeebb8642f54a7b42ca914c55805479a"],"bafca15d8e408346a67f4282ad1143b88023893b":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"791652abeeebb8642f54a7b42ca914c55805479a":["d9fe7a9615aadd6e7916a0d67b757a33986c7c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0080a8fdc299a09124dea014ed206981c1b8c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}