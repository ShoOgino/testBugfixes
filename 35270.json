{"path":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected TestTag[] pullTagsFromResponse(SolrQueryRequest req, SolrQueryResponse rsp ) throws IOException {\n    NamedList rspValues = rsp.getValues();\n    Map<String, String> matchingNames = new HashMap<>();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocList docList = (DocList) rspValues.get(\"response\");\n    DocIterator iter = docList.iterator();\n    while (iter.hasNext()) {\n      int docId = iter.next();\n      Document doc = searcher.doc(docId);\n      String id = doc.getField(\"id\").stringValue();\n      String name = lookupByName(doc.get(\"name\"));\n      assertEquals(\"looking for \"+name, NAMES.indexOf(name)+\"\", id);\n      matchingNames.put(id, name);\n    }\n\n    //build TestTag[] aTags from response ('a' is actual)\n    List<NamedList> mTagsList = (List<NamedList>) rspValues.get(\"tags\");\n    List<TestTag> aTags = new ArrayList<>();\n    for (NamedList map : mTagsList) {\n      List<String> foundIds = (List<String>) map.get(\"ids\");\n      for (String id  : foundIds) {\n        aTags.add(new TestTag(\n            ((Number)map.get(\"startOffset\")).intValue(),\n            ((Number)map.get(\"endOffset\")).intValue(),\n            null,\n            matchingNames.get(id)));\n      }\n    }\n    return aTags.toArray(new TestTag[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected TestTag[] pullTagsFromResponse(SolrQueryRequest req, SolrQueryResponse rsp ) throws IOException {\n    NamedList rspValues = rsp.getValues();\n    Map<String, String> matchingNames = new HashMap<>();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocList docList = (DocList) rspValues.get(\"response\");\n    DocIterator iter = docList.iterator();\n    while (iter.hasNext()) {\n      int docId = iter.next();\n      Document doc = searcher.doc(docId);\n      String id = doc.getField(\"id\").stringValue();\n      String name = lookupByName(doc.get(\"name\"));\n      assertEquals(\"looking for \"+name, NAMES.indexOf(name)+\"\", id);\n      matchingNames.put(id, name);\n    }\n\n    //build TestTag[] aTags from response ('a' is actual)\n    List<NamedList> mTagsList = (List<NamedList>) rspValues.get(\"tags\");\n    List<TestTag> aTags = new ArrayList<>();\n    for (NamedList map : mTagsList) {\n      List<String> foundIds = (List<String>) map.get(\"ids\");\n      for (String id  : foundIds) {\n        aTags.add(new TestTag(\n            ((Number)map.get(\"startOffset\")).intValue(),\n            ((Number)map.get(\"endOffset\")).intValue(),\n            null,\n            matchingNames.get(id)));\n      }\n    }\n    return aTags.toArray(new TestTag[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected TestTag[] pullTagsFromResponse(SolrQueryRequest req, SolrQueryResponse rsp ) throws IOException {\n    NamedList rspValues = rsp.getValues();\n    Map<String, String> matchingNames = new HashMap<>();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocList docList = (DocList) rspValues.get(\"response\");\n    DocIterator iter = docList.iterator();\n    while (iter.hasNext()) {\n      int docId = iter.next();\n      Document doc = searcher.doc(docId);\n      String id = doc.getField(\"id\").stringValue();\n      String name = lookupByName(doc.get(\"name\"));\n      assertEquals(\"looking for \"+name, NAMES.indexOf(name)+\"\", id);\n      matchingNames.put(id, name);\n    }\n\n    //build TestTag[] aTags from response ('a' is actual)\n    List<NamedList> mTagsList = (List<NamedList>) rspValues.get(\"tags\");\n    List<TestTag> aTags = new ArrayList<>();\n    for (NamedList map : mTagsList) {\n      List<String> foundIds = (List<String>) map.get(\"ids\");\n      for (String id  : foundIds) {\n        aTags.add(new TestTag(\n            ((Number)map.get(\"startOffset\")).intValue(),\n            ((Number)map.get(\"endOffset\")).intValue(),\n            null,\n            matchingNames.get(id)));\n      }\n    }\n    return aTags.toArray(new TestTag[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTestCase#pullTagsFromResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected TestTag[] pullTagsFromResponse(SolrQueryRequest req, SolrQueryResponse rsp ) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList rspValues = rsp.getValues();\n    Map<String, String> matchingNames = new HashMap<>();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocList docList = (DocList) rspValues.get(\"response\");\n    DocIterator iter = docList.iterator();\n    while (iter.hasNext()) {\n      int docId = iter.next();\n      Document doc = searcher.doc(docId);\n      String id = doc.getField(\"id\").stringValue();\n      String name = lookupByName(doc.get(\"name\"));\n      assertEquals(\"looking for \"+name, NAMES.indexOf(name)+\"\", id);\n      matchingNames.put(id, name);\n    }\n\n    //build TestTag[] aTags from response ('a' is actual)\n    @SuppressWarnings({\"rawtypes\"})\n    List<NamedList> mTagsList = (List<NamedList>) rspValues.get(\"tags\");\n    List<TestTag> aTags = new ArrayList<>();\n    for (@SuppressWarnings({\"rawtypes\"})NamedList map : mTagsList) {\n      List<String> foundIds = (List<String>) map.get(\"ids\");\n      for (String id  : foundIds) {\n        aTags.add(new TestTag(\n            ((Number)map.get(\"startOffset\")).intValue(),\n            ((Number)map.get(\"endOffset\")).intValue(),\n            null,\n            matchingNames.get(id)));\n      }\n    }\n    return aTags.toArray(new TestTag[0]);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected TestTag[] pullTagsFromResponse(SolrQueryRequest req, SolrQueryResponse rsp ) throws IOException {\n    NamedList rspValues = rsp.getValues();\n    Map<String, String> matchingNames = new HashMap<>();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DocList docList = (DocList) rspValues.get(\"response\");\n    DocIterator iter = docList.iterator();\n    while (iter.hasNext()) {\n      int docId = iter.next();\n      Document doc = searcher.doc(docId);\n      String id = doc.getField(\"id\").stringValue();\n      String name = lookupByName(doc.get(\"name\"));\n      assertEquals(\"looking for \"+name, NAMES.indexOf(name)+\"\", id);\n      matchingNames.put(id, name);\n    }\n\n    //build TestTag[] aTags from response ('a' is actual)\n    List<NamedList> mTagsList = (List<NamedList>) rspValues.get(\"tags\");\n    List<TestTag> aTags = new ArrayList<>();\n    for (NamedList map : mTagsList) {\n      List<String> foundIds = (List<String>) map.get(\"ids\");\n      for (String id  : foundIds) {\n        aTags.add(new TestTag(\n            ((Number)map.get(\"startOffset\")).intValue(),\n            ((Number)map.get(\"endOffset\")).intValue(),\n            null,\n            matchingNames.get(id)));\n      }\n    }\n    return aTags.toArray(new TestTag[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}