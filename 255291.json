{"path":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","commits":[{"id":"ccf4668aabc4ca5177fedbb7c24ad1d47011385f","date":1363016812,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = dataDir + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TEMP_DIR + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    createTempDir();\n    tmpSolrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName()).getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = dataDir + File.separator + SolrTestCaseJ4Test.class.getSimpleName() + System.currentTimeMillis();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19fd94680387e8cc4f7f4c2c41e216582493d2c8","date":1424319108,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrTestCaseJ4Test#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n    // Core discovery will default to the name of the dir the core.properties file is in. So if everything else is\n    // OK as defaults, just the _presence_ of this file is sufficient.\n    FileUtils.touch(new File(tmpSolrHome, \"core0/core.properties\"));\n    FileUtils.touch(new File(tmpSolrHome, \"core1/core.properties\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // Create a temporary directory that holds a core NOT named \"collection1\". Use the smallest configuration sets\n    // we can so we don't copy that much junk around.\n    tmpSolrHome = createTempDir().toFile().getAbsolutePath();\n\n    File subHome = new File(new File(tmpSolrHome, \"core0\"), \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema-tiny.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig-minimal.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    FileUtils.copyDirectory(new File(tmpSolrHome, \"core0\"), new File(tmpSolrHome, \"core1\"));\n\n    FileUtils.copyFile(getFile(\"solr/solr-multicore.xml\"), new File(tmpSolrHome, \"solr.xml\"));\n\n    initCore(\"solrconfig-minimal.xml\", \"schema-tiny.xml\", tmpSolrHome, \"core1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19fd94680387e8cc4f7f4c2c41e216582493d2c8":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"f33ef255480d446ae7aa03506be85d0356a9850f":["ccf4668aabc4ca5177fedbb7c24ad1d47011385f"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ccf4668aabc4ca5177fedbb7c24ad1d47011385f","f33ef255480d446ae7aa03506be85d0356a9850f"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["f33ef255480d446ae7aa03506be85d0356a9850f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccf4668aabc4ca5177fedbb7c24ad1d47011385f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["f33ef255480d446ae7aa03506be85d0356a9850f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19fd94680387e8cc4f7f4c2c41e216582493d2c8"]},"commit2Childs":{"19fd94680387e8cc4f7f4c2c41e216582493d2c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccf4668aabc4ca5177fedbb7c24ad1d47011385f"],"ccf4668aabc4ca5177fedbb7c24ad1d47011385f":["f33ef255480d446ae7aa03506be85d0356a9850f","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f4abec28b874149a7223e32cc7a01704c27790de":["19fd94680387e8cc4f7f4c2c41e216582493d2c8"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}