{"path":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5","date":1376515204,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","sourceOld":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","sourceOld":"  private static DirectoryReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      DirectoryReader r = DirectoryReader.open(d);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e1e5716176800cde7e6ddfb1dde2a29f676f2b","date":1398098452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: now create empty index\");\n    }\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: done create empty index\");\n    }\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: now create empty index\");\n    }\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.close();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: done create empty index\");\n    }\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: now create empty index\");\n    }\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: done create empty index\");\n    }\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef","date":1429503225,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":null,"sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDocs) throws IOException {\n    assert numDocs > 0;\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: now create empty index\");\n    }\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random)));\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(new Document());\n    }\n    w.forceMerge(1);\n    w.close();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"NOTE: QueryUtils: done create empty index\");\n    }\n    DirectoryReader reader = DirectoryReader.open(d);\n    return new AllDeletedFilterReader(LuceneTestCase.getOnlySegmentReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["87e1e5716176800cde7e6ddfb1dde2a29f676f2b"],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"87e1e5716176800cde7e6ddfb1dde2a29f676f2b":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"]},"commit2Childs":{"da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["da6a6dcc9fdd946001f6161fb9c16afdb5ed84c5","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"87e1e5716176800cde7e6ddfb1dde2a29f676f2b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["87e1e5716176800cde7e6ddfb1dde2a29f676f2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}