{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"347c6da08ee2df2551ec05ebb1754e685937c1f3","date":1294422164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(newField(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c7f8e68717c68517265937c911e1ce9f25750247":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["347c6da08ee2df2551ec05ebb1754e685937c1f3"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","347c6da08ee2df2551ec05ebb1754e685937c1f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["efb7a19703a037c29e30440260d393500febc1f4"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["c7f8e68717c68517265937c911e1ce9f25750247"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"347c6da08ee2df2551ec05ebb1754e685937c1f3":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["347c6da08ee2df2551ec05ebb1754e685937c1f3","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","347c6da08ee2df2551ec05ebb1754e685937c1f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","347c6da08ee2df2551ec05ebb1754e685937c1f3"],"c7f8e68717c68517265937c911e1ce9f25750247":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["c7f8e68717c68517265937c911e1ce9f25750247"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"347c6da08ee2df2551ec05ebb1754e685937c1f3":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}