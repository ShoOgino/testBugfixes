{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1); // denseRankPower\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1); // denseRankPower\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset); // docsWithFieldOffset\n      values = normsProducer.getNorms(field);\n      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n      meta.writeShort(jumpTableEntryCount);\n      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer()); // normsOffset\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsConsumer#addNormsField(FieldInfo,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, NormsProducer normsProducer) throws IOException {\n    NumericDocValues values = normsProducer.getNorms(field);\n    int numDocsWithValue = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithValue++;\n      long v = values.longValue();\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    assert numDocsWithValue <= maxDoc;\n\n    meta.writeInt(field.number);\n\n    if (numDocsWithValue == 0) {\n      meta.writeLong(-2); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1); // denseRankPower\n    } else if (numDocsWithValue == maxDoc) {\n      meta.writeLong(-1); // docsWithFieldOffset\n      meta.writeLong(0L); // docsWithFieldLength\n      meta.writeShort((short) -1); // jumpTableEntryCount\n      meta.writeByte((byte) -1); // denseRankPower\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset); // docsWithFieldOffset\n      values = normsProducer.getNorms(field);\n      final short jumpTableEntryCount = IndexedDISI.writeBitSet(values, data, IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n      meta.writeLong(data.getFilePointer() - offset); // docsWithFieldLength\n      meta.writeShort(jumpTableEntryCount);\n      meta.writeByte(IndexedDISI.DEFAULT_DENSE_RANK_POWER);\n    }\n\n    meta.writeInt(numDocsWithValue);\n    int numBytesPerValue = numBytesPerValue(min, max);\n\n    meta.writeByte((byte) numBytesPerValue);\n    if (numBytesPerValue == 0) {\n      meta.writeLong(min);\n    } else {\n      meta.writeLong(data.getFilePointer()); // normsOffset\n      values = normsProducer.getNorms(field);\n      writeValues(values, numBytesPerValue, data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}