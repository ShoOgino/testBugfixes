{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    Files.deleteIfExists(output.toPath());\n\n    ArrayList<File> merges = new ArrayList<>();\n    boolean success3 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            boolean success2 = false;\n            try {\n              mergePartitions(merges, intermediate);\n              success2 = true;\n            } finally {\n              if (success2) {\n                IOUtils.deleteFilesIfExist(merges);\n              } else {\n                IOUtils.deleteFilesIgnoringExceptions(merges);\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success3 = true;\n    } finally {\n      if (success3) {\n        IOUtils.deleteFilesIfExist(merges);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(merges);\n        IOUtils.deleteFilesIgnoringExceptions(output);\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<>();\n    boolean success2 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            try {\n              mergePartitions(merges, intermediate);\n            } finally {\n              for (File file : merges) {\n                file.delete();\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success2 = true;\n    } finally {\n      for (File file : merges) {\n        file.delete();\n      }\n      if (!success2) {\n        output.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26","fa4688b7aaba64836010dee5308f052574ec398d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(Path,Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(Path input, Path output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    Files.deleteIfExists(output);\n\n    ArrayList<Path> merges = new ArrayList<>();\n    boolean success3 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            Path intermediate = Files.createTempFile(tempDirectory, \"sort\", \"intermediate\");\n            boolean success2 = false;\n            try {\n              mergePartitions(merges, intermediate);\n              success2 = true;\n            } finally {\n              if (success2) {\n                IOUtils.deleteFilesIfExist(merges);\n              } else {\n                IOUtils.deleteFilesIgnoringExceptions(merges);\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        Path single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        try {\n          Files.move(single, output, StandardCopyOption.ATOMIC_MOVE);\n        } catch (IOException | UnsupportedOperationException e) {\n          Files.copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success3 = true;\n    } finally {\n      if (success3) {\n        IOUtils.deleteFilesIfExist(merges);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(merges);\n        IOUtils.deleteFilesIgnoringExceptions(output);\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    Files.deleteIfExists(output.toPath());\n\n    ArrayList<File> merges = new ArrayList<>();\n    boolean success3 = false;\n    try {\n      ByteSequencesReader is = new ByteSequencesReader(input);\n      boolean success = false;\n      try {\n        int lines = 0;\n        while ((lines = readPartition(is)) > 0) {\n          merges.add(sortPartition(lines));\n          sortInfo.tempMergeFiles++;\n          sortInfo.lines += lines;\n\n          // Handle intermediate merges.\n          if (merges.size() == maxTempFiles) {\n            File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n            boolean success2 = false;\n            try {\n              mergePartitions(merges, intermediate);\n              success2 = true;\n            } finally {\n              if (success2) {\n                IOUtils.deleteFilesIfExist(merges);\n              } else {\n                IOUtils.deleteFilesIgnoringExceptions(merges);\n              }\n              merges.clear();\n              merges.add(intermediate);\n            }\n            sortInfo.tempMergeFiles++;\n          }\n        }\n        success = true;\n      } finally {\n        if (success)\n          IOUtils.close(is);\n        else\n          IOUtils.closeWhileHandlingException(is);\n      }\n\n      // One partition, try to rename or copy if unsuccessful.\n      if (merges.size() == 1) {     \n        File single = merges.get(0);\n        // If simple rename doesn't work this means the output is\n        // on a different volume or something. Copy the input then.\n        if (!single.renameTo(output)) {\n          copy(single, output);\n        }\n      } else { \n        // otherwise merge the partitions with a priority queue.\n        mergePartitions(merges, output);\n      }\n      success3 = true;\n    } finally {\n      if (success3) {\n        IOUtils.deleteFilesIfExist(merges);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(merges);\n        IOUtils.deleteFilesIgnoringExceptions(output);\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}