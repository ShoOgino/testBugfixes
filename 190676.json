{"path":"solr/core/src/java/org/apache/solr/update/VersionInfo#getMaxVersionFromIndexedPoints(IndexSearcher).mjava","commits":[{"id":"1248476067f7f652e875bd77a9a3faeecde50430","date":1497567228,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getMaxVersionFromIndexedPoints(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private long getMaxVersionFromIndexedPoints(IndexSearcher searcher) throws IOException {\n    assert versionField.getType().isPointField();\n    \n    final String versionFieldName = versionField.getName();\n    final byte[] maxBytes = PointValues.getMaxPackedValue(searcher.getIndexReader(), versionFieldName);\n    if (null == maxBytes) {\n      return 0L;\n    }\n    final Object maxObj = versionField.getType().toObject(versionField, new BytesRef(maxBytes));\n    if (null == maxObj || ! ( maxObj instanceof Number) ) {\n      // HACK: aparently nothing asserts that the FieldType is numeric (let alone a Long???)\n      log.error(\"Unable to convert MAX byte[] from Points for {} in index\", versionFieldName);\n      return 0L;\n    }\n    \n    final long max = ((Number)maxObj).longValue();\n    log.debug(\"Found MAX value {} from Points for {} in index\", max, versionFieldName);\n    return max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getMaxVersionFromIndexedPoints(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private long getMaxVersionFromIndexedPoints(IndexSearcher searcher) throws IOException {\n    assert versionField.getType().isPointField();\n    \n    final String versionFieldName = versionField.getName();\n    final byte[] maxBytes = PointValues.getMaxPackedValue(searcher.getIndexReader(), versionFieldName);\n    if (null == maxBytes) {\n      return 0L;\n    }\n    final Object maxObj = versionField.getType().toObject(versionField, new BytesRef(maxBytes));\n    if (null == maxObj || ! ( maxObj instanceof Number) ) {\n      // HACK: aparently nothing asserts that the FieldType is numeric (let alone a Long???)\n      log.error(\"Unable to convert MAX byte[] from Points for {} in index\", versionFieldName);\n      return 0L;\n    }\n    \n    final long max = ((Number)maxObj).longValue();\n    log.debug(\"Found MAX value {} from Points for {} in index\", max, versionFieldName);\n    return max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getMaxVersionFromIndexedPoints(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private long getMaxVersionFromIndexedPoints(IndexSearcher searcher) throws IOException {\n    assert versionField.getType().isPointField();\n    \n    final String versionFieldName = versionField.getName();\n    final byte[] maxBytes = PointValues.getMaxPackedValue(searcher.getIndexReader(), versionFieldName);\n    if (null == maxBytes) {\n      return 0L;\n    }\n    final Object maxObj = versionField.getType().toObject(versionField, new BytesRef(maxBytes));\n    if (null == maxObj || ! ( maxObj instanceof Number) ) {\n      // HACK: aparently nothing asserts that the FieldType is numeric (let alone a Long???)\n      log.error(\"Unable to convert MAX byte[] from Points for {} in index\", versionFieldName);\n      return 0L;\n    }\n    \n    final long max = ((Number)maxObj).longValue();\n    log.debug(\"Found MAX value {} from Points for {} in index\", max, versionFieldName);\n    return max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1248476067f7f652e875bd77a9a3faeecde50430":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1248476067f7f652e875bd77a9a3faeecde50430"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1248476067f7f652e875bd77a9a3faeecde50430"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1248476067f7f652e875bd77a9a3faeecde50430":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1248476067f7f652e875bd77a9a3faeecde50430","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}