{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new FacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new FacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new FacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new FacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = DirectoryReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}