{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testStoreEntry().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testStoreEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testStoreEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeEntry(ServerBaseEntry)'\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void testStoreEntry() throws StorageException {\n        Storage storage = this.controller.getStorage();\n        try {\n            ServerBaseEntry e = createServerBaseEntry();\n            storage.storeEntry(e);\n            fail(\"excption exp. for feed for the entry\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.storeEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        storeServerBaseFeed();\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage = this.controller.getStorage();\n        Query query = getContainer().query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry storedEntry = (BaseEntry) resultSet.next();\n        assertEquals(\"1\", storedEntry.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(1).getId()); // last post\n        // ->\n        // previously\n        // created\n        assertEquals(e1.getId(), feed.getEntries().get(0).getId()); // first pos\n        // -> last\n        // created\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeEntry(ServerBaseEntry)'\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void testStoreEntry() throws StorageException {\n        Storage storage = this.controller.getStorage();\n        try {\n            ServerBaseEntry e = createServerBaseEntry();\n            storage.storeEntry(e);\n            fail(\"excption exp. for feed for the entry\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.storeEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        storeServerBaseFeed();\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage = this.controller.getStorage();\n        Query query = getContainer().query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry storedEntry = (BaseEntry) resultSet.next();\n        assertEquals(\"1\", storedEntry.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(1).getId()); // last post\n        // ->\n        // previously\n        // created\n        assertEquals(e1.getId(), feed.getEntries().get(0).getId()); // first pos\n        // -> last\n        // created\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testStoreEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testStoreEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeEntry(ServerBaseEntry)'\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void testStoreEntry() throws StorageException {\n        Storage storage = this.controller.getStorage();\n        try {\n            ServerBaseEntry e = createServerBaseEntry();\n            storage.storeEntry(e);\n            fail(\"excption exp. for feed for the entry\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.storeEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        storeServerBaseFeed();\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage = this.controller.getStorage();\n        Query query = getContainer().query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry storedEntry = (BaseEntry) resultSet.next();\n        assertEquals(\"1\", storedEntry.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(1).getId()); // last post\n        // ->\n        // previously\n        // created\n        assertEquals(e1.getId(), feed.getEntries().get(0).getId()); // first pos\n        // -> last\n        // created\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeEntry(ServerBaseEntry)'\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void testStoreEntry() throws StorageException {\n        Storage storage = this.controller.getStorage();\n        try {\n            ServerBaseEntry e = createServerBaseEntry();\n            storage.storeEntry(e);\n            fail(\"excption exp. for feed for the entry\");\n        } catch (StorageException e) {\n            //\n        }\n\n        try {\n\n            storage.storeEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n\n        storeServerBaseFeed();\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage = this.controller.getStorage();\n        Query query = getContainer().query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(1, resultSet.size());\n        BaseEntry storedEntry = (BaseEntry) resultSet.next();\n        assertEquals(\"1\", storedEntry.getVersionId());\n\n        ServerBaseFeed bFeed = new ServerBaseFeed();\n        bFeed.setItemsPerPage(25);\n        bFeed.setId(FEEDID);\n        bFeed.setStartIndex(1);\n        bFeed.setServiceType(SERVICENAME);\n        BaseFeed<BaseFeed, BaseEntry> feed = storage.getFeed(bFeed);\n        assertEquals(2, feed.getEntries().size());\n        assertEquals(e.getId(), feed.getEntries().get(1).getId()); // last post\n        // ->\n        // previously\n        // created\n        assertEquals(e1.getId(), feed.getEntries().get(0).getId()); // first pos\n        // -> last\n        // created\n        assertEquals(feed.getUpdated(), feed.getEntries().get(0).getUpdated());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}