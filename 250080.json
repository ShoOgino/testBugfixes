{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTestDeepPivotStats().mjava","commits":[{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTestDeepPivotStats().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDeepPivotStats() throws Exception {\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\", \n                               \"facet\", \"true\", \"stats\", \"true\", \n                               \"facet.pivot\", \"{!stats=s1}place_t,company_t\", \n                               \"stats.field\", \"{!key=avg_price tag=s1}price_ti\");\n    QueryResponse rsp = query(params);\n\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    PivotField dublinPivotField = placePivots.get(0);\n    assertEquals(\"dublin\", dublinPivotField.getValue());\n    assertEquals(4, dublinPivotField.getCount());\n\n    PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n    assertEquals(\"microsoft\", microsoftPivotField.getValue());\n    assertEquals(4, microsoftPivotField.getCount());\n\n    FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, dublinMicrosoftStatsInfo.getMin());\n    assertEquals(29.0, dublinMicrosoftStatsInfo.getMax());\n    assertEquals(3, (long) dublinMicrosoftStatsInfo.getCount());\n    assertEquals(1, (long) dublinMicrosoftStatsInfo.getMissing());\n    assertEquals(63.0, dublinMicrosoftStatsInfo.getSum());\n    assertEquals(1427.0, dublinMicrosoftStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(21.0, (double) dublinMicrosoftStatsInfo.getMean(), 0.1E-7);\n    assertEquals(7.211102550927978, dublinMicrosoftStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField cardiffPivotField = placePivots.get(2);\n    assertEquals(\"cardiff\", cardiffPivotField.getValue());\n    assertEquals(3, cardiffPivotField.getCount());\n\n    PivotField polecatPivotField = cardiffPivotField.getPivot().get(0);\n    assertEquals(\"polecat\", polecatPivotField.getValue());\n    assertEquals(3, polecatPivotField.getCount());\n\n    FieldStatsInfo cardiffPolecatStatsInfo = polecatPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, cardiffPolecatStatsInfo.getMin());\n    assertEquals(39.0, cardiffPolecatStatsInfo.getMax());\n    assertEquals(2, (long) cardiffPolecatStatsInfo.getCount());\n    assertEquals(1, (long) cardiffPolecatStatsInfo.getMissing());\n    assertEquals(54.0, cardiffPolecatStatsInfo.getSum());\n    assertEquals(1746.0, cardiffPolecatStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(27.0, (double) cardiffPolecatStatsInfo.getMean(), 0.1E-7);\n    assertEquals(16.97056274847714, cardiffPolecatStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField krakowPivotField = placePivots.get(3);\n    assertEquals(\"krakow\", krakowPivotField.getValue());\n    assertEquals(3, krakowPivotField.getCount());\n\n    PivotField fujitsuPivotField = krakowPivotField.getPivot().get(3);\n    assertEquals(\"fujitsu\", fujitsuPivotField.getValue());\n    assertEquals(1, fujitsuPivotField.getCount());\n\n    FieldStatsInfo krakowFujitsuStatsInfo = fujitsuPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(null, krakowFujitsuStatsInfo.getMin());\n    assertEquals(null, krakowFujitsuStatsInfo.getMax());\n    assertEquals(0, (long) krakowFujitsuStatsInfo.getCount());\n    assertEquals(1, (long) krakowFujitsuStatsInfo.getMissing());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSum());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(Double.NaN, (double) krakowFujitsuStatsInfo.getMean(), 0.1E-7);\n    assertEquals(0.0, krakowFujitsuStatsInfo.getStddev(), 0.1E-7);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTestDeepPivotStats(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTestDeepPivotStats().mjava","sourceNew":"  /**\n   * @param justMean - only the mean stat is requested/computed\n   */\n  private void doTestDeepPivotStats(boolean justMean) throws Exception {\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\", \n                               \"facet\", \"true\", \"stats\", \"true\", \n                               \"facet.pivot\", \"{!stats=s1}place_t,company_t\", \n                               \"stats.field\", (\"{!key=avg_price tag=s1 \"+\n                                               (justMean ? \"mean=true\" : \"\") +\"}price_ti\"));\n    QueryResponse rsp = query(params);\n\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    PivotField dublinPivotField = placePivots.get(0);\n    assertEquals(\"dublin\", dublinPivotField.getValue());\n    assertEquals(4, dublinPivotField.getCount());\n\n    PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n    assertEquals(\"microsoft\", microsoftPivotField.getValue());\n    assertEquals(4, microsoftPivotField.getCount());\n\n    FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(21.0, (double) dublinMicrosoftStatsInfo.getMean(), 0.1E-7);\n    if (justMean) {\n      assertNull(dublinMicrosoftStatsInfo.getMin());\n      assertNull(dublinMicrosoftStatsInfo.getMax());\n      assertNull(dublinMicrosoftStatsInfo.getCount());\n      assertNull(dublinMicrosoftStatsInfo.getMissing());\n      assertNull(dublinMicrosoftStatsInfo.getSum());\n      assertNull(dublinMicrosoftStatsInfo.getSumOfSquares());\n      assertNull(dublinMicrosoftStatsInfo.getStddev());\n    } else {\n      assertEquals(15.0, dublinMicrosoftStatsInfo.getMin());\n      assertEquals(29.0, dublinMicrosoftStatsInfo.getMax());\n      assertEquals(3, (long) dublinMicrosoftStatsInfo.getCount());\n      assertEquals(1, (long) dublinMicrosoftStatsInfo.getMissing());\n      assertEquals(63.0, dublinMicrosoftStatsInfo.getSum());\n      assertEquals(1427.0, dublinMicrosoftStatsInfo.getSumOfSquares(), 0.1E-7);\n      assertEquals(7.211102550927978, dublinMicrosoftStatsInfo.getStddev(), 0.1E-7);\n    }\n\n    PivotField cardiffPivotField = placePivots.get(2);\n    assertEquals(\"cardiff\", cardiffPivotField.getValue());\n    assertEquals(3, cardiffPivotField.getCount());\n\n    PivotField polecatPivotField = cardiffPivotField.getPivot().get(0);\n    assertEquals(\"polecat\", polecatPivotField.getValue());\n    assertEquals(3, polecatPivotField.getCount());\n\n    FieldStatsInfo cardiffPolecatStatsInfo = polecatPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(27.0, (double) cardiffPolecatStatsInfo.getMean(), 0.1E-7);\n    if (justMean) {\n      assertNull(cardiffPolecatStatsInfo.getMin());\n      assertNull(cardiffPolecatStatsInfo.getMax());\n      assertNull(cardiffPolecatStatsInfo.getCount());\n      assertNull(cardiffPolecatStatsInfo.getMissing());\n      assertNull(cardiffPolecatStatsInfo.getSum());\n      assertNull(cardiffPolecatStatsInfo.getSumOfSquares());\n      assertNull(cardiffPolecatStatsInfo.getStddev());\n    } else {\n      assertEquals(15.0, cardiffPolecatStatsInfo.getMin());\n      assertEquals(39.0, cardiffPolecatStatsInfo.getMax());\n      assertEquals(2, (long) cardiffPolecatStatsInfo.getCount());\n      assertEquals(1, (long) cardiffPolecatStatsInfo.getMissing());\n      assertEquals(54.0, cardiffPolecatStatsInfo.getSum());\n      assertEquals(1746.0, cardiffPolecatStatsInfo.getSumOfSquares(), 0.1E-7);\n      assertEquals(16.97056274847714, cardiffPolecatStatsInfo.getStddev(), 0.1E-7);\n    }\n\n    PivotField krakowPivotField = placePivots.get(3);\n    assertEquals(\"krakow\", krakowPivotField.getValue());\n    assertEquals(3, krakowPivotField.getCount());\n\n    PivotField fujitsuPivotField = krakowPivotField.getPivot().get(3);\n    assertEquals(\"fujitsu\", fujitsuPivotField.getValue());\n    assertEquals(1, fujitsuPivotField.getCount());\n\n    FieldStatsInfo krakowFujitsuStatsInfo = fujitsuPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(Double.NaN, (double) krakowFujitsuStatsInfo.getMean(), 0.1E-7);\n    if (justMean) {\n      assertNull(krakowFujitsuStatsInfo.getMin());\n      assertNull(krakowFujitsuStatsInfo.getMax());\n      assertNull(krakowFujitsuStatsInfo.getCount());\n      assertNull(krakowFujitsuStatsInfo.getMissing());\n      assertNull(krakowFujitsuStatsInfo.getSum());\n      assertNull(krakowFujitsuStatsInfo.getSumOfSquares());\n      assertNull(krakowFujitsuStatsInfo.getStddev());\n     } else {\n      assertEquals(null, krakowFujitsuStatsInfo.getMin());\n      assertEquals(null, krakowFujitsuStatsInfo.getMax());\n      assertEquals(0, (long) krakowFujitsuStatsInfo.getCount());\n      assertEquals(1, (long) krakowFujitsuStatsInfo.getMissing());\n      assertEquals(0.0, krakowFujitsuStatsInfo.getSum());\n      assertEquals(0.0, krakowFujitsuStatsInfo.getSumOfSquares(), 0.1E-7);\n      assertEquals(Double.NaN, (double) krakowFujitsuStatsInfo.getMean(), 0.1E-7);\n      assertEquals(0.0, krakowFujitsuStatsInfo.getStddev(), 0.1E-7);\n    }\n  }\n\n","sourceOld":"  private void doTestDeepPivotStats() throws Exception {\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\", \n                               \"facet\", \"true\", \"stats\", \"true\", \n                               \"facet.pivot\", \"{!stats=s1}place_t,company_t\", \n                               \"stats.field\", \"{!key=avg_price tag=s1}price_ti\");\n    QueryResponse rsp = query(params);\n\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    PivotField dublinPivotField = placePivots.get(0);\n    assertEquals(\"dublin\", dublinPivotField.getValue());\n    assertEquals(4, dublinPivotField.getCount());\n\n    PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n    assertEquals(\"microsoft\", microsoftPivotField.getValue());\n    assertEquals(4, microsoftPivotField.getCount());\n\n    FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, dublinMicrosoftStatsInfo.getMin());\n    assertEquals(29.0, dublinMicrosoftStatsInfo.getMax());\n    assertEquals(3, (long) dublinMicrosoftStatsInfo.getCount());\n    assertEquals(1, (long) dublinMicrosoftStatsInfo.getMissing());\n    assertEquals(63.0, dublinMicrosoftStatsInfo.getSum());\n    assertEquals(1427.0, dublinMicrosoftStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(21.0, (double) dublinMicrosoftStatsInfo.getMean(), 0.1E-7);\n    assertEquals(7.211102550927978, dublinMicrosoftStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField cardiffPivotField = placePivots.get(2);\n    assertEquals(\"cardiff\", cardiffPivotField.getValue());\n    assertEquals(3, cardiffPivotField.getCount());\n\n    PivotField polecatPivotField = cardiffPivotField.getPivot().get(0);\n    assertEquals(\"polecat\", polecatPivotField.getValue());\n    assertEquals(3, polecatPivotField.getCount());\n\n    FieldStatsInfo cardiffPolecatStatsInfo = polecatPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, cardiffPolecatStatsInfo.getMin());\n    assertEquals(39.0, cardiffPolecatStatsInfo.getMax());\n    assertEquals(2, (long) cardiffPolecatStatsInfo.getCount());\n    assertEquals(1, (long) cardiffPolecatStatsInfo.getMissing());\n    assertEquals(54.0, cardiffPolecatStatsInfo.getSum());\n    assertEquals(1746.0, cardiffPolecatStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(27.0, (double) cardiffPolecatStatsInfo.getMean(), 0.1E-7);\n    assertEquals(16.97056274847714, cardiffPolecatStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField krakowPivotField = placePivots.get(3);\n    assertEquals(\"krakow\", krakowPivotField.getValue());\n    assertEquals(3, krakowPivotField.getCount());\n\n    PivotField fujitsuPivotField = krakowPivotField.getPivot().get(3);\n    assertEquals(\"fujitsu\", fujitsuPivotField.getValue());\n    assertEquals(1, fujitsuPivotField.getCount());\n\n    FieldStatsInfo krakowFujitsuStatsInfo = fujitsuPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(null, krakowFujitsuStatsInfo.getMin());\n    assertEquals(null, krakowFujitsuStatsInfo.getMax());\n    assertEquals(0, (long) krakowFujitsuStatsInfo.getCount());\n    assertEquals(1, (long) krakowFujitsuStatsInfo.getMissing());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSum());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(Double.NaN, (double) krakowFujitsuStatsInfo.getMean(), 0.1E-7);\n    assertEquals(0.0, krakowFujitsuStatsInfo.getStddev(), 0.1E-7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTestDeepPivotStats().mjava","sourceNew":null,"sourceOld":"  private void doTestDeepPivotStats() throws Exception {\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\", \n                               \"facet\", \"true\", \"stats\", \"true\", \n                               \"facet.pivot\", \"{!stats=s1}place_t,company_t\", \n                               \"stats.field\", \"{!key=avg_price tag=s1}price_ti\");\n    QueryResponse rsp = query(params);\n\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n\n    PivotField dublinPivotField = placePivots.get(0);\n    assertEquals(\"dublin\", dublinPivotField.getValue());\n    assertEquals(4, dublinPivotField.getCount());\n\n    PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n    assertEquals(\"microsoft\", microsoftPivotField.getValue());\n    assertEquals(4, microsoftPivotField.getCount());\n\n    FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, dublinMicrosoftStatsInfo.getMin());\n    assertEquals(29.0, dublinMicrosoftStatsInfo.getMax());\n    assertEquals(3, (long) dublinMicrosoftStatsInfo.getCount());\n    assertEquals(1, (long) dublinMicrosoftStatsInfo.getMissing());\n    assertEquals(63.0, dublinMicrosoftStatsInfo.getSum());\n    assertEquals(1427.0, dublinMicrosoftStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(21.0, (double) dublinMicrosoftStatsInfo.getMean(), 0.1E-7);\n    assertEquals(7.211102550927978, dublinMicrosoftStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField cardiffPivotField = placePivots.get(2);\n    assertEquals(\"cardiff\", cardiffPivotField.getValue());\n    assertEquals(3, cardiffPivotField.getCount());\n\n    PivotField polecatPivotField = cardiffPivotField.getPivot().get(0);\n    assertEquals(\"polecat\", polecatPivotField.getValue());\n    assertEquals(3, polecatPivotField.getCount());\n\n    FieldStatsInfo cardiffPolecatStatsInfo = polecatPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(15.0, cardiffPolecatStatsInfo.getMin());\n    assertEquals(39.0, cardiffPolecatStatsInfo.getMax());\n    assertEquals(2, (long) cardiffPolecatStatsInfo.getCount());\n    assertEquals(1, (long) cardiffPolecatStatsInfo.getMissing());\n    assertEquals(54.0, cardiffPolecatStatsInfo.getSum());\n    assertEquals(1746.0, cardiffPolecatStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(27.0, (double) cardiffPolecatStatsInfo.getMean(), 0.1E-7);\n    assertEquals(16.97056274847714, cardiffPolecatStatsInfo.getStddev(), 0.1E-7);\n\n\n    PivotField krakowPivotField = placePivots.get(3);\n    assertEquals(\"krakow\", krakowPivotField.getValue());\n    assertEquals(3, krakowPivotField.getCount());\n\n    PivotField fujitsuPivotField = krakowPivotField.getPivot().get(3);\n    assertEquals(\"fujitsu\", fujitsuPivotField.getValue());\n    assertEquals(1, fujitsuPivotField.getCount());\n\n    FieldStatsInfo krakowFujitsuStatsInfo = fujitsuPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(null, krakowFujitsuStatsInfo.getMin());\n    assertEquals(null, krakowFujitsuStatsInfo.getMax());\n    assertEquals(0, (long) krakowFujitsuStatsInfo.getCount());\n    assertEquals(1, (long) krakowFujitsuStatsInfo.getMissing());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSum());\n    assertEquals(0.0, krakowFujitsuStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(Double.NaN, (double) krakowFujitsuStatsInfo.getMean(), 0.1E-7);\n    assertEquals(0.0, krakowFujitsuStatsInfo.getStddev(), 0.1E-7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4c18a95e9168a30be855f5d5e7d61a863186fdc5","d12bbc45d641864ffe03291bc30f178eb34e434c"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d12bbc45d641864ffe03291bc30f178eb34e434c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}