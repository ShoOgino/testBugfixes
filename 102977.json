{"path":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","commits":[{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    long seed = RAND.nextLong();\n    RAND.setSeed(seed);\n    if (VERBOSE) {\n      System.out.println(\"testSetMultiThreaded: seed=\" + seed);\n    }\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread();\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1eb108f4291bd5b4672bac446eb48bf97d321f","date":1292343856,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","sourceNew":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread(random);\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    long seed = RAND.nextLong();\n    RAND.setSeed(seed);\n    if (VERBOSE) {\n      System.out.println(\"testSetMultiThreaded: seed=\" + seed);\n    }\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread();\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","sourceNew":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread(random);\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    long seed = RAND.nextLong();\n    RAND.setSeed(seed);\n    if (VERBOSE) {\n      System.out.println(\"testSetMultiThreaded: seed=\" + seed);\n    }\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread();\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","sourceNew":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread(random);\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    long seed = RAND.nextLong();\n    RAND.setSeed(seed);\n    if (VERBOSE) {\n      System.out.println(\"testSetMultiThreaded: seed=\" + seed);\n    }\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread();\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSetOnce#testSetMultiThreaded().mjava","sourceNew":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread(random);\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSetMultiThreaded() throws Exception {\n    final SetOnce<Integer> set = new SetOnce<Integer>();\n    SetOnceThread[] threads = new SetOnceThread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new SetOnceThread(random);\n      threads[i].setName(\"t-\" + (i+1));\n      threads[i].set = set;\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n\n    for (Thread t : threads) {\n      t.join();\n    }\n    \n    for (SetOnceThread t : threads) {\n      if (t.success) {\n        int expectedVal = Integer.parseInt(t.getName().substring(2));\n        assertEquals(\"thread \" + t.getName(), expectedVal, t.set.get().intValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1eb108f4291bd5b4672bac446eb48bf97d321f":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad1eb108f4291bd5b4672bac446eb48bf97d321f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["7ab99e8c71442b92c320e218141dee04a9b91ce8","ad1eb108f4291bd5b4672bac446eb48bf97d321f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","ad1eb108f4291bd5b4672bac446eb48bf97d321f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ad1eb108f4291bd5b4672bac446eb48bf97d321f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["ad1eb108f4291bd5b4672bac446eb48bf97d321f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}