{"path":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(InvertedFields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(InvertedFields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(InvertedFields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(InvertedFields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    FieldsEnum fieldsEnum = vectors.iterator();\n    while(fieldsEnum.next() != null) {\n      Terms terms = fieldsEnum.terms();\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(null), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#verifyVectors(Fields,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(Fields,int).mjava","sourceNew":"  static void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(), num);\n    }\n  }\n\n","sourceOld":"  private void verifyVectors(Fields vectors, int num) throws IOException {\n    for (String field : vectors) {\n      Terms terms = vectors.terms(field);\n      assert terms != null;\n      verifyVector(terms.iterator(), num);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}