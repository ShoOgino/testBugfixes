{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","commits":[{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":0,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldname, legacyNumericFieldType.numericPrecisionStep(), min, max, minInclusive, maxInclusive);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldname, legacyNumericFieldType.numericPrecisionStep(), min, max, minInclusive, maxInclusive);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldname, legacyNumericFieldType.numericPrecisionStep(), min, max, minInclusive, maxInclusive);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeNumericRangeQuery(String,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   *\n   * @param fieldname field name. must not be <code>null</code>.\n   * @param min minimum value of the range.\n   * @param max maximum value of the range.\n   * @param minInclusive include the minimum value if <code>true</code>.\n   * @param maxInclusive include the maximum value if <code>true</code>\n   */\n  private Query makeNumericRangeQuery(String fieldname, Double min, Double max, boolean minInclusive, boolean maxInclusive) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      if (minInclusive == false) {\n        min = Math.nextUp(min);\n      }\n\n      if (maxInclusive == false) {\n        max = Math.nextDown(max);\n      }\n\n      return DoublePoint.newRangeQuery(fieldname, min, max);\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldname, legacyNumericFieldType.numericPrecisionStep(), min, max, minInclusive, maxInclusive);\n    }\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a178ac3dec643551e66363c457a9074f55545f86":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}