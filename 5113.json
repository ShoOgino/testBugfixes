{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    throw new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#setAnalyzer(Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the Analyzer to be used when indexing fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setQueryAnalyzer\n   * @see #getAnalyzer\n   */\n  public void setAnalyzer(Analyzer analyzer) {\n    throw new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}