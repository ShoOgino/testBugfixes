{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a (possibly reused) TokenStream which tokenizes all the text \n     * in the provided Reader.\n     *\n     * @return  A TokenStream built from a RussianLetterTokenizer filtered with\n     *                  RussianLowerCaseFilter, StopFilter, and RussianStemFilter\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader, charset);\n      streams.result = new RussianLowerCaseFilter(streams.source, charset);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result, charset);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader, charset);\n      streams.result = new RussianLowerCaseFilter(streams.source, charset);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result, charset);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) TokenStream which tokenizes all the text \n     * in the provided Reader.\n     *\n     * @return  A TokenStream built from a RussianLetterTokenizer filtered with\n     *                  RussianLowerCaseFilter, StopFilter, and RussianStemFilter\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader, charset);\n      streams.result = new RussianLowerCaseFilter(streams.source, charset);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result, charset);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db07cbc50e33371ac44b6829104a06d485c5fe70","date":1254424809,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader, charset);\n      streams.result = new RussianLowerCaseFilter(streams.source, charset);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result, charset);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(false, streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(false, streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ce0ce6485d29a241c4ca4b6179d14df6a66bae","date":1259357651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"228921a7da966f286923c2b28786c60def72813a","date":1259610957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link RussianLowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text \n     * in the provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream reusableTokenStream(String fieldName, Reader reader) \n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new RussianLetterTokenizer(reader);\n      streams.result = new LowerCaseFilter(matchVersion, streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stopSet);\n      streams.result = new RussianStemFilter(streams.result);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"228921a7da966f286923c2b28786c60def72813a":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ba1116b3450a9c1642c89445d131b37344055245"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"ddc5fbfd4c64963aba52713a4496522540294d69":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc5fbfd4c64963aba52713a4496522540294d69"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["228921a7da966f286923c2b28786c60def72813a"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"228921a7da966f286923c2b28786c60def72813a":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"ddc5fbfd4c64963aba52713a4496522540294d69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["228921a7da966f286923c2b28786c60def72813a"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"ba1116b3450a9c1642c89445d131b37344055245":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["ddc5fbfd4c64963aba52713a4496522540294d69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}