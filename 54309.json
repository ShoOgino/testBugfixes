{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic Token next() {\n\t\t\t// cache loop instance vars (performance)\n\t\t\tString s = str;\n\t\t\tint len = s.length();\n\t\t\tint i = pos;\n\t\t\tboolean letter = isLetter;\n\t\t\t\n\t\t\tint start = 0;\n\t\t\tString text;\n\t\t\tdo {\n\t\t\t\t// find beginning of token\n\t\t\t\ttext = null;\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (i < len) { // found beginning; now find end of token\n\t\t\t\t\tstart = i;\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttext = s.substring(start, i);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \n////\t\t\t\t\t\tchar[] chars = new char[i-start];\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////\t\t\t\t\t\ttext = new String(chars);\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\ttext = s.substring(start, i);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (text != null && isStopWord(text));\n\t\t\t\n\t\t\tpos = i;\n\t\t\treturn text != null ? new Token(text, start, i) : null;\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","sourceNew":"\t\tpublic Token next() {\r\n\t\t\t// cache loop instance vars (performance)\r\n\t\t\tString s = str;\r\n\t\t\tint len = s.length();\r\n\t\t\tint i = pos;\r\n\t\t\tboolean letter = isLetter;\r\n\t\t\t\r\n\t\t\tint start = 0;\r\n\t\t\tString text;\r\n\t\t\tdo {\r\n\t\t\t\t// find beginning of token\r\n\t\t\t\ttext = null;\r\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (i < len) { // found beginning; now find end of token\r\n\t\t\t\t\tstart = i;\r\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttext = s.substring(start, i);\r\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\r\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\r\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\r\n////\t\t\t\t\t\tsee http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\r\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \r\n////\t\t\t\t\t\tchar[] chars = new char[i-start];\r\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\r\n////\t\t\t\t\t\ttext = new String(chars);\r\n//\t\t\t\t\t} else {\r\n//\t\t\t\t\t\ttext = s.substring(start, i);\r\n//\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} while (text != null && isStopWord(text));\r\n\t\t\t\r\n\t\t\tpos = i;\r\n\t\t\treturn text != null ? new Token(text, start, i) : null;\r\n\t\t}\r\n\n","sourceOld":"\t\tpublic Token next() {\n\t\t\t// cache loop instance vars (performance)\n\t\t\tString s = str;\n\t\t\tint len = s.length();\n\t\t\tint i = pos;\n\t\t\tboolean letter = isLetter;\n\t\t\t\n\t\t\tint start = 0;\n\t\t\tString text;\n\t\t\tdo {\n\t\t\t\t// find beginning of token\n\t\t\t\ttext = null;\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (i < len) { // found beginning; now find end of token\n\t\t\t\t\tstart = i;\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttext = s.substring(start, i);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \n////\t\t\t\t\t\tchar[] chars = new char[i-start];\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////\t\t\t\t\t\ttext = new String(chars);\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\ttext = s.substring(start, i);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (text != null && isStopWord(text));\n\t\t\t\n\t\t\tpos = i;\n\t\t\treturn text != null ? new Token(text, start, i) : null;\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a","date":1133587576,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","sourceNew":null,"sourceOld":"\t\tpublic Token next() {\r\n\t\t\t// cache loop instance vars (performance)\r\n\t\t\tString s = str;\r\n\t\t\tint len = s.length();\r\n\t\t\tint i = pos;\r\n\t\t\tboolean letter = isLetter;\r\n\t\t\t\r\n\t\t\tint start = 0;\r\n\t\t\tString text;\r\n\t\t\tdo {\r\n\t\t\t\t// find beginning of token\r\n\t\t\t\ttext = null;\r\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (i < len) { // found beginning; now find end of token\r\n\t\t\t\t\tstart = i;\r\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttext = s.substring(start, i);\r\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\r\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\r\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\r\n////\t\t\t\t\t\tsee http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\r\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \r\n////\t\t\t\t\t\tchar[] chars = new char[i-start];\r\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\r\n////\t\t\t\t\t\ttext = new String(chars);\r\n//\t\t\t\t\t} else {\r\n//\t\t\t\t\t\ttext = s.substring(start, i);\r\n//\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} while (text != null && isStopWord(text));\r\n\t\t\t\r\n\t\t\tpos = i;\r\n\t\t\treturn text != null ? new Token(text, start, i) : null;\r\n\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e","date":1133587670,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic Token next() {\n\t\t\t// cache loop instance vars (performance)\n\t\t\tString s = str;\n\t\t\tint len = s.length();\n\t\t\tint i = pos;\n\t\t\tboolean letter = isLetter;\n\t\t\t\n\t\t\tint start = 0;\n\t\t\tString text;\n\t\t\tdo {\n\t\t\t\t// find beginning of token\n\t\t\t\ttext = null;\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (i < len) { // found beginning; now find end of token\n\t\t\t\t\tstart = i;\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttext = s.substring(start, i);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////\t\t\t\t\t\tsee http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \n////\t\t\t\t\t\tchar[] chars = new char[i-start];\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////\t\t\t\t\t\ttext = new String(chars);\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\ttext = s.substring(start, i);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (text != null && isStopWord(text));\n\t\t\t\n\t\t\tpos = i;\n\t\t\treturn text != null ? new Token(text, start, i) : null;\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","sourceNew":"    public Token next() {\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      return text != null ? new Token(text, start, i) : null;\n    }\n\n","sourceOld":"\t\tpublic Token next() {\n\t\t\t// cache loop instance vars (performance)\n\t\t\tString s = str;\n\t\t\tint len = s.length();\n\t\t\tint i = pos;\n\t\t\tboolean letter = isLetter;\n\t\t\t\n\t\t\tint start = 0;\n\t\t\tString text;\n\t\t\tdo {\n\t\t\t\t// find beginning of token\n\t\t\t\ttext = null;\n\t\t\t\twhile (i < len && !isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (i < len) { // found beginning; now find end of token\n\t\t\t\t\tstart = i;\n\t\t\t\t\twhile (i < len && isTokenChar(s.charAt(i), letter)) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttext = s.substring(start, i);\n\t\t\t\t\tif (toLowerCase) text = text.toLowerCase(locale);\n//\t\t\t\t\tif (toLowerCase) {\t\t\t\t\t\t\n////\t\t\t\t\t\tuse next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////\t\t\t\t\t\tsee http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//\t\t\t\t\t\ttext = s.substring(start, i).toLowerCase(); \n////\t\t\t\t\t\tchar[] chars = new char[i-start];\n////\t\t\t\t\t\tfor (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////\t\t\t\t\t\ttext = new String(chars);\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\ttext = s.substring(start, i);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (text != null && isStopWord(text));\n\t\t\t\n\t\t\tpos = i;\n\t\t\treturn text != null ? new Token(text, start, i) : null;\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next(Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","sourceNew":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return null;\n      }\n      return reusableToken.reinit(text, start, i);\n    }\n\n","sourceOld":"    public Token next() {\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      return text != null ? new Token(text, start, i) : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}