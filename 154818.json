{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"Entry is null\");\n\n        if (LOG.isInfoEnabled())\n            LOG.info(\"delete entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        try{\n        if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n            \n            modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n        }\n        else\n            throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n        }catch (IOException e) {\n            throw new StorageException(\"Can not access storage\");\n        }finally{\n            query.decrementRef();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"Entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"Entry id is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"delete entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try{\n        if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n            if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }else\n                throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n        }\n        else\n            throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n        }catch (IOException e) {\n            throw new StorageException(\"Can not access storage\");\n        }finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"Entry is null\");\n\n        if (LOG.isInfoEnabled())\n            LOG.info(\"delete entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        try{\n        if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n            \n            modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n        }\n        else\n            throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n        }catch (IOException e) {\n            throw new StorageException(\"Can not access storage\");\n        }finally{\n            query.decrementRef();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#deleteEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"Entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"Entry id is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"delete entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try{\n        if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n            if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }else\n                throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n        }\n        else\n            throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n        }catch (IOException e) {\n            throw new StorageException(\"Can not access storage\");\n        }finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public void deleteEntry(final ServerBaseEntry entry)\n            throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"Entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"Entry id is null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"delete entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try{\n        if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n            if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }else\n                throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n        }\n        else\n            throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n        }catch (IOException e) {\n            throw new StorageException(\"Can not access storage\");\n        }finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}