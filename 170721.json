{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","commits":[{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","date":1497547232,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n    testSimpleValues(\"val_is_p\", int.class, vals);\n    testSimpleValues(\"val_tis_ni_dv\", int.class, vals);\n    testSimpleValues(\"val_is_ni_p\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_p\", long.class, vals);\n    testSimpleValues(\"val_tls_ni_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_ni_p\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_p\", float.class, vals);\n    testSimpleValues(\"val_tfs_ni_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_ni_p\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_p\", double.class, vals);\n    testSimpleValues(\"val_tds_ni_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_ni_p\", double.class, vals);\n\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n    testSimpleValues(\"val_is_p\", int.class, vals);\n    testSimpleValues(\"val_tis_ni_dv\", int.class, vals);\n    testSimpleValues(\"val_is_ni_p\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_p\", long.class, vals);\n    testSimpleValues(\"val_tls_ni_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_ni_p\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_p\", float.class, vals);\n    testSimpleValues(\"val_tfs_ni_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_ni_p\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_p\", double.class, vals);\n    testSimpleValues(\"val_tds_ni_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_ni_p\", double.class, vals);\n\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n    testSimpleValues(\"val_is_p\", int.class, vals);\n    testSimpleValues(\"val_tis_ni_dv\", int.class, vals);\n    testSimpleValues(\"val_is_ni_p\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_p\", long.class, vals);\n    testSimpleValues(\"val_tls_ni_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_ni_p\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_p\", float.class, vals);\n    testSimpleValues(\"val_tfs_ni_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_ni_p\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_p\", double.class, vals);\n    testSimpleValues(\"val_tds_ni_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_ni_p\", double.class, vals);\n\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    @SuppressWarnings({\"rawtypes\"})\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n    testSimpleValues(\"val_is_p\", int.class, vals);\n    testSimpleValues(\"val_tis_ni_dv\", int.class, vals);\n    testSimpleValues(\"val_is_ni_p\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_p\", long.class, vals);\n    testSimpleValues(\"val_tls_ni_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_ni_p\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_p\", float.class, vals);\n    testSimpleValues(\"val_tfs_ni_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_ni_p\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_p\", double.class, vals);\n    testSimpleValues(\"val_tds_ni_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_ni_p\", double.class, vals);\n\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];\n\n    // random ints\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextInt();\n    }\n    testSimpleValues(\"val_tis_dv\", int.class, vals);\n    testSimpleValues(\"val_is_p\", int.class, vals);\n    testSimpleValues(\"val_tis_ni_dv\", int.class, vals);\n    testSimpleValues(\"val_is_ni_p\", int.class, vals);\n\n    // random longs\n    for (int i = 0; i < vals.length; i++) {\n      vals[i] = random().nextLong();\n    }\n    testSimpleValues(\"val_tls_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_p\", long.class, vals);\n    testSimpleValues(\"val_tls_ni_dv\", long.class, vals);\n    testSimpleValues(\"val_ls_ni_p\", long.class, vals);\n    \n    // random floats\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextFloat is lame\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      vals[i] = f;\n    }\n    testSimpleValues(\"val_tfs_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_p\", float.class, vals);\n    testSimpleValues(\"val_tfs_ni_dv\", float.class, vals);\n    testSimpleValues(\"val_fs_ni_p\", float.class, vals);\n    \n    // random doubles\n    for (int i = 0; i < vals.length; i++) {\n      // Random.nextDouble is lame\n      Double d = Double.NaN;\n      while (d.isNaN()) {\n        d = Double.longBitsToDouble(random().nextLong());\n      }\n      vals[i] = d;\n    }\n    testSimpleValues(\"val_tds_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_p\", double.class, vals);\n    testSimpleValues(\"val_tds_ni_dv\", double.class, vals);\n    testSimpleValues(\"val_ds_ni_p\", double.class, vals);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["1f192203c3feece147e3227c2446101d33858d81"],"1f192203c3feece147e3227c2446101d33858d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["1f192203c3feece147e3227c2446101d33858d81","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1f192203c3feece147e3227c2446101d33858d81","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1f192203c3feece147e3227c2446101d33858d81":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f192203c3feece147e3227c2446101d33858d81"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}