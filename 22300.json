{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","commits":[{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches\n   *          {@code totalHitsThreshold} hits or more then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      int totalHitsThreshold) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, totalHitsThreshold);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, totalHitsThreshold);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, trackTotalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5374ec368ef9441d694af8df95b2ffbae3d7f03b","date":1548748689,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      int totalHitsThreshold) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, totalHitsThreshold);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, totalHitsThreshold);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches\n   *          {@code totalHitsThreshold} hits or more then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      int totalHitsThreshold) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, totalHitsThreshold);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, totalHitsThreshold);\n    }\n  }\n\n","bugFix":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19eef45a852c3316ae52fdf941731448ece967a","date":1567670879,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold));\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      int totalHitsThreshold) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, totalHitsThreshold);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, totalHitsThreshold);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32dc2e73f68d239029f9fe76729eda505b75bb6e","date":1569593453,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5319c194edd3bf49f39c6d198107ed213c1d3670","date":1569842580,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null /* bottomValueChecker */);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":3,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null /* bottomValueChecker */);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60a97329527e682292497dd2f6fae1c519840bae","date":1587668642,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(Math.max(totalHitsThreshold, numHits)), null /* bottomValueChecker */);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null /* bottomValueChecker */);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   *          Setting totalHitsThreshold less than {@link Integer#MAX_VALUE}\n   *          instructs Lucene to skip non-competitive documents whenever possible. For numeric\n   *          sort fields the skipping functionality works when the same field is indexed both\n   *          with doc values and points. In this case, there is an assumption that the same data is\n   *          stored in these points and doc values.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(Math.max(totalHitsThreshold, numHits)), null /* bottomValueChecker */);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches more than\n   *          {@code totalHitsThreshold} hits then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than or exactly\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after, int totalHitsThreshold) {\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    return create(sort, numHits, after, HitsThresholdChecker.create(Math.max(totalHitsThreshold, numHits)), null /* bottomValueChecker */);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e19eef45a852c3316ae52fdf941731448ece967a":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["e19eef45a852c3316ae52fdf941731448ece967a","5319c194edd3bf49f39c6d198107ed213c1d3670"],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["e19eef45a852c3316ae52fdf941731448ece967a"],"60a97329527e682292497dd2f6fae1c519840bae":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["60a97329527e682292497dd2f6fae1c519840bae"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"5319c194edd3bf49f39c6d198107ed213c1d3670":["32dc2e73f68d239029f9fe76729eda505b75bb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e19eef45a852c3316ae52fdf941731448ece967a":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","32dc2e73f68d239029f9fe76729eda505b75bb6e"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["60a97329527e682292497dd2f6fae1c519840bae"],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["5319c194edd3bf49f39c6d198107ed213c1d3670"],"60a97329527e682292497dd2f6fae1c519840bae":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["e19eef45a852c3316ae52fdf941731448ece967a"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5319c194edd3bf49f39c6d198107ed213c1d3670":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}