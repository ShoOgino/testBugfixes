{"path":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}