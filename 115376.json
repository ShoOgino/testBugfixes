{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = w.getReader();\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}