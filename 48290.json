{"path":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","commits":[{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].topReaderContext != reader.getContext()) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(contexts[i], df, ttf);\n    }\n\n    TermQuery[] termQueries = new TermQuery[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      termQueries[i].setBoost(boosts[i]);\n    }\n    Query rewritten = rewriteMethod.rewrite(termQueries);\n    rewritten.setBoost(getBoost());\n    return rewritten;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].topReaderContext != reader.getContext()) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].topReaderContext != reader.getContext()) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(contexts[i], df, ttf);\n    }\n\n    TermQuery[] termQueries = new TermQuery[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      termQueries[i].setBoost(boosts[i]);\n    }\n    Query rewritten = rewriteMethod.rewrite(termQueries);\n    rewritten.setBoost(getBoost());\n    return rewritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].topReaderContext != reader.getContext()) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].topReaderContext != reader.getContext()) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      if (ctx.totalTermFreq() == -1L) {\n        ttf = -1L;\n      } else if (ttf != -1L) {\n        ttf += ctx.totalTermFreq();\n      }\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermContext[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermContext.build(reader.getContext(), terms[i]);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermContext ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = ArrayUtil.copyOfSubArray(this.contexts, 0, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = ArrayUtil.copyOfSubArray(this.contexts, 0, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = ArrayUtil.copyOfSubArray(this.contexts, 0, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(IndexReader reader) throws IOException {\n    final TermStates[] contexts = Arrays.copyOf(this.contexts, this.contexts.length);\n    for (int i = 0; i < contexts.length; ++i) {\n      if (contexts[i] == null || contexts[i].wasBuiltFor(reader.getContext()) == false) {\n        contexts[i] = TermStates.build(reader.getContext(), terms[i], true);\n      }\n    }\n\n    // Compute aggregated doc freq and total term freq\n    // df will be the max of all doc freqs\n    // ttf will be the sum of all total term freqs\n    int df = 0;\n    long ttf = 0;\n    for (TermStates ctx : contexts) {\n      df = Math.max(df, ctx.docFreq());\n      ttf += ctx.totalTermFreq();\n    }\n\n    for (int i = 0; i < contexts.length; ++i) {\n      contexts[i] = adjustFrequencies(reader.getContext(), contexts[i], df, ttf);\n    }\n\n    Query[] termQueries = new Query[terms.length];\n    for (int i = 0; i < terms.length; ++i) {\n      termQueries[i] = new TermQuery(terms[i], contexts[i]);\n      if (boosts[i] != 1f) {\n        termQueries[i] = new BoostQuery(termQueries[i], boosts[i]);\n      }\n    }\n    return rewriteMethod.rewrite(termQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","a6e9f769521480a623f897c0d59089b919fa4239"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["2dfdf766e55e943d942055d7de53c7ad6bc45283","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","086ffe31d8fba0110227db122974163709ecc1b4"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"086ffe31d8fba0110227db122974163709ecc1b4":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"a6e9f769521480a623f897c0d59089b919fa4239":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["b94236357aaa22b76c10629851fe4e376e0cea82","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["598b5d23aa7c9732bf473c21a9cd309c44599394","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["598b5d23aa7c9732bf473c21a9cd309c44599394","d523b8189b211dd1630166aa77b8c88bb48b3fcc","086ffe31d8fba0110227db122974163709ecc1b4"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}