{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f669665df5eca906baaf4197c0d728ad70a3633b","date":1386102141,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final List<AtomicReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f669665df5eca906baaf4197c0d728ad70a3633b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","f669665df5eca906baaf4197c0d728ad70a3633b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f669665df5eca906baaf4197c0d728ad70a3633b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f669665df5eca906baaf4197c0d728ad70a3633b":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f669665df5eca906baaf4197c0d728ad70a3633b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}