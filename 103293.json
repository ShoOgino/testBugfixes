{"path":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","commits":[{"id":"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","date":1464596999,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    new MSBRadixSorter(maxLength) {\n\n      protected int byteAt(int i, int k) {\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    new MSBRadixSorter(maxLength) {\n\n      protected int byteAt(int i, int k) {\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    new MSBRadixSorter(maxLength) {\n\n      protected int byteAt(int i, int k) {\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    new MSBRadixSorter(maxLength) {\n\n      protected int byteAt(int i, int k) {\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    new MSBRadixSorter(maxLength) {\n\n      protected int byteAt(int i, int k) {\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMSBRadixSorter#test(BytesRef[],int).mjava","sourceNew":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = ArrayUtil.copyOfSubArray(refs, 0, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = ArrayUtil.copyOfSubArray(refs, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  private void test(BytesRef[] refs, int len) {\n    BytesRef[] expected = Arrays.copyOf(refs, len);\n    Arrays.sort(expected);\n\n    int maxLength = 0;\n    for (int i = 0; i < len; ++i) {\n      BytesRef ref = refs[i];\n      maxLength = Math.max(maxLength, ref.length);\n    }\n    switch (random().nextInt(3)) {\n      case 0:\n        maxLength += TestUtil.nextInt(random(), 1, 5);\n        break;\n      case 1:\n        maxLength = Integer.MAX_VALUE;\n        break;\n      default:\n        // leave unchanged\n        break;\n    }\n\n    final int finalMaxLength = maxLength;\n    new MSBRadixSorter(maxLength) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assertTrue(k < finalMaxLength);\n        BytesRef ref = refs[i];\n        if (ref.length <= k) {\n          return -1;\n        }\n        return ref.bytes[ref.offset + k] & 0xff;\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        BytesRef tmp = refs[i];\n        refs[i] = refs[j];\n        refs[j] = tmp;\n      }\n    }.sort(0, len);\n    BytesRef[] actual = Arrays.copyOf(refs, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"a20457919db052812998f60294d17daa883ff972":["1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a20457919db052812998f60294d17daa883ff972","9798d0818e7a880546802b509792d3f3d57babd2"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"9798d0818e7a880546802b509792d3f3d57babd2":["a20457919db052812998f60294d17daa883ff972"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a20457919db052812998f60294d17daa883ff972","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"a20457919db052812998f60294d17daa883ff972":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["da8a02bef7458089240404614139b53c9f875ec7","a20457919db052812998f60294d17daa883ff972","5b8ee93140fd0efef7e101786e3ed5160a700b5f","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","b70042a8a492f7054d480ccdd2be9796510d4327","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}