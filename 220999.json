{"path":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#getMinDelta(float).mjava","commits":[{"id":"1b73cddaec09172a09da82e758d0014ab8810ffa","date":1506898255,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#getMinDelta(float).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the minimum value that will change the given distance when added to it.\n     * \n     * This value is calculated from the distance exponent reduced by (at most) 23,\n     * the number of bits in a float mantissa. This is necessary when the result of\n     * subtracting/adding the distance in a single dimension has an exponent that\n     * differs significantly from that of the distance value. Without this fudge\n     * factor (i.e. only subtracting/adding the distance), cells and values can be\n     * inappropriately judged as outside the search radius.\n     */\n    private float getMinDelta(float distance) {\n      int exponent = Float.floatToIntBits(distance) >> MANTISSA_BITS; // extract biased exponent (distance is positive)\n      if (exponent == 0) {\n        return Float.MIN_VALUE;\n      } else {\n        exponent = exponent <= MANTISSA_BITS ? 1 : exponent - MANTISSA_BITS; // Avoid underflow\n        return Float.intBitsToFloat(exponent << MANTISSA_BITS);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#getMinDelta(float).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the minimum value that will change the given distance when added to it.\n     * \n     * This value is calculated from the distance exponent reduced by (at most) 23,\n     * the number of bits in a float mantissa. This is necessary when the result of\n     * subtracting/adding the distance in a single dimension has an exponent that\n     * differs significantly from that of the distance value. Without this fudge\n     * factor (i.e. only subtracting/adding the distance), cells and values can be\n     * inappropriately judged as outside the search radius.\n     */\n    private float getMinDelta(float distance) {\n      int exponent = Float.floatToIntBits(distance) >> MANTISSA_BITS; // extract biased exponent (distance is positive)\n      if (exponent == 0) {\n        return Float.MIN_VALUE;\n      } else {\n        exponent = exponent <= MANTISSA_BITS ? 1 : exponent - MANTISSA_BITS; // Avoid underflow\n        return Float.intBitsToFloat(exponent << MANTISSA_BITS);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"097748fa4ff327a26994476115f52d1a899b549f","date":1568267320,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#getMinDelta(float).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns the minimum value that will change the given distance when added to it.\n     * \n     * This value is calculated from the distance exponent reduced by (at most) 23,\n     * the number of bits in a float mantissa. This is necessary when the result of\n     * subtracting/adding the distance in a single dimension has an exponent that\n     * differs significantly from that of the distance value. Without this fudge\n     * factor (i.e. only subtracting/adding the distance), cells and values can be\n     * inappropriately judged as outside the search radius.\n     */\n    private float getMinDelta(float distance) {\n      int exponent = Float.floatToIntBits(distance) >> MANTISSA_BITS; // extract biased exponent (distance is positive)\n      if (exponent == 0) {\n        return Float.MIN_VALUE;\n      } else {\n        exponent = exponent <= MANTISSA_BITS ? 1 : exponent - MANTISSA_BITS; // Avoid underflow\n        return Float.intBitsToFloat(exponent << MANTISSA_BITS);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b73cddaec09172a09da82e758d0014ab8810ffa"],"097748fa4ff327a26994476115f52d1a899b549f":["1b73cddaec09172a09da82e758d0014ab8810ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["097748fa4ff327a26994476115f52d1a899b549f"]},"commit2Childs":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["6240b74b884c5587f2a4062dd27d6c32bf228889","097748fa4ff327a26994476115f52d1a899b549f"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"097748fa4ff327a26994476115f52d1a899b549f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b73cddaec09172a09da82e758d0014ab8810ffa","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}