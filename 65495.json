{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testAlphaNumericWords().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testAlphaNumericWords().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testAlphaNumericWords().mjava","sourceNew":"  /***\n  public void testPerformance() throws IOException {\n    String s = \"now is the time-for all good men to come to-the aid of their country.\";\n    Token tok = new Token();\n    long start = System.currentTimeMillis();\n    int ret=0;\n    for (int i=0; i<1000000; i++) {\n      StringReader r = new StringReader(s);\n      TokenStream ts = new WhitespaceTokenizer(r);\n      ts = new WordDelimiterFilter(ts, 1,1,1,1,0);\n\n      while (ts.next(tok) != null) ret++;\n    }\n\n    System.out.println(\"ret=\"+ret+\" time=\"+(System.currentTimeMillis()-start));\n  }\n  ***/\n\n  @Test\n  public void testAlphaNumericWords(){\n     assertU(adoc(\"id\",  \"68\",\"numericsubword\",\"Java/J2SE\"));\n     assertU(commit());\n\n     assertQ(\"j2se found\",\n            req(\"numericsubword:(J2SE)\")\n            ,\"//result[@numFound=1]\"\n    );\n      assertQ(\"no j2 or se\",\n            req(\"numericsubword:(J2 OR SE)\")\n            ,\"//result[@numFound=0]\"\n    );\n    clearIndex();\n  }\n\n","sourceOld":"  /***\n  public void testPerformance() throws IOException {\n    String s = \"now is the time-for all good men to come to-the aid of their country.\";\n    Token tok = new Token();\n    long start = System.currentTimeMillis();\n    int ret=0;\n    for (int i=0; i<1000000; i++) {\n      StringReader r = new StringReader(s);\n      TokenStream ts = new WhitespaceTokenizer(r);\n      ts = new WordDelimiterFilter(ts, 1,1,1,1,0);\n\n      while (ts.next(tok) != null) ret++;\n    }\n\n    System.out.println(\"ret=\"+ret+\" time=\"+(System.currentTimeMillis()-start));\n  }\n  ***/\n\n  @Test\n  public void testAlphaNumericWords(){\n     assertU(adoc(\"id\",  \"68\",\"numericsubword\",\"Java/J2SE\"));\n     assertU(commit());\n\n     assertQ(\"j2se found\",\n            req(\"numericsubword:(J2SE)\")\n            ,\"//result[@numFound=1]\"\n    );\n      assertQ(\"no j2 or se\",\n            req(\"numericsubword:(J2 OR SE)\")\n            ,\"//result[@numFound=0]\"\n    );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testAlphaNumericWords().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilterFactory#testAlphaNumericWords().mjava","sourceNew":"  /***\n  public void testPerformance() throws IOException {\n    String s = \"now is the time-for all good men to come to-the aid of their country.\";\n    Token tok = new Token();\n    long start = System.currentTimeMillis();\n    int ret=0;\n    for (int i=0; i<1000000; i++) {\n      StringReader r = new StringReader(s);\n      TokenStream ts = new WhitespaceTokenizer(r);\n      ts = new WordDelimiterFilter(ts, 1,1,1,1,0);\n\n      while (ts.next(tok) != null) ret++;\n    }\n\n    System.out.println(\"ret=\"+ret+\" time=\"+(System.currentTimeMillis()-start));\n  }\n  ***/\n\n  @Test\n  public void testAlphaNumericWords(){\n     assertU(adoc(\"id\",  \"68\",\"numericsubword\",\"Java/J2SE\"));\n     assertU(commit());\n\n     assertQ(\"j2se found\",\n            req(\"numericsubword:(J2SE)\")\n            ,\"//result[@numFound=1]\"\n    );\n      assertQ(\"no j2 or se\",\n            req(\"numericsubword:(J2 OR SE)\")\n            ,\"//result[@numFound=0]\"\n    );\n    clearIndex();\n  }\n\n","sourceOld":"  /***\n  public void testPerformance() throws IOException {\n    String s = \"now is the time-for all good men to come to-the aid of their country.\";\n    Token tok = new Token();\n    long start = System.currentTimeMillis();\n    int ret=0;\n    for (int i=0; i<1000000; i++) {\n      StringReader r = new StringReader(s);\n      TokenStream ts = new WhitespaceTokenizer(r);\n      ts = new WordDelimiterFilter(ts, 1,1,1,1,0);\n\n      while (ts.next(tok) != null) ret++;\n    }\n\n    System.out.println(\"ret=\"+ret+\" time=\"+(System.currentTimeMillis()-start));\n  }\n  ***/\n\n  @Test\n  public void testAlphaNumericWords(){\n     assertU(adoc(\"id\",  \"68\",\"numericsubword\",\"Java/J2SE\"));\n     assertU(commit());\n\n     assertQ(\"j2se found\",\n            req(\"numericsubword:(J2SE)\")\n            ,\"//result[@numFound=1]\"\n    );\n      assertQ(\"no j2 or se\",\n            req(\"numericsubword:(J2 OR SE)\")\n            ,\"//result[@numFound=0]\"\n    );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"10ddcde450bb525af01593bf6aa68f1f67e81b0d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10ddcde450bb525af01593bf6aa68f1f67e81b0d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}