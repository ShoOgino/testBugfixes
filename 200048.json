{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","commits":[{"id":"851e2bd9deeca46bef2e8c5328c9448e4198a688","date":1389637622,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test faceting with deep paging\n   */\n  public void testFacetingWithRandomSorts() throws Exception {\n    final int numDocs = _TestUtil.nextInt(random(), 1000, 3000);\n    String[] fieldsToFacetOn = { \"int\", \"long\", \"str\" };\n    String[] facetMethods = { \"enum\", \"fc\", \"fcs\" };\n\n    for (int i = 1; i <= numDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    Collection<String> allFieldNames = getAllFieldNames();\n    String[] fieldNames = new String[allFieldNames.size()];\n    getAllFieldNames().toArray(fieldNames);\n    String f = fieldNames[_TestUtil.nextInt(random(), 0, fieldNames.length - 1)];\n    String order = 0 == _TestUtil.nextInt(random(), 0, 1) ? \" asc\" : \" desc\";\n    String sort = f + order + (f.equals(\"id\") ? \"\" : \", id\" + order);\n    String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n    String facetField = fieldsToFacetOn\n        [_TestUtil.nextInt(random(), 0, fieldsToFacetOn.length - 1)];\n    String facetMethod = facetMethods\n        [_TestUtil.nextInt(random(), 0, facetMethods.length - 1)];\n    SentinelIntSet ids = assertFullWalkNoDupsWithFacets\n        (numDocs, params(\"q\", \"*:*\",\n            \"fl\", \"id,\" + facetField,\n            \"facet\", \"true\",\n            \"facet.field\", facetField,\n            \"facet.method\", facetMethod,\n            \"facet.missing\", \"true\",\n            \"facet.limit\", \"-1\", // unlimited\n            \"rows\", rows,\n            \"sort\", sort));\n    assertEquals(numDocs, ids.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","date":1390935815,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","sourceNew":"  /**\n   * test faceting with deep paging\n   */\n  public void testFacetingWithRandomSorts() throws Exception {\n    final int numDocs = _TestUtil.nextInt(random(), 1000, 3000);\n    String[] fieldsToFacetOn = { \"int\", \"long\", \"str\" };\n    String[] facetMethods = { \"enum\", \"fc\", \"fcs\" };\n\n    for (int i = 1; i <= numDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    Collection<String> allFieldNames = getAllSortFieldNames();\n    String[] fieldNames = new String[allFieldNames.size()];\n    allFieldNames.toArray(fieldNames);\n    String f = fieldNames[_TestUtil.nextInt(random(), 0, fieldNames.length - 1)];\n    String order = 0 == _TestUtil.nextInt(random(), 0, 1) ? \" asc\" : \" desc\";\n    String sort = f + order + (f.equals(\"id\") ? \"\" : \", id\" + order);\n    String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n    String facetField = fieldsToFacetOn\n        [_TestUtil.nextInt(random(), 0, fieldsToFacetOn.length - 1)];\n    String facetMethod = facetMethods\n        [_TestUtil.nextInt(random(), 0, facetMethods.length - 1)];\n    SentinelIntSet ids = assertFullWalkNoDupsWithFacets\n        (numDocs, params(\"q\", \"*:*\",\n            \"fl\", \"id,\" + facetField,\n            \"facet\", \"true\",\n            \"facet.field\", facetField,\n            \"facet.method\", facetMethod,\n            \"facet.missing\", \"true\",\n            \"facet.limit\", \"-1\", // unlimited\n            \"rows\", rows,\n            \"sort\", sort));\n    assertEquals(numDocs, ids.size());\n  }\n\n","sourceOld":"  /**\n   * test faceting with deep paging\n   */\n  public void testFacetingWithRandomSorts() throws Exception {\n    final int numDocs = _TestUtil.nextInt(random(), 1000, 3000);\n    String[] fieldsToFacetOn = { \"int\", \"long\", \"str\" };\n    String[] facetMethods = { \"enum\", \"fc\", \"fcs\" };\n\n    for (int i = 1; i <= numDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    Collection<String> allFieldNames = getAllFieldNames();\n    String[] fieldNames = new String[allFieldNames.size()];\n    getAllFieldNames().toArray(fieldNames);\n    String f = fieldNames[_TestUtil.nextInt(random(), 0, fieldNames.length - 1)];\n    String order = 0 == _TestUtil.nextInt(random(), 0, 1) ? \" asc\" : \" desc\";\n    String sort = f + order + (f.equals(\"id\") ? \"\" : \", id\" + order);\n    String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n    String facetField = fieldsToFacetOn\n        [_TestUtil.nextInt(random(), 0, fieldsToFacetOn.length - 1)];\n    String facetMethod = facetMethods\n        [_TestUtil.nextInt(random(), 0, facetMethods.length - 1)];\n    SentinelIntSet ids = assertFullWalkNoDupsWithFacets\n        (numDocs, params(\"q\", \"*:*\",\n            \"fl\", \"id,\" + facetField,\n            \"facet\", \"true\",\n            \"facet.field\", facetField,\n            \"facet.method\", facetMethod,\n            \"facet.missing\", \"true\",\n            \"facet.limit\", \"-1\", // unlimited\n            \"rows\", rows,\n            \"sort\", sort));\n    assertEquals(numDocs, ids.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testFacetingWithRandomSorts().mjava","sourceNew":"  /**\n   * test faceting with deep paging\n   */\n  public void testFacetingWithRandomSorts() throws Exception {\n    final int numDocs = TestUtil.nextInt(random(), 1000, 3000);\n    String[] fieldsToFacetOn = { \"int\", \"long\", \"str\" };\n    String[] facetMethods = { \"enum\", \"fc\", \"fcs\" };\n\n    for (int i = 1; i <= numDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    Collection<String> allFieldNames = getAllSortFieldNames();\n    String[] fieldNames = new String[allFieldNames.size()];\n    allFieldNames.toArray(fieldNames);\n    String f = fieldNames[TestUtil.nextInt(random(), 0, fieldNames.length - 1)];\n    String order = 0 == TestUtil.nextInt(random(), 0, 1) ? \" asc\" : \" desc\";\n    String sort = f + order + (f.equals(\"id\") ? \"\" : \", id\" + order);\n    String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n    String facetField = fieldsToFacetOn\n        [TestUtil.nextInt(random(), 0, fieldsToFacetOn.length - 1)];\n    String facetMethod = facetMethods\n        [TestUtil.nextInt(random(), 0, facetMethods.length - 1)];\n    SentinelIntSet ids = assertFullWalkNoDupsWithFacets\n        (numDocs, params(\"q\", \"*:*\",\n            \"fl\", \"id,\" + facetField,\n            \"facet\", \"true\",\n            \"facet.field\", facetField,\n            \"facet.method\", facetMethod,\n            \"facet.missing\", \"true\",\n            \"facet.limit\", \"-1\", // unlimited\n            \"rows\", rows,\n            \"sort\", sort));\n    assertEquals(numDocs, ids.size());\n  }\n\n","sourceOld":"  /**\n   * test faceting with deep paging\n   */\n  public void testFacetingWithRandomSorts() throws Exception {\n    final int numDocs = _TestUtil.nextInt(random(), 1000, 3000);\n    String[] fieldsToFacetOn = { \"int\", \"long\", \"str\" };\n    String[] facetMethods = { \"enum\", \"fc\", \"fcs\" };\n\n    for (int i = 1; i <= numDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    Collection<String> allFieldNames = getAllSortFieldNames();\n    String[] fieldNames = new String[allFieldNames.size()];\n    allFieldNames.toArray(fieldNames);\n    String f = fieldNames[_TestUtil.nextInt(random(), 0, fieldNames.length - 1)];\n    String order = 0 == _TestUtil.nextInt(random(), 0, 1) ? \" asc\" : \" desc\";\n    String sort = f + order + (f.equals(\"id\") ? \"\" : \", id\" + order);\n    String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n    String facetField = fieldsToFacetOn\n        [_TestUtil.nextInt(random(), 0, fieldsToFacetOn.length - 1)];\n    String facetMethod = facetMethods\n        [_TestUtil.nextInt(random(), 0, facetMethods.length - 1)];\n    SentinelIntSet ids = assertFullWalkNoDupsWithFacets\n        (numDocs, params(\"q\", \"*:*\",\n            \"fl\", \"id,\" + facetField,\n            \"facet\", \"true\",\n            \"facet.field\", facetField,\n            \"facet.method\", facetMethod,\n            \"facet.missing\", \"true\",\n            \"facet.limit\", \"-1\", // unlimited\n            \"rows\", rows,\n            \"sort\", sort));\n    assertEquals(numDocs, ids.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"851e2bd9deeca46bef2e8c5328c9448e4198a688":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["851e2bd9deeca46bef2e8c5328c9448e4198a688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"851e2bd9deeca46bef2e8c5328c9448e4198a688":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["851e2bd9deeca46bef2e8c5328c9448e4198a688"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}