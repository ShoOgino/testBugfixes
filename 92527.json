{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["bd0ef6574805f3cb9880e0983b7548a6aa933508"]},"commit2Childs":{"bd0ef6574805f3cb9880e0983b7548a6aa933508":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}