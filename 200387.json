{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","commits":[{"id":"79cce2ac13867412e1a9dfd8c8df36833fba0d6a","date":1405962468,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    File tempDir = createTempDir(\"64kaffixes\");\n    File affix = new File(tempDir, \"64kaffixes.aff\");\n    File dict = new File(tempDir, \"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = new BufferedWriter(\n                                 new OutputStreamWriter(\n                                 new FileOutputStream(affix), StandardCharsets.UTF_8));\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = new BufferedWriter(\n                                new OutputStreamWriter(\n                                new FileOutputStream(dict), StandardCharsets.UTF_8));\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = new FileInputStream(affix); InputStream dictStream = new FileInputStream(dict)) {\n      Dictionary dictionary = new Dictionary(affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict)) {\n      Dictionary dictionary = new Dictionary(affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tempDir = createTempDir(\"64kaffixes\");\n    File affix = new File(tempDir, \"64kaffixes.aff\");\n    File dict = new File(tempDir, \"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = new BufferedWriter(\n                                 new OutputStreamWriter(\n                                 new FileOutputStream(affix), StandardCharsets.UTF_8));\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = new BufferedWriter(\n                                new OutputStreamWriter(\n                                new FileOutputStream(dict), StandardCharsets.UTF_8));\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = new FileInputStream(affix); InputStream dictStream = new FileInputStream(dict)) {\n      Dictionary dictionary = new Dictionary(affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      if (tempDir2 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) tempDir2).setEnableVirusScanner(false);\n      }\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict)) {\n      Dictionary dictionary = new Dictionary(affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      if (tempDir2 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) tempDir2).setEnableVirusScanner(false);\n      }\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      if (tempDir2 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) tempDir2).setEnableVirusScanner(false);\n      }\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      if (tempDir2 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) tempDir2).setEnableVirusScanner(false);\n      }\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/Test64kAffixes#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tempDir = createTempDir(\"64kaffixes\");\n    Path affix = tempDir.resolve(\"64kaffixes.aff\");\n    Path dict = tempDir.resolve(\"64kaffixes.dic\");\n    \n    BufferedWriter affixWriter = Files.newBufferedWriter(affix, StandardCharsets.UTF_8);\n    \n    // 65k affixes with flag 1, then an affix with flag 2\n    affixWriter.write(\"SET UTF-8\\nFLAG num\\nSFX 1 Y 65536\\n\");\n    for (int i = 0; i < 65536; i++) {\n      affixWriter.write(\"SFX 1 0 \" + Integer.toHexString(i) + \" .\\n\");\n    }\n    affixWriter.write(\"SFX 2 Y 1\\nSFX 2 0 s\\n\");\n    affixWriter.close();\n    \n    BufferedWriter dictWriter = Files.newBufferedWriter(dict, StandardCharsets.UTF_8);\n    \n    // drink signed with affix 2 (takes -s)\n    dictWriter.write(\"1\\ndrink/2\\n\");\n    dictWriter.close();\n    \n    try (InputStream affStream = Files.newInputStream(affix); InputStream dictStream = Files.newInputStream(dict); Directory tempDir2 = newDirectory()) {\n      if (tempDir2 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) tempDir2).setEnableVirusScanner(false);\n      }\n      Dictionary dictionary = new Dictionary(tempDir2, \"dictionary\", affStream, dictStream);\n      Stemmer stemmer = new Stemmer(dictionary);\n      // drinks should still stem to drink\n      List<CharsRef> stems = stemmer.stem(\"drinks\");\n      assertEquals(1, stems.size());\n      assertEquals(\"drink\", stems.get(0).toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"f4abec28b874149a7223e32cc7a01704c27790de":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["f4abec28b874149a7223e32cc7a01704c27790de"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}