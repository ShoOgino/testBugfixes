{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","commits":[{"id":"913fa4c710b6d1168655966e59f0f4de566907a8","date":1327858476,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicIndexReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicIndexReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["913fa4c710b6d1168655966e59f0f4de566907a8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"913fa4c710b6d1168655966e59f0f4de566907a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["913fa4c710b6d1168655966e59f0f4de566907a8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"913fa4c710b6d1168655966e59f0f4de566907a8":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}