{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertSame(DocIdSet.EMPTY_DOCIDSET, cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetIteratorFilter\";\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":null,"sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetIteratorFilter\";\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testNullDocIdSetIterator().mjava","sourceNew":null,"sourceOld":"  public void testNullDocIdSetIterator() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n\n    final Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetIteratorFilter\";\n      }\n    };\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // the caching filter should return the empty set constant\n    assertNull(cacher.getDocIdSet(context, context.reader().getLiveDocs()));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["dc06632ede7e48a5ddc6917badec25c8336feedc","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c6f080a2ab37c464dd98db173f6cbf10dc74f211","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}