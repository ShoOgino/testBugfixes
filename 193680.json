{"path":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.shutdown();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        MockLockFactory lf = new MockLockFactory();\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory(lf));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        MockLockFactory lf = new MockLockFactory();\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory(lf));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        MockLockFactory lf = new MockLockFactory();\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory(lf));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        MockLockFactory lf = new MockLockFactory();\n        Directory dir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory(lf));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        MockLockFactory lf = new MockLockFactory();\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory(lf));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["285cdc737de75b7cc7c284a156b20214deb67bca"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d77dafd89756a5161d244985903e3487ca109182":["618635065f043788c9e034f96ca5cd5cea1b4592"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["d77dafd89756a5161d244985903e3487ca109182"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"285cdc737de75b7cc7c284a156b20214deb67bca":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}