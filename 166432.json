{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#toBytes(long).mjava","commits":[{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#toBytes(long).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#toBytes(long).mjava","sourceNew":"  // encodes a long into a BytesRef as VLong so that we get varying number of bytes when we update\n  static BytesRef toBytes(long value) {\n    BytesRef bytes = new BytesRef(10); // negative longs may take 10 bytes\n    while ((value & ~0x7FL) != 0L) {\n      bytes.bytes[bytes.length++] = (byte) ((value & 0x7FL) | 0x80L);\n      value >>>= 7;\n    }\n    bytes.bytes[bytes.length++] = (byte) value;\n    return bytes;\n  }\n\n","sourceOld":"  // encodes a long into a BytesRef as VLong so that we get varying number of bytes when we update\n  static BytesRef toBytes(long value) {\n    BytesRef bytes = new BytesRef(10); // negative longs may take 10 bytes\n    while ((value & ~0x7FL) != 0L) {\n      bytes.bytes[bytes.length++] = (byte) ((value & 0x7FL) | 0x80L);\n      value >>>= 7;\n    }\n    bytes.bytes[bytes.length++] = (byte) value;\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}