{"path":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee","date":1298483754,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat <= fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":["2123bddbd65dea198cac380540636ce43a880403"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat <= fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat <= fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat <= fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat <= fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"692804e172a5810620fac3194db7b7616a21ad3d":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"692804e172a5810620fac3194db7b7616a21ad3d":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}