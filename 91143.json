{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          File baseDir = createTempDir().toFile();\n          File solrHomeDir = new File(getArg(\"-s\", args));\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, baseDir, new File(solrHomeDir, \"solr.xml\"), jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        if (cmdLine.indexOf(\"post.jar\") != -1) {\n          // invocation of the post.jar file ... we'll just hit the SimplePostTool directly vs. trying to invoke another JVM\n          List<String> argsToSimplePostTool = new ArrayList<String>();\n          boolean afterPostJarArg = false;\n          for (String arg : cmd.getArguments()) {\n            if (arg.startsWith(\"-D\")) {\n              arg = arg.substring(2);\n              int eqPos = arg.indexOf(\"=\");\n              System.setProperty(arg.substring(0,eqPos), arg.substring(eqPos+1));\n            } else {\n              if (arg.endsWith(\"post.jar\")) {\n                afterPostJarArg = true;\n              } else {\n                if (afterPostJarArg) {\n                  argsToSimplePostTool.add(arg);\n                }\n              }\n            }\n          }\n          SimplePostTool.main(argsToSimplePostTool.toArray(new String[0]));\n        } else {\n          log.info(\"Executing command: \"+cmdLine);\n          try {\n            return super.execute(cmd);\n          } catch (Exception exc) {\n            log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n            throw exc;\n          }\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c717b53c062b652733f85b2667f3422bd13ea","date":1439481135,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          File baseDir = createTempDir().toFile();\n          File solrHomeDir = new File(getArg(\"-s\", args));\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, baseDir, new File(solrHomeDir, \"solr.xml\"), jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          File baseDir = createTempDir().toFile();\n          File solrHomeDir = new File(getArg(\"-s\", args));\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, baseDir, new File(solrHomeDir, \"solr.xml\"), jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        if (cmdLine.indexOf(\"post.jar\") != -1) {\n          // invocation of the post.jar file ... we'll just hit the SimplePostTool directly vs. trying to invoke another JVM\n          List<String> argsToSimplePostTool = new ArrayList<String>();\n          boolean afterPostJarArg = false;\n          for (String arg : cmd.getArguments()) {\n            if (arg.startsWith(\"-D\")) {\n              arg = arg.substring(2);\n              int eqPos = arg.indexOf(\"=\");\n              System.setProperty(arg.substring(0,eqPos), arg.substring(eqPos+1));\n            } else {\n              if (arg.endsWith(\"post.jar\")) {\n                afterPostJarArg = true;\n              } else {\n                if (afterPostJarArg) {\n                  argsToSimplePostTool.add(arg);\n                }\n              }\n            }\n          }\n          SimplePostTool.main(argsToSimplePostTool.toArray(new String[0]));\n        } else {\n          log.info(\"Executing command: \"+cmdLine);\n          try {\n            return super.execute(cmd);\n          } catch (Exception exc) {\n            log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n            throw exc;\n          }\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          File baseDir = createTempDir().toFile();\n          File solrHomeDir = new File(getArg(\"-s\", args));\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, baseDir, new File(solrHomeDir, \"solr.xml\"), jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              Path logDir = createTempDir(\"solr_logs\");\n              System.setProperty(\"solr.log.dir\", logDir.toString());\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              Path logDir = createTempDir(\"solr_logs\");\n              System.setProperty(\"solr.log.dir\", logDir.toString());\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#execute(org.apache.commons.exec.CommandLine).mjava","sourceNew":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              Path logDir = createTempDir(\"solr_logs\");\n              System.setProperty(\"solr.log.dir\", logDir.toString());\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port {}\", port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: {}\", cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [{}] failed due to: {}\", cmdLine, exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {\n      // collect the commands as they are executed for analysis by the test\n      commandsExecuted.add(cmd);\n\n      String exe = cmd.getExecutable();\n      if (exe.endsWith(\"solr\")) {\n        String[] args = cmd.getArguments();\n        if (\"start\".equals(args[0])) {\n          if (!hasFlag(\"-cloud\", args) && !hasFlag(\"-c\", args))\n            return startStandaloneSolr(args);\n\n          String solrHomeDir = getArg(\"-s\", args);\n          int port = Integer.parseInt(getArg(\"-p\", args));\n          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve(\"solr.xml\")), Charset.defaultCharset());\n\n          JettyConfig jettyConfig =\n              JettyConfig.builder().setContext(\"/solr\").setPort(port).build();\n          try {\n            if (solrCloudCluster == null) {\n              Path logDir = createTempDir(\"solr_logs\");\n              System.setProperty(\"solr.log.dir\", logDir.toString());\n              System.setProperty(\"host\", \"localhost\");\n              System.setProperty(\"jetty.port\", String.valueOf(port));\n              solrCloudCluster =\n                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);\n            } else {\n              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works\n              throw new IllegalArgumentException(\"Only launching one SolrCloud node is supported by this test!\");\n            }\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        } else if (\"stop\".equals(args[0])) {\n\n          int port = Integer.parseInt(getArg(\"-p\", args));\n\n          // stop the requested node\n          if (standaloneSolr != null) {\n            int localPort = standaloneSolr.getLocalPort();\n            if (port == localPort) {\n              try {\n                standaloneSolr.stop();\n                log.info(\"Stopped standalone Solr instance running on port \"+port);\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr is running on port \"+port);\n            }\n          } else {\n            if (solrCloudCluster != null) {\n              try {\n                solrCloudCluster.shutdown();\n                log.info(\"Stopped SolrCloud test cluster\");\n              } catch (Exception e) {\n                if (e instanceof RuntimeException) {\n                  throw (RuntimeException)e;\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n            } else {\n              throw new IllegalArgumentException(\"No Solr nodes found to stop!\");\n            }\n          }\n        }\n      } else {\n        String cmdLine = joinArgs(cmd.getArguments());\n        log.info(\"Executing command: \"+cmdLine);\n        try {\n          return super.execute(cmd);\n        } catch (Exception exc) {\n          log.error(\"Execute command [\"+cmdLine+\"] failed due to: \"+exc, exc);\n          throw exc;\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["b05c717b53c062b652733f85b2667f3422bd13ea"],"b05c717b53c062b652733f85b2667f3422bd13ea":["4ca20be81c9284c840498143264e583ccbb8525a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["b05c717b53c062b652733f85b2667f3422bd13ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"b05c717b53c062b652733f85b2667f3422bd13ea":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}