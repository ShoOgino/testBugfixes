{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"/dev/null","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"/dev/null","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"/dev/null","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (!rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished().equals(ZkStateReader.ACTIVE)) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (!rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished().equals(ZkStateReader.ACTIVE)) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess, true);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processSync(ResponseBuilder,int,String).mjava","sourceNew":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    try (PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess)) {\n      boolean success = peerSync.sync().isSuccess();\n      // TODO: more complex response?\n      rb.rsp.add(\"sync\", success);\n    } catch (IOException e) {\n      log.error(\"Error while closing\", e);\n    }\n  }\n\n","sourceOld":"  public void processSync(ResponseBuilder rb, int nVersions, String sync) {\n    \n    boolean onlyIfActive = rb.req.getParams().getBool(\"onlyIfActive\", false);\n    \n    if (onlyIfActive) {\n      if (rb.req.getCore().getCoreDescriptor().getCloudDescriptor().getLastPublished() != Replica.State.ACTIVE) {\n        log.info(\"Last published state was not ACTIVE, cannot sync.\");\n        rb.rsp.add(\"sync\", \"false\");\n        return;\n      }\n    }\n    \n    List<String> replicas = StrUtils.splitSmart(sync, \",\", true);\n    \n    boolean cantReachIsSuccess = rb.req.getParams().getBool(\"cantReachIsSuccess\", false);\n    \n    PeerSync peerSync = new PeerSync(rb.req.getCore(), replicas, nVersions, cantReachIsSuccess);\n    boolean success = peerSync.sync().isSuccess();\n    \n    // TODO: more complex response?\n    rb.rsp.add(\"sync\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a219f1dcad1700e84807666bdbd2b573e8de7021","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ba055e19afc289adcb5bedaf68513793a7254012":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a219f1dcad1700e84807666bdbd2b573e8de7021","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a6378064655e76cd7b908b1cab4ce425b384b508","1525b4dfbc0d413b8d7247da232009778e624836"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a219f1dcad1700e84807666bdbd2b573e8de7021":["bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a6378064655e76cd7b908b1cab4ce425b384b508"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"1525b4dfbc0d413b8d7247da232009778e624836":["f2126b84bd093fa3d921582a109a0ee578c28126","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba055e19afc289adcb5bedaf68513793a7254012","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0d22ac6a4146774c1bc8400160fc0b6150294e92","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}