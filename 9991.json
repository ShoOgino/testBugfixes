{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = Objects.requireNonNull(query);\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94a9716ed3ae95f79ad234a576d7c7dd34ce7769","date":1453297016,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = Objects.requireNonNull(query);\n    this.rewriteMethod = selectRewriteMethod(query);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = Objects.requireNonNull(query);\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3","date":1453303963,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = Objects.requireNonNull(query);\n    this.rewriteMethod = selectRewriteMethod(query);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = Objects.requireNonNull(query);\n    this.rewriteMethod = selectRewriteMethod(query);\n  }\n\n","bugFix":["744486748bc5bee772100e49230e5bca39bac99a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"94a9716ed3ae95f79ad234a576d7c7dd34ce7769":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3":["94a9716ed3ae95f79ad234a576d7c7dd34ce7769"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["94a9716ed3ae95f79ad234a576d7c7dd34ce7769"],"94a9716ed3ae95f79ad234a576d7c7dd34ce7769":["9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3"],"9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}