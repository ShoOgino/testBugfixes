{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13ea66b549e25413e4e3057bf3492ab828899110","date":1454958424,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","sourceNew":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) throws IOException {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n\n      message(\"top: delete if no ref pendingMergeFiles=\" + pendingMergeFiles);\n      for(String fileName : pendingMergeFiles) {\n        deleter.deleteIfNoRef(fileName);\n      }\n\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","sourceOld":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0febf62c2d9baeee7db38998d9197700ccbab9","date":1454958476,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","sourceNew":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) throws IOException {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n\n      message(\"top: delete if no ref pendingMergeFiles=\" + pendingMergeFiles);\n      for(String fileName : pendingMergeFiles) {\n        deleter.deleteIfNoRef(fileName);\n      }\n\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","sourceOld":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#maybeNewPrimary(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Called when the primary changed */\n  protected synchronized void maybeNewPrimary(long newPrimaryGen) throws IOException {\n    if (newPrimaryGen != lastPrimaryGen) {\n      message(\"top: now change lastPrimaryGen from \" + lastPrimaryGen + \" to \" + newPrimaryGen + \" pendingMergeFiles=\" + pendingMergeFiles);\n\n      message(\"top: delete if no ref pendingMergeFiles=\" + pendingMergeFiles);\n      for(String fileName : pendingMergeFiles) {\n        deleter.deleteIfNoRef(fileName);\n      }\n\n      assert newPrimaryGen > lastPrimaryGen: \"newPrimaryGen=\" + newPrimaryGen + \" vs lastPrimaryGen=\" + lastPrimaryGen;\n      lastPrimaryGen = newPrimaryGen;\n      pendingMergeFiles.clear();\n    } else {\n      message(\"top: keep current lastPrimaryGen=\" + lastPrimaryGen);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b0febf62c2d9baeee7db38998d9197700ccbab9":["0d49a158012a8ff48f328a4558e4bfcffbaed16f","13ea66b549e25413e4e3057bf3492ab828899110"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","13ea66b549e25413e4e3057bf3492ab828899110"],"13ea66b549e25413e4e3057bf3492ab828899110":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b0febf62c2d9baeee7db38998d9197700ccbab9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13ea66b549e25413e4e3057bf3492ab828899110":["1b0febf62c2d9baeee7db38998d9197700ccbab9","68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1b0febf62c2d9baeee7db38998d9197700ccbab9","13ea66b549e25413e4e3057bf3492ab828899110"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1b0febf62c2d9baeee7db38998d9197700ccbab9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}