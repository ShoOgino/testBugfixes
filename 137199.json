{"path":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryRandCollating().mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryRandCollating().mjava","pathOld":"/dev/null","sourceNew":"    public void testRangeQueryRandCollating() throws IOException {\n        // NOTE: uses index build in *super* setUp\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n        ScoreDoc[] result;\n        \n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        // test extremes, bounded on both ends\n        \n        result = search.search(csrq(\"rand\",minRP,maxRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"find all\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,maxRP,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,maxRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n        result = search.search(csrq(\"rand\",minRP,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n        result = search.search(csrq(\"rand\",minRP,null,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"smallest and up\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",null,maxRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"biggest and down\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,null,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n        result = search.search(csrq(\"rand\",null,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n        result = search.search(csrq(\"rand\",minRP,minRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"min,min,F,F,c\", 0, result.length);\n        result = search.search(csrq(\"rand\",maxRP,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,max,F,F,c\", 0, result.length);\n                     \n        result = search.search(csrq(\"rand\",minRP,minRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"min,min,T,T,c\", 1, result.length);\n        result = search.search(csrq(\"rand\",null,minRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n        result = search.search(csrq(\"rand\",maxRP,maxRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,max,T,T,c\", 1, result.length);\n        result = search.search(csrq(\"rand\",maxRP,null,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryRandCollating().mjava","sourceNew":null,"sourceOld":"    public void testRangeQueryRandCollating() throws IOException {\n        // NOTE: uses index build in *super* setUp\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n        ScoreDoc[] result;\n        \n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        // test extremes, bounded on both ends\n        \n        result = search.search(csrq(\"rand\",minRP,maxRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"find all\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,maxRP,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,maxRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n        result = search.search(csrq(\"rand\",minRP,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n        // unbounded\n\n        result = search.search(csrq(\"rand\",minRP,null,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"smallest and up\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",null,maxRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"biggest and down\", numDocs, result.length);\n\n        result = search.search(csrq(\"rand\",minRP,null,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n        result = search.search(csrq(\"rand\",null,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n        // very small sets\n\n        result = search.search(csrq(\"rand\",minRP,minRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"min,min,F,F,c\", 0, result.length);\n        result = search.search(csrq(\"rand\",maxRP,maxRP,F,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,max,F,F,c\", 0, result.length);\n                     \n        result = search.search(csrq(\"rand\",minRP,minRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"min,min,T,T,c\", 1, result.length);\n        result = search.search(csrq(\"rand\",null,minRP,F,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n        result = search.search(csrq(\"rand\",maxRP,maxRP,T,T,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,max,T,T,c\", 1, result.length);\n        result = search.search(csrq(\"rand\",maxRP,null,T,F,c), null, numDocs).scoreDocs;\n        assertEquals(\"max,nul,T,T,c\", 1, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}