{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestSingelHostConcurrencyLock#testSetLock().mjava","commits":[{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestSingelHostConcurrencyLock#testSetLock().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.setLock(String)'\n     */\n    public void testSetLock() throws InterruptedException {\n        final String key = \"someKey\";\n        final String nextKey = \"fooKey\";\n        assertTrue(lock.setLock(key));\n        assertTrue(lock.isKeyLocked(key));\n        \n        try{\n            this.lock.setLock(key);\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        try{\n            assertTrue(lock.setLock(nextKey));\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        Thread t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(key);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertFalse(threadResult);\n        \n        t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(nextKey);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertTrue(threadResult);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestSingelHostConcurrencyLock#testSetLock().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestSingelHostConcurrencyLock#testSetLock().mjava","sourceNew":"    /*\n     * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.setLock(String)'\n     */\n    public void testSetLock() throws InterruptedException {\n        final String key = \"someKey\";\n        final String nextKey = \"fooKey\";\n        assertTrue(lock.setLock(key));\n        assertTrue(lock.isKeyLocked(key));\n        \n        try{\n            this.lock.setLock(key);\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        try{\n            assertTrue(lock.setLock(nextKey));\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        Thread t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(key);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertFalse(threadResult);\n        \n        t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(nextKey);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertTrue(threadResult);\n    }\n\n","sourceOld":"    /*\n     * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.setLock(String)'\n     */\n    public void testSetLock() throws InterruptedException {\n        final String key = \"someKey\";\n        final String nextKey = \"fooKey\";\n        assertTrue(lock.setLock(key));\n        assertTrue(lock.isKeyLocked(key));\n        \n        try{\n            this.lock.setLock(key);\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        try{\n            assertTrue(lock.setLock(nextKey));\n            fail(\"thread has already locked the key\");\n        }catch (Exception e) {\n            // TODO: handle exception\n        }\n        \n        Thread t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(key);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertFalse(threadResult);\n        \n        t = new Thread(new Runnable(){\n            public void run(){\n                threadResult = lock.setLock(nextKey);\n              \n                \n                \n            }\n        });\n        t.start();\n        t.join(300);\n        assertTrue(threadResult);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}