{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}