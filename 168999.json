{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilterFactory#testInvalidArguments().mjava","commits":[{"id":"d47c249ea6af39c2da32cebcf113b7ac5c12bad8","date":1398390859,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilterFactory#testInvalidArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that invalid arguments result in exception */\n  public void testInvalidArguments() throws Exception {\n    try {\n      Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n      TokenStream stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n      ((Tokenizer)stream).setReader(reader);\n      tokenFilterFactory(\"CodepointCount\",\n          CodepointCountFilterFactory.MIN_KEY, \"5\",\n          CodepointCountFilterFactory.MAX_KEY, \"4\").create(stream);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"maximum length must not be greater than minimum length\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilterFactory#testInvalidArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that invalid arguments result in exception */\n  public void testInvalidArguments() throws Exception {\n    try {\n      Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n      TokenStream stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n      ((Tokenizer)stream).setReader(reader);\n      tokenFilterFactory(\"CodepointCount\",\n          CodepointCountFilterFactory.MIN_KEY, \"5\",\n          CodepointCountFilterFactory.MAX_KEY, \"4\").create(stream);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"maximum length must not be greater than minimum length\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilterFactory#testInvalidArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilterFactory#testInvalidArguments().mjava","sourceNew":"  /** Test that invalid arguments result in exception */\n  public void testInvalidArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n      TokenStream stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n      ((Tokenizer)stream).setReader(reader);\n      tokenFilterFactory(\"CodepointCount\",\n          CodepointCountFilterFactory.MIN_KEY, \"5\",\n          CodepointCountFilterFactory.MAX_KEY, \"4\").create(stream);\n    });\n    assertTrue(expected.getMessage().contains(\"maximum length must not be greater than minimum length\"));\n  }\n\n","sourceOld":"  /** Test that invalid arguments result in exception */\n  public void testInvalidArguments() throws Exception {\n    try {\n      Reader reader = new StringReader(\"foo foobar super-duper-trooper\");\n      TokenStream stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n      ((Tokenizer)stream).setReader(reader);\n      tokenFilterFactory(\"CodepointCount\",\n          CodepointCountFilterFactory.MIN_KEY, \"5\",\n          CodepointCountFilterFactory.MAX_KEY, \"4\").create(stream);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"maximum length must not be greater than minimum length\"));\n    }\n  }\n\n","bugFix":["d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}