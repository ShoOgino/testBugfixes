{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","commits":[{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(coreNodeName).getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(coreNodeName).getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97f7a8933509d5857a0f454fa2e6beffe3744bc9","date":1450117004,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(coreNodeName).getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      final DocCollection docCollection = reader.getClusterState().getCollectionOrNull(collection);\n      if(docCollection != null && docCollection.getSlice(shard)!=null) {\n        Slice slice = docCollection.getSlice(shard);\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      final DocCollection docCollection = reader.getClusterState().getCollectionOrNull(collection);\n      if(docCollection != null && docCollection.getSlice(shard)!=null) {\n        Slice slice = docCollection.getSlice(shard);\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName,\n      Replica.State expectedState) throws InterruptedException, TimeoutException {\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(shard) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName).getState() == expectedState);\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      final DocCollection docCollection = reader.getClusterState().getCollectionOrNull(collection);\n      if(docCollection != null && docCollection.getSlice(shard)!=null) {\n        Slice slice = docCollection.getSlice(shard);\n        Replica replica = slice.getReplicasMap().get(coreNodeName);\n        if (replica != null) {\n          coreState = replica.getState();\n          if(coreState == expectedState) {\n            return;\n          }\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01","344b0840364d990b29b97467bfcc766ff8325d11","97f7a8933509d5857a0f454fa2e6beffe3744bc9","1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName,\n      Replica.State expectedState) throws InterruptedException, TimeoutException {\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (collectionState) -> collectionState != null && collectionState.getSlice(shard) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName).getState() == expectedState);\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName,\n      Replica.State expectedState) throws InterruptedException, TimeoutException {\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(shard) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName).getState() == expectedState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#verifyReplicaStatus(ZkStateReader,String,String,String,Replica.State).mjava","sourceNew":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName,\n      Replica.State expectedState) throws InterruptedException, TimeoutException {\n    log.info(\"verifyReplicaStatus ({}) shard={} coreNodeName={}\", collection, shard, coreNodeName);\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (collectionState) -> collectionState != null && collectionState.getSlice(shard) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName).getState() == expectedState);\n  }\n\n","sourceOld":"  public static void verifyReplicaStatus(ZkStateReader reader, String collection, String shard, String coreNodeName,\n      Replica.State expectedState) throws InterruptedException, TimeoutException {\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (collectionState) -> collectionState != null && collectionState.getSlice(shard) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName) != null\n            && collectionState.getSlice(shard).getReplicasMap().get(coreNodeName).getState() == expectedState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["97f7a8933509d5857a0f454fa2e6beffe3744bc9","344b0840364d990b29b97467bfcc766ff8325d11"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["97f7a8933509d5857a0f454fa2e6beffe3744bc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"97f7a8933509d5857a0f454fa2e6beffe3744bc9":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["b06f42faae0ab79dde1a569756990bb96283580d"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["97f7a8933509d5857a0f454fa2e6beffe3744bc9"],"97f7a8933509d5857a0f454fa2e6beffe3744bc9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}