{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOptimizeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 20;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 20;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 20;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testForceMergeExceptions().mjava","sourceNew":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","sourceOld":"  public void testForceMergeExceptions() throws IOException {\n    Directory startDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(100);\n    IndexWriter w = new IndexWriter(startDir, conf);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    int iter = TEST_NIGHTLY ? 200 : 10;\n    for(int i=0;i<iter;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter \" + i);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory(startDir, newIOContext(random)));\n      conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler());\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5);\n      try {\n        w.forceMerge(1);\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"forceMerge threw IOException without root cause\");\n      }\n      dir.setRandomIOExceptionRate(0);\n      w.close();\n      dir.close();\n    }\n    startDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}