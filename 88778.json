{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["072f211dfa8387028bb978d128c35bf9a450bbbf","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b200b1e98a34247f0d84267e31d49d1c7304673","date":1364997490,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e94f03e4cb1d65fde70cc354ea6ae54bd44424a","date":1382548304,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(getBaseUrl() + port + context + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"260a5303257b8f0a26b7d202f567a72390ec56b5","date":1393719379,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrClient httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    res = httpclient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    httpclient.add(doc8);\n    httpclient.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrServer server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrServer cloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrServer.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrServer.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrServer.setDefaultCollection(\"testalias\");\n    res = cloudSolrServer.query(query);\n    cloudSolrServer.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    server = new HttpSolrServer(buildUrl(port) + \"/testalias\");\n    res = server.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    server.shutdown();\n    server = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrServer client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrServer(getBaseUrl((HttpSolrServer) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    client.add(doc8);\n    client.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef90f6280858118198b4172ffafde21e3913b00","date":1420047505,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrClient httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    res = httpclient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    httpclient.add(doc8);\n    httpclient.commit();\n    res = httpclient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrClient httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    res = httpclient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    httpclient.add(doc8);\n    httpclient.commit();\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    HttpSolrClient httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    res = httpclient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    httpclient = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n        \"humpty dumpy4 sat on a walls\");\n    httpclient.add(doc8);\n    httpclient.commit();\n    res = httpclient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    httpclient.shutdown();\n    httpclient = null;\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b","1cfa38e36fa296bb93d77df7d5556257dffa4535","5ef90f6280858118198b4172ffafde21e3913b00"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n  }\n\n","bugFix":null,"bugIntro":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    logger.info(\"### STARTING ACTUAL TEST\");\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n    \n    cloudClient.setDefaultCollection(\"collection1\");\n    \n    SolrInputDocument doc1 = getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc2 = getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n    SolrInputDocument doc3 = getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\");\n\n    cloudClient.add(doc1);\n    cloudClient.add(doc2);\n    cloudClient.add(doc3);\n    \n    cloudClient.commit();\n    \n    SolrInputDocument doc6 = getDoc(id, 9, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\");\n    SolrInputDocument doc7 = getDoc(id, 10, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\");\n\n    cloudClient.setDefaultCollection(\"collection2\");\n    \n    cloudClient.add(doc6);\n    cloudClient.add(doc7);\n\n    cloudClient.commit();\n    \n    // create alias\n    createAlias(\"testalias\", \"collection1\");\n    \n    // search for alias\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    QueryResponse res = cloudClient.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));\n    int port = jetty.getLocalPort();\n    HttpSolrClient client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(3, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // create alias, collection2 first because it's not on every node\n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    // search with new cloud client\n    CloudSolrClient cloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    cloudSolrClient.setParallelUpdates(random().nextBoolean());\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudSolrClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // Try with setDefaultCollection\n    query = new SolrQuery(\"*:*\");\n    cloudSolrClient.setDefaultCollection(\"testalias\");\n    res = cloudSolrClient.query(query);\n    cloudSolrClient.shutdown();\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // search for alias with random non cloud client\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // now without collections param\n    query = new SolrQuery(\"*:*\");\n    jetty = jettys.get(random().nextInt(jettys.size()));\n    port = jetty.getLocalPort();\n    client = new HttpSolrClient(buildUrl(port) + \"/testalias\");\n    res = client.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    client.shutdown();\n    client = null;\n    \n    // update alias\n    createAlias(\"testalias\", \"collection2\");\n    //checkForAlias(\"testalias\", \"collection2\");\n    \n    // search for alias\n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(2, res.getResults().getNumFound());\n    \n    // set alias to two collections\n    createAlias(\"testalias\", \"collection1,collection2\");\n    //checkForAlias(\"testalias\", \"collection1,collection2\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(5, res.getResults().getNumFound());\n    \n    // try a std client\n    // search 1 and 2, but have no collections param\n    query = new SolrQuery(\"*:*\");\n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      res = client.query(query);\n      assertEquals(5, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2\");\n    \n    // a second alias\n    createAlias(\"testalias2\", \"collection2\");\n    \n    client = new HttpSolrClient(getBaseUrl((HttpSolrClient) clients.get(0)) + \"/testalias\");\n    try {\n      SolrInputDocument doc8 = getDoc(id, 11, i1, -600, tlong, 600, t1,\n          \"humpty dumpy4 sat on a walls\");\n      client.add(doc8);\n      client.commit();\n      res = client.query(query);\n      assertEquals(3, res.getResults().getNumFound());\n    } finally {\n      client.shutdown();\n      client = null;\n    }\n    \n    createAlias(\"testalias\", \"collection2,collection1\");\n    \n    query = new SolrQuery(\"*:*\");\n    query.set(\"collection\", \"testalias\");\n    res = cloudClient.query(query);\n    assertEquals(6, res.getResults().getNumFound());\n    \n    deleteAlias(\"testalias\");\n    deleteAlias(\"testalias2\");\n\n    boolean sawException = false;\n    try {\n      res = cloudClient.query(query);\n    } catch (SolrException e) {\n      sawException = true;\n    }\n    assertTrue(sawException);\n\n    logger.info(\"### FINISHED ACTUAL TEST\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["260a5303257b8f0a26b7d202f567a72390ec56b5"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["1b200b1e98a34247f0d84267e31d49d1c7304673"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1b200b1e98a34247f0d84267e31d49d1c7304673","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"abb23fcc2461782ab204e61213240feb77d355aa":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"bafca15d8e408346a67f4282ad1143b88023893b":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"2e94f03e4cb1d65fde70cc354ea6ae54bd44424a":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"260a5303257b8f0a26b7d202f567a72390ec56b5":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["2e94f03e4cb1d65fde70cc354ea6ae54bd44424a"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1b200b1e98a34247f0d84267e31d49d1c7304673":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"5ef90f6280858118198b4172ffafde21e3913b00":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["5ef90f6280858118198b4172ffafde21e3913b00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["bafca15d8e408346a67f4282ad1143b88023893b"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2e94f03e4cb1d65fde70cc354ea6ae54bd44424a"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["1b200b1e98a34247f0d84267e31d49d1c7304673"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["abb23fcc2461782ab204e61213240feb77d355aa"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["260a5303257b8f0a26b7d202f567a72390ec56b5"],"bafca15d8e408346a67f4282ad1143b88023893b":["5ef90f6280858118198b4172ffafde21e3913b00"],"2e94f03e4cb1d65fde70cc354ea6ae54bd44424a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"260a5303257b8f0a26b7d202f567a72390ec56b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"1b200b1e98a34247f0d84267e31d49d1c7304673":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"5ef90f6280858118198b4172ffafde21e3913b00":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}