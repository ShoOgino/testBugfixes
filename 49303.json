{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","commits":[{"id":"2ad87868b299ae70f519de3945968de8f3604216","date":1380203849,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"/dev/null","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.keyStore) {\n        sslcontext.setKeyStorePath(sslConfig.keyStore);\n      }\n      if (null != sslConfig.keyStorePassword) {\n        sslcontext.setKeyStorePassword(System\n            .getProperty(\"solr.javax.net.ssl.keyStorePassword\"));\n      }\n      if (null != sslConfig.trustStore) {\n        sslcontext.setTrustStore(System\n            .getProperty(\"solr.javax.net.ssl.trustStore\"));\n      }\n      if (null != sslConfig.trustStorePassword) {\n        sslcontext.setTrustStorePassword(sslConfig.trustStorePassword);\n      }\n      sslcontext.setNeedClientAuth(sslConfig.clientAuth);\n    } else {\n      boolean jettySsl = Boolean.getBoolean(\"tests.jettySsl\");\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.keyStore) {\n        sslcontext.setKeyStorePath(sslConfig.keyStore);\n      }\n      if (null != sslConfig.keyStorePassword) {\n        sslcontext.setKeyStorePassword(sslConfig.keyStorePassword);\n      }\n      if (null != sslConfig.trustStore) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.trustStore));\n      }\n      if (null != sslConfig.trustStorePassword) {\n        sslcontext.setTrustStorePassword(sslConfig.trustStorePassword);\n      }\n      sslcontext.setNeedClientAuth(sslConfig.clientAuth);\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.keyStore) {\n        sslcontext.setKeyStorePath(sslConfig.keyStore);\n      }\n      if (null != sslConfig.keyStorePassword) {\n        sslcontext.setKeyStorePassword(System\n            .getProperty(\"solr.javax.net.ssl.keyStorePassword\"));\n      }\n      if (null != sslConfig.trustStore) {\n        sslcontext.setTrustStore(System\n            .getProperty(\"solr.javax.net.ssl.trustStore\"));\n      }\n      if (null != sslConfig.trustStorePassword) {\n        sslcontext.setTrustStorePassword(sslConfig.trustStorePassword);\n      }\n      sslcontext.setNeedClientAuth(sslConfig.clientAuth);\n    } else {\n      boolean jettySsl = Boolean.getBoolean(\"tests.jettySsl\");\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dee311b2816356910363a8d15fc076caf6367eb","date":1392012517,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.keyStore) {\n        sslcontext.setKeyStorePath(sslConfig.keyStore);\n      }\n      if (null != sslConfig.keyStorePassword) {\n        sslcontext.setKeyStorePassword(sslConfig.keyStorePassword);\n      }\n      if (null != sslConfig.trustStore) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.trustStore));\n      }\n      if (null != sslConfig.trustStorePassword) {\n        sslcontext.setTrustStorePassword(sslConfig.trustStorePassword);\n      }\n      sslcontext.setNeedClientAuth(sslConfig.clientAuth);\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db474afed4ffdc5df350db03f966d41dfdf1a9b","date":1397776827,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      if (null != sslConfig.getSecureRandomAlgorithm()) {\n        sslcontext.setSecureRandomAlgorithm(sslConfig.getSecureRandomAlgorithm());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd","date":1397789808,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      if (null != sslConfig.getSecureRandomAlgorithm()) {\n        sslcontext.setSecureRandomAlgorithm(sslConfig.getSecureRandomAlgorithm());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStorePath(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStorePath\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStore(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":null,"sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStorePath(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStorePath\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#sslInit(boolean,SslContextFactory).mjava","sourceNew":null,"sourceOld":"  private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {\n    if (useSsl && sslConfig != null) {\n      if (null != sslConfig.getKeyStore()) {\n        sslcontext.setKeyStorePath(sslConfig.getKeyStore());\n      }\n      if (null != sslConfig.getKeyStorePassword()) {\n        sslcontext.setKeyStorePassword(sslConfig.getKeyStorePassword());\n      }\n      if (null != sslConfig.getTrustStore()) {\n        sslcontext.setTrustStorePath(System\n            .getProperty(sslConfig.getTrustStore()));\n      }\n      if (null != sslConfig.getTrustStorePassword()) {\n        sslcontext.setTrustStorePassword(sslConfig.getTrustStorePassword());\n      }\n      sslcontext.setNeedClientAuth(sslConfig.isClientAuthMode());\n    } else {\n      boolean jettySsl = Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"));\n\n      if (jettySsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStorePath\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","c66158bb16e902a21272772f1b911f04b1a55abb"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["2ad87868b299ae70f519de3945968de8f3604216"],"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd":["0db474afed4ffdc5df350db03f966d41dfdf1a9b"],"2ad87868b299ae70f519de3945968de8f3604216":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db474afed4ffdc5df350db03f966d41dfdf1a9b":["9dee311b2816356910363a8d15fc076caf6367eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dee311b2816356910363a8d15fc076caf6367eb":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["9dee311b2816356910363a8d15fc076caf6367eb"],"2ad87868b299ae70f519de3945968de8f3604216":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"0db474afed4ffdc5df350db03f966d41dfdf1a9b":["a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ad87868b299ae70f519de3945968de8f3604216"],"9dee311b2816356910363a8d15fc076caf6367eb":["0db474afed4ffdc5df350db03f966d41dfdf1a9b"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}