{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","commits":[{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexWriterActuallyReuses() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    final MyField field1 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field1);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    TokenStream previous = field1.lastReturned;\n    assertNotNull(previous);\n    \n    final MyField field2 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field2);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    assertSame(previous, field2.lastSeen);\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","sourceNew":"  public void testIndexWriterActuallyReuses() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    final MyField field1 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field1);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    TokenStream previous = field1.lastReturned;\n    assertNotNull(previous);\n    \n    final MyField field2 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field2);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    assertSame(previous, field2.lastSeen);\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexWriterActuallyReuses() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    final MyField field1 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field1);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    TokenStream previous = field1.lastReturned;\n    assertNotNull(previous);\n    \n    final MyField field2 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field2);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    assertSame(previous, field2.lastSeen);\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testIndexWriterActuallyReuses().mjava","sourceNew":"  public void testIndexWriterActuallyReuses() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    final MyField field1 = new MyField();\n    iw.addDocument(Collections.singletonList(field1));\n    TokenStream previous = field1.lastReturned;\n    assertNotNull(previous);\n    \n    final MyField field2 = new MyField();\n    iw.addDocument(Collections.singletonList(field2));\n    assertSame(previous, field2.lastSeen);\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexWriterActuallyReuses() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    final MyField field1 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field1);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    TokenStream previous = field1.lastReturned;\n    assertNotNull(previous);\n    \n    final MyField field2 = new MyField();\n    iw.addDocument(new IndexDocument() {\n      @Override\n      public Iterable<? extends IndexableField> indexableFields() {\n        return Collections.singletonList(field2);\n      }\n      @Override\n      public Iterable<StorableField> storableFields() {\n        return Collections.emptyList();\n      }\n    });\n    assertSame(previous, field2.lastSeen);\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}