{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfbc64812ce67598712702d2e4c81bfefccdd57","date":1310457524,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04d96eb3480582ebc4cc14711c2ca1a032791d75","date":1327856672,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!DirectoryReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(DirectoryReader.open(dir));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(Version.LUCENE_CURRENT, input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["edfbc64812ce67598712702d2e4c81bfefccdd57","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"edfbc64812ce67598712702d2e4c81bfefccdd57":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["edfbc64812ce67598712702d2e4c81bfefccdd57","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","04d96eb3480582ebc4cc14711c2ca1a032791d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"edfbc64812ce67598712702d2e4c81bfefccdd57":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","04d96eb3480582ebc4cc14711c2ca1a032791d75","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}