{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   * \n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   * \n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   * \n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   * \n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   * \n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   * \n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   * \n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   * \n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   * \n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   * \n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab30b5737e6a5d4ee74fdc889750d18d2a624471","date":1576097297,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(CommonParams.TIME_ALLOWED, paramsIn.get(CommonParams.TIME_ALLOWED,\"-1\"));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#loadParams(SolrParams,String).mjava","sourceNew":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(CommonParams.TIME_ALLOWED, paramsIn.get(CommonParams.TIME_ALLOWED,\"-1\"));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link SolrParams} for shard requests. The only parameters that are copied over from\n   * the original search request are \"q\" and \"fq\".\n   *\n   * <p>\n   * The request is sent to the {@link AnalyticsHandler} and the output will be encoded in the analytics bit-stream\n   * format generated by the {@link AnalyticsShardResponseWriter}.\n   *\n   * @param paramsIn of the original solr request\n   * @param analyticsRequest string representation\n   * @return shard request SolrParams\n   */\n  private static SolrParams loadParams(SolrParams paramsIn, String analyticsRequest) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n\n    solrParams.add(CommonParams.QT, AnalyticsHandler.NAME);\n    solrParams.add(CommonParams.WT, AnalyticsShardResponseWriter.NAME);\n    solrParams.add(CommonParams.Q, paramsIn.get(CommonParams.Q));\n    solrParams.add(CommonParams.FQ, paramsIn.getParams(CommonParams.FQ));\n    solrParams.add(AnalyticsRequestParser.analyticsParamName, analyticsRequest);\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["1e4e64b7199d2f2a17be7f3926c7532553910dce","ab30b5737e6a5d4ee74fdc889750d18d2a624471"],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab30b5737e6a5d4ee74fdc889750d18d2a624471"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["df724d84dab24a0cc54bec95a8680867adc7f171","ab30b5737e6a5d4ee74fdc889750d18d2a624471","f8061ddd97f3352007d927dae445884a6f3d857b"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}