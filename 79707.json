{"path":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    IndexReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final IndexReader r2 = r.reopen();\n        if (r != r2) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    IndexReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final IndexReader r2 = IndexReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    IndexReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final IndexReader r2 = r.reopen();\n        if (r != r2) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af906d697b0a05f75caf94b03a28adb76579c66","date":1327856985,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    IndexReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final IndexReader r2 = IndexReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    IndexReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final IndexReader r2 = IndexReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"5af906d697b0a05f75caf94b03a28adb76579c66":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","5af906d697b0a05f75caf94b03a28adb76579c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["5af906d697b0a05f75caf94b03a28adb76579c66","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5af906d697b0a05f75caf94b03a28adb76579c66":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}