{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = SloppyMath.sin(lat);\n    final double s2 = sl*sl;\n    final double cl = SloppyMath.cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * SloppyMath.cos(lon);\n    ecf[1] = (rn+alt) * cl * SloppyMath.sin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = SloppyMath.sin(lat);\n    final double s2 = sl*sl;\n    final double cl = SloppyMath.cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * SloppyMath.cos(lon);\n    ecf[1] = (rn+alt) * cl * SloppyMath.sin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sloppySin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sloppySin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":"  /**\n   * Converts from geodesic lat lon alt to geocentric earth-centered earth-fixed\n   * @param lat geodesic latitude\n   * @param lon geodesic longitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lat, double lon, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sloppySin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sloppySin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","sourceOld":"  /**\n   * Converts from geodesic lon lat alt to geocentric earth-centered earth-fixed\n   * @param lon geodesic longitude\n   * @param lat geodesic latitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lon, double lat, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sloppySin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sloppySin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#llaToECF(double,double,double,double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts from geodesic lat lon alt to geocentric earth-centered earth-fixed\n   * @param lat geodesic latitude\n   * @param lon geodesic longitude\n   * @param alt geodesic altitude\n   * @param ecf reusable earth-centered earth-fixed result\n   * @return either a new ecef array or the reusable ecf parameter\n   */\n  public static final double[] llaToECF(double lat, double lon, double alt, double[] ecf) {\n    lon = TO_RADIANS * lon;\n    lat = TO_RADIANS * lat;\n\n    final double sl = sloppySin(lat);\n    final double s2 = sl*sl;\n    final double cl = cos(lat);\n\n    if (ecf == null) {\n      ecf = new double[3];\n    }\n\n    if (lat < -PIO2 && lat > -1.001D * PIO2) {\n      lat = -PIO2;\n    } else if (lat > PIO2 && lat < 1.001D * PIO2) {\n      lat = PIO2;\n    }\n    assert (lat >= -PIO2) || (lat <= PIO2);\n\n    if (lon > StrictMath.PI) {\n      lon -= (2*StrictMath.PI);\n    }\n\n    final double rn = SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - E2 * s2);\n    ecf[0] = (rn+alt) * cl * cos(lon);\n    ecf[1] = (rn+alt) * cl * sloppySin(lon);\n    ecf[2] = ((rn*(1.0-E2))+alt)*sl;\n\n    return ecf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}