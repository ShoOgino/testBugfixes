{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec381030975b88c20fde64532548a9e9a4bc4f51","date":1432653875,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5469e1b49cf7f51c02519aff49b848ff8bbbc663","date":1454885560,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationNameValidation();\n    testAliasCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationNameValidation();\n    testAliasCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationNameValidation();\n    testAliasCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0a48d19410927367aa44ee0929e3a2ad64f1c85","date":1457685126,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2,2);\n      req.setRealtimeReplicas(1);\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2,2);\n      req.setRealtimeReplicas(1);\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2,2);\n      req.setRealtimeReplicas(1);\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(null, COLLECTION_NAME, 2, 2, 2, client, null, \"conf1\");\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2,2);\n      req.setRealtimeReplicas(1);\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2,2);\n      req.setRealtimeReplicas(1);\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      client.request(req);\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"ec381030975b88c20fde64532548a9e9a4bc4f51":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","4d3fc88a06a44fc3112186e9be4562b36713955d"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["ec381030975b88c20fde64532548a9e9a4bc4f51"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["d0a48d19410927367aa44ee0929e3a2ad64f1c85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"be320990bdc77e643388fa801e75017f19289c42":["d0a48d19410927367aa44ee0929e3a2ad64f1c85"],"06043fcf612d2cd93636c22cd062e0641406b417":["5469e1b49cf7f51c02519aff49b848ff8bbbc663","cbd8af67010775ee4b53c58597a30bbe480707ee"],"ab68488225b6a6c357dda72ed11dedca9914a192":["d0a48d19410927367aa44ee0929e3a2ad64f1c85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d0a48d19410927367aa44ee0929e3a2ad64f1c85":["06043fcf612d2cd93636c22cd062e0641406b417"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec381030975b88c20fde64532548a9e9a4bc4f51":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"61c45e99cf6676da48f19d7511c73712ad39402b":["4d3fc88a06a44fc3112186e9be4562b36713955d","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["ec381030975b88c20fde64532548a9e9a4bc4f51"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"06043fcf612d2cd93636c22cd062e0641406b417":["d0a48d19410927367aa44ee0929e3a2ad64f1c85"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"d0a48d19410927367aa44ee0929e3a2ad64f1c85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}