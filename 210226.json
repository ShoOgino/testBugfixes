{"path":"src/java/org/apache/lucene/index/CompoundFileReader#main(String[]).mjava","commits":[{"id":"2cdd749f65a5b634ad1dc0f0cfd918606a52a8ab","date":1104411310,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Prints the filename and size of each file within a given compound file.\n     * Add the -extract flag to extract files to the current working directory.\n     * In order to make the extracted version of the index work, you have to copy\n     * the segments file from the compound index into the directory where the extracted files are stored.\n     * @param args\n     */\n    public static void main(String [] args) {\n      String dirname = null, filename = null;\n      boolean extract = false;\n\n      for (int i = 0; i < args.length; ++i) {\n        if (args[i].equals(\"-extract\")) {\n          extract = true;\n        } else if (dirname == null) {\n          dirname = args[i];\n        } else if (filename == null) {\n          filename = args[i];\n        }\n      }\n\n      if (dirname == null || filename == null) {\n        System.out.println(\"Usage: CompoundFileReader [-extract] <directory> <cfsfile>\");\n        return;\n      }\n\n      Directory dir = null;\n      CompoundFileReader cfr = null;\n        \n      try {\n        dir = FSDirectory.getDirectory(dirname, false);\n\n        cfr = new CompoundFileReader(dir, filename);\n\n        String [] files = cfr.list();\n        Arrays.sort(files);   // sort the array of filename so that the output is more readable\n        \n        for (int i = 0; i < files.length; ++i) {\n          long len = cfr.fileLength(files[i]);\n\n          if (extract) {\n            System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n            IndexInput ii = cfr.openInput(files[i]);\n\n            FileOutputStream f = new FileOutputStream(files[i]);\n            \n            // read and write with a small buffer, which is more effectiv than reading byte by byte\n            byte[] buffer = new byte[1024];\n            int chunk = buffer.length;\n            while(len > 0) {\n              final int bufLen = (int) Math.min(chunk, len);\n              ii.readBytes(buffer, 0, bufLen);\n              f.write(buffer, 0, bufLen);\n              len -= bufLen;\n            }\n            \n            f.close();\n            ii.close();\n          }\n          else\n            System.out.println(files[i] + \": \" + len + \" bytes\");\n        }\n      } catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n      finally {\n        try {\n          if (dir != null)\n            dir.close();\n          if (cfr != null)\n            cfr.close();\n        }\n        catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e33e178998a0b7c4cdc4c600a723378fa1eb3ba","date":1107539116,"type":4,"author":"Bernhard Messer","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#main(String[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Prints the filename and size of each file within a given compound file.\n     * Add the -extract flag to extract files to the current working directory.\n     * In order to make the extracted version of the index work, you have to copy\n     * the segments file from the compound index into the directory where the extracted files are stored.\n     * @param args\n     */\n    public static void main(String [] args) {\n      String dirname = null, filename = null;\n      boolean extract = false;\n\n      for (int i = 0; i < args.length; ++i) {\n        if (args[i].equals(\"-extract\")) {\n          extract = true;\n        } else if (dirname == null) {\n          dirname = args[i];\n        } else if (filename == null) {\n          filename = args[i];\n        }\n      }\n\n      if (dirname == null || filename == null) {\n        System.out.println(\"Usage: CompoundFileReader [-extract] <directory> <cfsfile>\");\n        return;\n      }\n\n      Directory dir = null;\n      CompoundFileReader cfr = null;\n        \n      try {\n        dir = FSDirectory.getDirectory(dirname, false);\n\n        cfr = new CompoundFileReader(dir, filename);\n\n        String [] files = cfr.list();\n        Arrays.sort(files);   // sort the array of filename so that the output is more readable\n        \n        for (int i = 0; i < files.length; ++i) {\n          long len = cfr.fileLength(files[i]);\n\n          if (extract) {\n            System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n            IndexInput ii = cfr.openInput(files[i]);\n\n            FileOutputStream f = new FileOutputStream(files[i]);\n            \n            // read and write with a small buffer, which is more effectiv than reading byte by byte\n            byte[] buffer = new byte[1024];\n            int chunk = buffer.length;\n            while(len > 0) {\n              final int bufLen = (int) Math.min(chunk, len);\n              ii.readBytes(buffer, 0, bufLen);\n              f.write(buffer, 0, bufLen);\n              len -= bufLen;\n            }\n            \n            f.close();\n            ii.close();\n          }\n          else\n            System.out.println(files[i] + \": \" + len + \" bytes\");\n        }\n      } catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n      finally {\n        try {\n          if (dir != null)\n            dir.close();\n          if (cfr != null)\n            cfr.close();\n        }\n        catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2cdd749f65a5b634ad1dc0f0cfd918606a52a8ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e33e178998a0b7c4cdc4c600a723378fa1eb3ba":["2cdd749f65a5b634ad1dc0f0cfd918606a52a8ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e33e178998a0b7c4cdc4c600a723378fa1eb3ba"]},"commit2Childs":{"2cdd749f65a5b634ad1dc0f0cfd918606a52a8ab":["4e33e178998a0b7c4cdc4c600a723378fa1eb3ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2cdd749f65a5b634ad1dc0f0cfd918606a52a8ab"],"4e33e178998a0b7c4cdc4c600a723378fa1eb3ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}