{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestMultiThreads(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestMultiThreads(boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestMultiThreads(boolean).mjava","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          @Override\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          @Override\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestMultiThreads(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          @Override\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}