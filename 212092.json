{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      results.add(requestMap.get(k), waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k)));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      results.add(requestMap.get(k), waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      results.add(requestMap.get(k), waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k)));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      results.add(requestMap.get(k), waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      NamedList reqResult = waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k));\n      if (INCLUDE_TOP_LEVEL_RESPONSE) {\n        results.add(requestMap.get(k), reqResult);\n      }\n      if (\"failed\".equalsIgnoreCase(((String)reqResult.get(\"STATUS\")))) {\n        log.error(\"Error from shard {}: {}\", k,  reqResult);\n        addFailure(results, k, reqResult);\n      } else {\n        addSuccess(results, k, reqResult);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      results.add(requestMap.get(k), waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k)));\n    }\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForAsyncCallsToComplete(Map[String,String],NamedList).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void waitForAsyncCallsToComplete(Map<String, String> requestMap, NamedList results) {\n    for (String k:requestMap.keySet()) {\n      log.debug(\"I am Waiting for :{}/{}\", k, requestMap.get(k));\n      NamedList reqResult = waitForCoreAdminAsyncCallToComplete(k, requestMap.get(k));\n      if (INCLUDE_TOP_LEVEL_RESPONSE) {\n        results.add(requestMap.get(k), reqResult);\n      }\n      if (\"failed\".equalsIgnoreCase(((String)reqResult.get(\"STATUS\")))) {\n        log.error(\"Error from shard {}: {}\", k,  reqResult);\n        addFailure(results, k, reqResult);\n      } else {\n        addSuccess(results, k, reqResult);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["69e6520a21709190413a63084ed135271aab1a7c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}