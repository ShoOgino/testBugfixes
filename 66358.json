{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private SolrIndexSearcher(IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= filterCacheConfig==null ? null : filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = queryResultCacheConfig==null ? null : queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = documentCacheConfig==null ? null : documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c3e698a8e53992ec65256740810a101c52247d","date":1140729061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  private SolrIndexSearcher(IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= filterCacheConfig==null ? null : filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = queryResultCacheConfig==null ? null : queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = documentCacheConfig==null ? null : documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n\n    // register self\n    SolrInfoRegistry.getRegistry().put(this.name, this);\n  }\n\n","sourceOld":"  private SolrIndexSearcher(IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= filterCacheConfig==null ? null : filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = queryResultCacheConfig==null ? null : queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = documentCacheConfig==null ? null : documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  private SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n    // register self\n    core.getInfoRegistry().put(this.name, this);\n  }\n\n","sourceOld":"  private SolrIndexSearcher(IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= filterCacheConfig==null ? null : filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = queryResultCacheConfig==null ? null : queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = documentCacheConfig==null ? null : documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n\n    // register self\n    SolrInfoRegistry.getRegistry().put(this.name, this);\n  }\n\n","bugFix":null,"bugIntro":["bfa71be65cf17963fa727d8e5f35bb35b110aa16","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["45c3e698a8e53992ec65256740810a101c52247d"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"45c3e698a8e53992ec65256740810a101c52247d":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["45c3e698a8e53992ec65256740810a101c52247d"],"45c3e698a8e53992ec65256740810a101c52247d":["6d6338c87060be5f66757a94945975f3bbd377a9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d6338c87060be5f66757a94945975f3bbd377a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}