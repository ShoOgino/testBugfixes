{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","commits":[{"id":"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","date":1434509375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads CRC32 value as a 64-bit long from the input.\n   * @throws CorruptIndexException if CRC is formatted incorrectly (wrong bits set)\n   * @throws IOException if an i/o error occurs\n   */\n  public static long readCRC(IndexInput input) throws IOException {\n    long value = input.readLong();\n    if ((value & 0xFFFFFFFF00000000L) != 0) {\n      throw new CorruptIndexException(\"Illegal CRC-32 checksum: \" + value, input);\n    }\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","sourceNew":"  /**\n   * Reads CRC32 value as a 64-bit long from the input.\n   * @throws CorruptIndexException if CRC is formatted incorrectly (wrong bits set)\n   * @throws IOException if an i/o error occurs\n   */\n  static long readCRC(IndexInput input) throws IOException {\n    long value = input.readLong();\n    if ((value & 0xFFFFFFFF00000000L) != 0) {\n      throw new CorruptIndexException(\"Illegal CRC-32 checksum: \" + value, input);\n    }\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Reads CRC32 value as a 64-bit long from the input.\n   * @throws CorruptIndexException if CRC is formatted incorrectly (wrong bits set)\n   * @throws IOException if an i/o error occurs\n   */\n  public static long readCRC(IndexInput input) throws IOException {\n    long value = input.readLong();\n    if ((value & 0xFFFFFFFF00000000L) != 0) {\n      throw new CorruptIndexException(\"Illegal CRC-32 checksum: \" + value, input);\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readCRC(IndexInput).mjava","sourceNew":"  /**\n   * Reads CRC32 value as a 64-bit long from the input.\n   * @throws CorruptIndexException if CRC is formatted incorrectly (wrong bits set)\n   * @throws IOException if an i/o error occurs\n   */\n  static long readCRC(IndexInput input) throws IOException {\n    long value = input.readLong();\n    if ((value & 0xFFFFFFFF00000000L) != 0) {\n      throw new CorruptIndexException(\"Illegal CRC-32 checksum: \" + value, input);\n    }\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Reads CRC32 value as a 64-bit long from the input.\n   * @throws CorruptIndexException if CRC is formatted incorrectly (wrong bits set)\n   * @throws IOException if an i/o error occurs\n   */\n  public static long readCRC(IndexInput input) throws IOException {\n    long value = input.readLong();\n    if ((value & 0xFFFFFFFF00000000L) != 0) {\n      throw new CorruptIndexException(\"Illegal CRC-32 checksum: \" + value, input);\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}