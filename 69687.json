{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream,boolean).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}