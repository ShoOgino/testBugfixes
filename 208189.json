{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":2,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.requiresPositions(flags)) {\n      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        // Positions were not indexed:\n        return null;\n      }\n    }\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits skipDocs, DocsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.docs(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        // Positions were not indexed:\n        return null;\n      }\n    }\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.requiresPositions(flags)) {\n      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        // Positions were not indexed:\n        return null;\n      }\n    }\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        // Positions were not indexed:\n        return null;\n      }\n    }\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n      if (fr.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        // Positions were not indexed:\n        return null;\n      }\n    }\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, reuse, flags);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits skipDocs, PostingsEnum reuse, int flags) throws IOException {\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"BTTR.docs seg=\" + segment);\n    //}\n    currentFrame.decodeMetaData();\n    //if (DEBUG) {\n    //System.out.println(\"  state=\" + currentFrame.state);\n    //}\n    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, skipDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["a9023c2bf8056230665bace786651c0716d78d31"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a9023c2bf8056230665bace786651c0716d78d31","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9023c2bf8056230665bace786651c0716d78d31":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a9023c2bf8056230665bace786651c0716d78d31":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a9023c2bf8056230665bace786651c0716d78d31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}