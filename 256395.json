{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest#testRetry().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest#testRetry().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest#testRetry().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest#testRetry().mjava","sourceNew":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}