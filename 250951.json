{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRejectedExecution().mjava","commits":[{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRejectedExecution().mjava","pathOld":"/dev/null","sourceNew":"  public void testRejectedExecution() throws IOException {\n    ExecutorService service = new TestIndexSearcher.RejectingMockExecutor();\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // To ensure that failing ExecutorService still allows query to run\n    // successfully\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRejectedExecution().mjava","sourceNew":null,"sourceOld":"  public void testRejectedExecution() throws IOException {\n    ExecutorService service = new TestIndexSearcher.RejectingMockExecutor();\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY);\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // To ensure that failing ExecutorService still allows query to run\n    // successfully\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}