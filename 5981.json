{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","sourceNew":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link NumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","sourceOld":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link NumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","sourceNew":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link NumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    LegacyNumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","sourceOld":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link NumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    NumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/LegacyNumericRangeQueryNode#setBounds(LegacyNumericQueryNode,LegacyNumericQueryNode,boolean,boolean,LegacyNumericConfig).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode#setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig).mjava","sourceNew":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link LegacyNumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link LegacyNumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(LegacyNumericQueryNode lower, LegacyNumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, LegacyNumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    LegacyNumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","sourceOld":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link NumericConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param numericConfig the {@link NumericConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(NumericQueryNode lower, NumericQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, NumericConfig numericConfig) throws QueryNodeException {\n    \n    if (numericConfig == null) {\n      throw new IllegalArgumentException(\"numericConfig cannot be null!\");\n    }\n    \n    LegacyNumericType lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = getNumericDataType(lower.getValue());\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = getNumericDataType(upper.getValue());\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(numericConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + numericConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = numericConfig;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["770342641f7b505eaa8dccdc666158bff2419109"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"770342641f7b505eaa8dccdc666158bff2419109":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}