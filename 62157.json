{"path":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","pathOld":"/dev/null","sourceNew":"  private void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      writeVal(entry.getKey());\n      writeVal(entry.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec","date":1210002569,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","sourceNew":"  public void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      writeVal(entry.getKey());\n      writeVal(entry.getValue());\n    }\n  }\n\n","sourceOld":"  private void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      writeVal(entry.getKey());\n      writeVal(entry.getValue());\n    }\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2741a8d83366225572ef1f889ee52ab2b042a13","date":1224069226,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","sourceNew":"  public void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      Object key = entry.getKey();\n      if (key instanceof String) {\n        writeExternString((String) key);\n      } else {\n        writeVal(key);\n      }\n      writeVal(entry.getValue());\n    }\n  }\n\n","sourceOld":"  public void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      writeVal(entry.getKey());\n      writeVal(entry.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeMap(Map).mjava","sourceNew":"  public void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      Object key = entry.getKey();\n      if (key instanceof String) {\n        writeExternString((String) key);\n      } else {\n        writeVal(key);\n      }\n      writeVal(entry.getValue());\n    }\n  }\n\n","sourceOld":"  public void writeMap( Map val)\n          throws IOException {\n    writeTag(MAP, val.size());\n    for (Map.Entry entry : (Set<Map.Entry>) val.entrySet()) {\n      Object key = entry.getKey();\n      if (key instanceof String) {\n        writeExternString((String) key);\n      } else {\n        writeVal(key);\n      }\n      writeVal(entry.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["d2741a8d83366225572ef1f889ee52ab2b042a13"],"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d2741a8d83366225572ef1f889ee52ab2b042a13":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"da0acfe5ceed804451d76c8f887855b3d060e132":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["d2741a8d83366225572ef1f889ee52ab2b042a13"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2741a8d83366225572ef1f889ee52ab2b042a13":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}