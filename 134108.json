{"path":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedSetDocValues,Type,BitSet,DocIdSetIterator).mjava","commits":[{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedSetDocValues,Type,BitSet,DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link SortedSetDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selection, BitSet parents, DocIdSetIterator children) {\n    SortedDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedSetSelector.wrap(sortedSet, SortedSetSelector.Type.MIN);\n        break;\n      case MAX:\n        values = SortedSetSelector.wrap(sortedSet, SortedSetSelector.Type.MAX);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedSetDocValues,Type,BitSet,DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link SortedSetDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(SortedSetDocValues sortedSet, Type selection, BitSet parents, DocIdSetIterator children) {\n    SortedDocValues values;\n    switch (selection) {\n      case MIN:\n        values = SortedSetSelector.wrap(sortedSet, SortedSetSelector.Type.MIN);\n        break;\n      case MAX:\n        values = SortedSetSelector.wrap(sortedSet, SortedSetSelector.Type.MAX);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    return wrap(values, selection, parents, children);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"30c8e5574b55d57947e989443dfde611646530ee":[],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}