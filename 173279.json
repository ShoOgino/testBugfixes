{"path":"lucene/backwards/src/java/org/apache/lucene/search/function/DocValues#compute().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/function/DocValues#compute().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/function/DocValues#compute().mjava","sourceNew":"  // compute optional values\n  private void compute() {\n    if (computed) {\n      return;\n    }\n    float sum = 0;\n    int n = 0;\n    while (true) {\n      float val;\n      try {\n        val = floatVal(n);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        break;\n      }\n      sum += val;\n      minVal = Float.isNaN(minVal) ? val : Math.min(minVal, val);\n      maxVal = Float.isNaN(maxVal) ? val : Math.max(maxVal, val);\n      ++n;\n    }\n\n    avgVal = n == 0 ? Float.NaN : sum / n;\n    computed = true;\n  }\n\n","sourceOld":"  // compute optional values\n  private void compute() {\n    if (computed) {\n      return;\n    }\n    float sum = 0;\n    int n = 0;\n    while (true) {\n      float val;\n      try {\n        val = floatVal(n);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        break;\n      }\n      sum += val;\n      minVal = Float.isNaN(minVal) ? val : Math.min(minVal, val);\n      maxVal = Float.isNaN(maxVal) ? val : Math.max(maxVal, val);\n      ++n;\n    }\n\n    avgVal = n == 0 ? Float.NaN : sum / n;\n    computed = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/function/DocValues#compute().mjava","sourceNew":null,"sourceOld":"  // compute optional values\n  private void compute() {\n    if (computed) {\n      return;\n    }\n    float sum = 0;\n    int n = 0;\n    while (true) {\n      float val;\n      try {\n        val = floatVal(n);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        break;\n      }\n      sum += val;\n      minVal = Float.isNaN(minVal) ? val : Math.min(minVal, val);\n      maxVal = Float.isNaN(maxVal) ? val : Math.max(maxVal, val);\n      ++n;\n    }\n\n    avgVal = n == 0 ? Float.NaN : sum / n;\n    computed = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}