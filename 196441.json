{"path":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","commits":[{"id":"2ab54c3a7c1fcad3ed887d6f04e292116c375023","date":1441375525,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    Query rewritten = q.rewrite(reader);\n    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    Query rewritten = q.rewrite(reader);\n    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8b3f2faaf05547a6ed4e2769b664522af9514b3","date":1466522779,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","bugFix":["2ab54c3a7c1fcad3ed887d6f04e292116c375023"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/BoostingQueryTest#testRewrite().mjava","sourceNew":null,"sourceOld":"  public void testRewrite() throws IOException {\n    IndexReader reader = new MultiReader();\n    BoostingQuery q = new BoostingQuery(new BooleanQuery.Builder().build(), new MatchAllDocsQuery(), 3);\n    Query rewritten = new IndexSearcher(reader).rewrite(q);\n    Query expectedRewritten = new BoostingQuery(new MatchNoDocsQuery(), new MatchAllDocsQuery(), 3);\n    assertEquals(expectedRewritten, rewritten);\n    assertSame(rewritten, rewritten.rewrite(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82662cae660e76ded4de1e9b451633e523d83e1":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"2ab54c3a7c1fcad3ed887d6f04e292116c375023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["2ab54c3a7c1fcad3ed887d6f04e292116c375023"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ab54c3a7c1fcad3ed887d6f04e292116c375023":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab54c3a7c1fcad3ed887d6f04e292116c375023"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d8b3f2faaf05547a6ed4e2769b664522af9514b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["a82662cae660e76ded4de1e9b451633e523d83e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}