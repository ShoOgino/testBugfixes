{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = getSortField(fieldName, typeString);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    \n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = getSortField(fieldName, typeString);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    \n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["70ad682703b8585f5d0a637efec044d57ec05efb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}