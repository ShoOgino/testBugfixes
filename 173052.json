{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n      collectionCmd(zkStateReader.getClusterState(), message, params, results,\n          null);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n          Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n      collectionCmd(zkStateReader.getClusterState(), message, params, results,\n          null);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n          Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n      collectionCmd(zkStateReader.getClusterState(), message, params, results,\n          null);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n          Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n      collectionCmd(zkStateReader.getClusterState(), message, params, results,\n          null);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n          Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      collectionCmd(message, params, results, null, asyncId, requestMap);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n      collectionCmd(zkStateReader.getClusterState(), message, params, results,\n          null);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n          Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      collectionCmd(message, params, results, null, asyncId, requestMap);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n\n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n\n      ocmh.collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n          // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4","7d9def7b715c2324a9f84c1fc2e60a5c03c73331","7d9def7b715c2324a9f84c1fc2e60a5c03c73331","7d9def7b715c2324a9f84c1fc2e60a5c03c73331","7d9def7b715c2324a9f84c1fc2e60a5c03c73331","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteCollectionCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n\n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n\n      ocmh.collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n          // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteCollection(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void deleteCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    final String collection = message.getStr(NAME);\n    try {\n      if (zkStateReader.getClusterState().getCollectionOrNull(collection) == null) {\n        if (zkStateReader.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          // if the collection is not in the clusterstate, but is listed in zk, do nothing, it will just\n          // be removed in the finally - we cannot continue, because the below code will error if the collection\n          // is not in the clusterstate\n          return;\n        }\n      }\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n\n      String asyncId = message.getStr(ASYNC);\n      Map<String, String> requestMap = null;\n      if (asyncId != null) {\n        requestMap = new HashMap<>();\n      }\n      \n      Set<String> okayExceptions = new HashSet<>(1);\n      okayExceptions.add(NonExistentCoreException.class.getName());\n      \n      collectionCmd(message, params, results, null, asyncId, requestMap, okayExceptions);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETE.toLower(), NAME, collection);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the collection\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n    } finally {\n\n      try {\n        if (zkStateReader.getZkClient().exists(\n            ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n          zkStateReader.getZkClient().clean(\n              ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection);\n        }\n      } catch (InterruptedException e) {\n        SolrException.log(log, \"Cleaning up collection in zk was interrupted:\"\n            + collection, e);\n        Thread.currentThread().interrupt();\n      } catch (KeeperException e) {\n        SolrException.log(log, \"Problem cleaning up collection in zk:\"\n            + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["f9362075f92dff89425ca488b480f70d565d66e7","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["f9362075f92dff89425ca488b480f70d565d66e7"],"3bbb741690cdafda7f1f7549c26351c912917a69":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["af2638813028b254a88b418ebeafb541afb49653","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["af2638813028b254a88b418ebeafb541afb49653"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"f9362075f92dff89425ca488b480f70d565d66e7":["3bbb741690cdafda7f1f7549c26351c912917a69"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"af2638813028b254a88b418ebeafb541afb49653":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f9362075f92dff89425ca488b480f70d565d66e7"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"f9362075f92dff89425ca488b480f70d565d66e7":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}