{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":null,"sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      modifier.setMaxBufferedDocs(4);\n      modifier.setMaxBufferedDeleteTerms(4);\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}