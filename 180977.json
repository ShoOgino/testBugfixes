{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n      query.setBoost(pq.getBoost());\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n      query.setBoost(pq.getBoost());\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      query = addSlopToPhrase((PhraseQuery) query, slop);\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    } else if (query instanceof GraphQuery && ((GraphQuery) query).hasPhrase()) {\n      // we have a graph query that has at least one phrase sub-query\n      // re-build and set slop on all phrase queries\n      List<Query> oldQueries = ((GraphQuery) query).getQueries();\n      Query[] queries = new Query[oldQueries.size()];\n      for (int i = 0; i < queries.length; i++) {\n        Query oldQuery = oldQueries.get(i);\n        if (oldQuery instanceof PhraseQuery) {\n          queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);\n        } else {\n          queries[i] = oldQuery;\n        }\n      }\n\n      query = new GraphQuery(queries);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      query = addSlopToPhrase((PhraseQuery) query, slop);\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    } else if (query instanceof GraphQuery && ((GraphQuery) query).hasPhrase()) {\n      // we have a graph query that has at least one phrase sub-query\n      // re-build and set slop on all phrase queries\n      List<Query> oldQueries = ((GraphQuery) query).getQueries();\n      Query[] queries = new Query[oldQueries.size()];\n      for (int i = 0; i < queries.length; i++) {\n        Query oldQuery = oldQueries.get(i);\n        if (oldQuery instanceof PhraseQuery) {\n          queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);\n        } else {\n          queries[i] = oldQuery;\n        }\n      }\n\n      query = new GraphQuery(queries);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) query;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      query = builder.build();\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4408f3223cc4586cae91dc945fefb692e411d6d","date":1487771345,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      query = addSlopToPhrase((PhraseQuery) query, slop);\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      query = addSlopToPhrase((PhraseQuery) query, slop);\n    } else if (query instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n      if (slop != mpq.getSlop()) {\n        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    } else if (query instanceof GraphQuery && ((GraphQuery) query).hasPhrase()) {\n      // we have a graph query that has at least one phrase sub-query\n      // re-build and set slop on all phrase queries\n      List<Query> oldQueries = ((GraphQuery) query).getQueries();\n      Query[] queries = new Query[oldQueries.size()];\n      for (int i = 0; i < queries.length; i++) {\n        Query oldQuery = oldQueries.get(i);\n        if (oldQuery instanceof PhraseQuery) {\n          queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);\n        } else {\n          queries[i] = oldQuery;\n        }\n      }\n\n      query = new GraphQuery(queries);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9e1499c5d26c936238506df90a3c02c76707722":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4408f3223cc4586cae91dc945fefb692e411d6d":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2dfdf766e55e943d942055d7de53c7ad6bc45283","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9e1499c5d26c936238506df90a3c02c76707722"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["b4408f3223cc4586cae91dc945fefb692e411d6d","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b4408f3223cc4586cae91dc945fefb692e411d6d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["e52c30617998e1bc2a946cc226f52e9b35162b1e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}