{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","pathOld":"/dev/null","sourceNew":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(resolver, \"A.key\");\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","sourceNew":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, 0, Collections.EMPTY_MAP, null, null);\n    resolver.context = ctx;\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(\"A.key\", ctx);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(resolver, \"A.key\");\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","sourceNew":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    resolver.context = ctx;\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(\"A.key\", ctx);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, 0, Collections.EMPTY_MAP, null, null);\n    resolver.context = ctx;\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(\"A.key\", ctx);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65f4e997b946a4eadce22b758749046a63ba2eff","date":1263282580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","sourceNew":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(ctx);\n    try {\n      for (Map.Entry<String, String> entry : tests.entrySet()) {\n        Map<String, Object> values = new HashMap<String, Object>();\n        values.put(\"key\", entry.getKey());\n        resolver.addNamespace(\"A\", values);\n\n        String expected = (String) entry.getValue();\n        String actual = evaluator.evaluate(\"A.key\", ctx);\n        assertEquals(expected, actual);\n      }\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","sourceOld":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    resolver.context = ctx;\n    for (Map.Entry<String, String> entry : tests.entrySet()) {\n      Map<String, Object> values = new HashMap<String, Object>();\n      values.put(\"key\", entry.getKey());\n      resolver.addNamespace(\"A\", values);\n\n      String expected = (String) entry.getValue();\n      String actual = evaluator.evaluate(\"A.key\", ctx);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestEvaluatorBag#runTests(Map[String,String],Evaluator).mjava","sourceNew":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(ctx);\n    try {\n      for (Map.Entry<String, String> entry : tests.entrySet()) {\n        Map<String, Object> values = new HashMap<String, Object>();\n        values.put(\"key\", entry.getKey());\n        resolver.addNamespace(\"A\", values);\n\n        String expected = (String) entry.getValue();\n        String actual = evaluator.evaluate(\"A.key\", ctx);\n        assertEquals(expected, actual);\n      }\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","sourceOld":"  private void runTests(Map<String, String> tests, Evaluator evaluator) {\n    ContextImpl ctx = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(ctx);\n    try {\n      for (Map.Entry<String, String> entry : tests.entrySet()) {\n        Map<String, Object> values = new HashMap<String, Object>();\n        values.put(\"key\", entry.getKey());\n        resolver.addNamespace(\"A\", values);\n\n        String expected = (String) entry.getValue();\n        String actual = evaluator.evaluate(\"A.key\", ctx);\n        assertEquals(expected, actual);\n      }\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"65f4e997b946a4eadce22b758749046a63ba2eff":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["65f4e997b946a4eadce22b758749046a63ba2eff"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"65f4e997b946a4eadce22b758749046a63ba2eff":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["65f4e997b946a4eadce22b758749046a63ba2eff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}