{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.WrappedPositionArray#freeBefore(int).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.WrappedPositionArray#freeBefore(int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.WrappedPositionArray#freeBefore(int).mjava","sourceNew":"    public void freeBefore(int pos) {\n      final int toFree = count - (nextPos - pos);\n      assert toFree >= 0;\n      assert toFree <= count;\n      int index = nextWrite - count;\n      if (index < 0) {\n        index += positions.length;\n      }\n      for(int i=0;i<toFree;i++) {\n        if (index == positions.length) {\n          index = 0;\n        }\n        //System.out.println(\"  fb idx=\" + index);\n        positions[index].reset();\n        index++;\n      }\n      count -= toFree;\n    }\n\n","sourceOld":"    public void freeBefore(int pos) {\n      final int toFree = count - (nextPos - pos);\n      assert toFree >= 0;\n      assert toFree <= count;\n      int index = nextWrite - count;\n      if (index < 0) {\n        index += positions.length;\n      }\n      for(int i=0;i<toFree;i++) {\n        if (index == positions.length) {\n          index = 0;\n        }\n        //System.out.println(\"  fb idx=\" + index);\n        positions[index].reset();\n        index++;\n      }\n      count -= toFree;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.WrappedPositionArray#freeBefore(int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.WrappedPositionArray#freeBefore(int).mjava","sourceNew":"    public void freeBefore(int pos) {\n      final int toFree = count - (nextPos - pos);\n      assert toFree >= 0;\n      assert toFree <= count;\n      int index = nextWrite - count;\n      if (index < 0) {\n        index += positions.length;\n      }\n      for(int i=0;i<toFree;i++) {\n        if (index == positions.length) {\n          index = 0;\n        }\n        //System.out.println(\"  fb idx=\" + index);\n        positions[index].reset();\n        index++;\n      }\n      count -= toFree;\n    }\n\n","sourceOld":"    public void freeBefore(int pos) {\n      final int toFree = count - (nextPos - pos);\n      assert toFree >= 0;\n      assert toFree <= count;\n      int index = nextWrite - count;\n      if (index < 0) {\n        index += positions.length;\n      }\n      for(int i=0;i<toFree;i++) {\n        if (index == positions.length) {\n          index = 0;\n        }\n        //System.out.println(\"  fb idx=\" + index);\n        positions[index].reset();\n        index++;\n      }\n      count -= toFree;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}