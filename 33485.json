{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", (String[]) ids.toArray());\n\n    return query(collection, reqParams).getResults();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", (String[]) ids.toArray());\n\n    return query(collection, reqParams).getResults();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","sourceNew":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", ids.toArray(new String[ids.size()]));\n\n    return query(collection, reqParams).getResults();\n  }\n\n","sourceOld":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", (String[]) ids.toArray());\n\n    return query(collection, reqParams).getResults();\n  }\n\n","bugFix":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce0f50e4b3a7b6ab6214159eb0d982b1f2fa3e14","date":1587055923,"type":3,"author":"Markus Schuch","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,Collection[String],SolrParams).mjava","sourceNew":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", ids.stream().map(id -> StrUtils.escapeTextWithSeparator(id, ',')).toArray(String[]::new));\n    return query(collection, reqParams).getResults();\n  }\n\n","sourceOld":"  /**\n   * Retrieves the SolrDocuments associated with the given identifiers and uses\n   * the SolrParams to execute the request.\n   *\n   * If a document was not found, it will not be added to the SolrDocumentList.\n   *\n   * @param collection the Solr collection to query\n   * @param ids the ids\n   * @param params additional parameters to add to the query\n   *\n   * @return a SolrDocumentList, or null if no documents were found\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocumentList getById(String collection, Collection<String> ids, SolrParams params)\n      throws SolrServerException, IOException {\n    if (ids == null || ids.isEmpty()) {\n      throw new IllegalArgumentException(\"Must provide an identifier of a document to retrieve.\");\n    }\n\n    ModifiableSolrParams reqParams = new ModifiableSolrParams(params);\n    if (StringUtils.isEmpty(reqParams.get(CommonParams.QT))) {\n      reqParams.set(CommonParams.QT, \"/get\");\n    }\n    reqParams.set(\"ids\", ids.toArray(new String[ids.size()]));\n\n    return query(collection, reqParams).getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4407017a35dea85f652ec066e4565818dd75436":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"ce0f50e4b3a7b6ab6214159eb0d982b1f2fa3e14":["b4407017a35dea85f652ec066e4565818dd75436"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce0f50e4b3a7b6ab6214159eb0d982b1f2fa3e14"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"b4407017a35dea85f652ec066e4565818dd75436":["ce0f50e4b3a7b6ab6214159eb0d982b1f2fa3e14"],"ce0f50e4b3a7b6ab6214159eb0d982b1f2fa3e14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b4407017a35dea85f652ec066e4565818dd75436"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}