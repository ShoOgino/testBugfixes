{"path":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","commits":[{"id":"33c765f03fc81bef5117237c6f0f8ca5011fc5b7","date":1307459770,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33c765f03fc81bef5117237c6f0f8ca5011fc5b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["33c765f03fc81bef5117237c6f0f8ca5011fc5b7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33c765f03fc81bef5117237c6f0f8ca5011fc5b7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["33c765f03fc81bef5117237c6f0f8ca5011fc5b7"],"33c765f03fc81bef5117237c6f0f8ca5011fc5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","33c765f03fc81bef5117237c6f0f8ca5011fc5b7"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"33c765f03fc81bef5117237c6f0f8ca5011fc5b7":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}