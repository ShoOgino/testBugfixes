{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","pathOld":"/dev/null","sourceNew":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n      \n      return nodeStatus;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d4eec9d2975493cb4680224e247c516742fa1be","date":1438720069,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","sourceNew":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","sourceOld":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n      \n      return nodeStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","sourceNew":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","sourceOld":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","sourceNew":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","sourceOld":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#getNodeStatus(String,int).mjava","sourceNew":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","sourceOld":"    protected Map<String,Object> getNodeStatus(String solrUrl, int maxWaitSecs) throws Exception {\n      StatusTool statusTool = new StatusTool();\n      if (verbose)\n        echo(\"\\nChecking status of Solr at \" + solrUrl + \" ...\");\n\n      URL solrURL = new URL(solrUrl);\n      Map<String,Object> nodeStatus = statusTool.waitToSeeSolrUp(solrUrl, maxWaitSecs);\n      nodeStatus.put(\"baseUrl\", solrUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(nodeStatus);\n      String mode = (nodeStatus.get(\"cloud\") != null) ? \"cloud\" : \"standalone\";\n      if (verbose)\n        echo(\"\\nSolr is running on \"+solrURL.getPort()+\" in \" + mode + \" mode with status:\\n\" + arr.toString());\n\n      return nodeStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4d4eec9d2975493cb4680224e247c516742fa1be","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d4eec9d2975493cb4680224e247c516742fa1be":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["4d4eec9d2975493cb4680224e247c516742fa1be"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4d4eec9d2975493cb4680224e247c516742fa1be","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["4d4eec9d2975493cb4680224e247c516742fa1be"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"4d4eec9d2975493cb4680224e247c516742fa1be":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}