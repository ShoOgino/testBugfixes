{"path":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":1,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Map[BytesRef,Integer]).mjava","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Map<BytesRef, Integer> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), false, true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), true, true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length));\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), true);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"589da39fe2c1d2e0588909e1d22d66523f04ffe1","date":1591826390,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#ReRankCollector(int,int,Rescorer,QueryCommand,IndexSearcher,Set[BytesRef]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length), cmd.getMinExactCount());\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), cmd.getMinExactCount());\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public ReRankCollector(int reRankDocs,\n      int length,\n      Rescorer reRankQueryRescorer,\n      QueryCommand cmd,\n      IndexSearcher searcher,\n      Set<BytesRef> boostedPriority) throws IOException {\n    super(null);\n    this.reRankDocs = reRankDocs;\n    this.length = length;\n    this.boostedPriority = boostedPriority;\n    this.query = cmd.getQuery();\n    Sort sort = cmd.getSort();\n    if(sort == null) {\n      this.sort = null;\n      this.mainCollector = TopScoreDocCollector.create(Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    } else {\n      this.sort = sort = sort.rewrite(searcher);\n      //scores are needed for Rescorer (regardless of whether sort needs it)\n      this.mainCollector = TopFieldCollector.create(sort, Math.max(this.reRankDocs, length), Integer.MAX_VALUE);\n    }\n    this.searcher = searcher;\n    this.reRankQueryRescorer = reRankQueryRescorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"589da39fe2c1d2e0588909e1d22d66523f04ffe1":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["2ad458affd82a1d762eb506003907d9363a333cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["589da39fe2c1d2e0588909e1d22d66523f04ffe1"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["589da39fe2c1d2e0588909e1d22d66523f04ffe1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"2ad458affd82a1d762eb506003907d9363a333cb":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"589da39fe2c1d2e0588909e1d22d66523f04ffe1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04c370507e5521b2eb998530736f1c19b851ed5a"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}