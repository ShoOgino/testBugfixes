{"path":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","commits":[{"id":"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","date":1330500722,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d31e5ade44c0d23378d22781e2f2c293afdb25d","date":1386771146,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167c9d3137acf706f53c875de69f3165df85fd3b","date":1391327271,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the partialResults header set if a shard is down\", Boolean.TRUE, rsp.getHeader().get(\"partialResults\"));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the partialResults header set if a shard is down\", Boolean.TRUE, rsp.getHeader().get(\"partialResults\"));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    \n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the partialResults header set if a shard is down\", Boolean.TRUE, rsp.getHeader().get(\"partialResults\"));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the partialResults header set if a shard is down\", Boolean.TRUE, rsp.getHeader().get(\"partialResults\"));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a572edd5f13364e5bf50efb6749b339d8ff1064b","date":1473243028,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info\",info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info\",info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c235d3263cb5c10d469133f67672db3d679f0905","date":1533599888,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up and the landing node didn't error before sending the request to the shard\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            boolean timeAllowedError = info.get(\"error\") != null && info.get(\"error\").toString().contains(\"Time allowed to handle this request\");\n            if (timeAllowedError) {\n              assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down\",\n                  Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n              assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n            } else {\n              assertTrue(\"Expected timeAllowedError or to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n            }\n          } else {\n            assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            assertTrue(\"Expected to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n          }\n          else {\n            assertEquals(\"Expected to find the \"+SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#comparePartialResponses(QueryResponse,QueryResponse,List[String]).mjava","sourceNew":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up and the landing node didn't error before sending the request to the shard\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            boolean timeAllowedError = info.get(\"error\") != null && info.get(\"error\").toString().contains(\"Time allowed to handle this request\");\n            if (timeAllowedError) {\n              assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down\",\n                  Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n              assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n            } else {\n              assertTrue(\"Expected timeAllowedError or to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n            }\n          } else {\n            assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down. Response: \" + rsp,\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","sourceOld":"  protected void comparePartialResponses(QueryResponse rsp, QueryResponse controlRsp, List<String> upShards)\n  {\n    NamedList<?> sinfo = (NamedList<?>) rsp.getResponse().get(ShardParams.SHARDS_INFO);\n\n    assertNotNull(\"missing shard info\", sinfo);\n    assertEquals(\"should have an entry for each shard [\"+sinfo+\"] \"+shards, shardsArr.length, sinfo.size());\n    // identify each one\n    for (Map.Entry<String,?> entry : sinfo) {\n      String shard = entry.getKey();\n      NamedList<?> info = (NamedList<?>) entry.getValue();\n      boolean found = false;\n      for(int i=0; i<shardsArr.length; i++) {\n        String s = shardsArr[i];\n        if (shard.contains(s)) {\n          found = true;\n          // make sure that it responded if it's up and the landing node didn't error before sending the request to the shard\n          if (upShards.contains(s)) {\n            // this is no longer true if there was a query timeout on an up shard\n            // assertTrue(\"Expected to find numFound in the up shard info\",info.get(\"numFound\") != null);\n            boolean timeAllowedError = info.get(\"error\") != null && info.get(\"error\").toString().contains(\"Time allowed to handle this request\");\n            if (timeAllowedError) {\n              assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down\",\n                  Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n              assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n            } else {\n              assertTrue(\"Expected timeAllowedError or to find shardAddress in the up shard info: \" + info.toString(), info.get(\"shardAddress\") != null);\n            }\n          } else {\n            assertEquals(\"Expected to find the \" + SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + \" header set if a shard is down\",\n                Boolean.TRUE, rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n            assertTrue(\"Expected to find error in the down shard info: \" + info.toString(), info.get(\"error\") != null);\n          }\n        }\n      }\n      assertTrue(\"Couldn't find shard \" + shard + \" represented in shards info\", found);\n    }\n  }\n\n","bugFix":["c235d3263cb5c10d469133f67672db3d679f0905"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","19275ba31e621f6da1b83bf13af75233876fd3d4"],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c235d3263cb5c10d469133f67672db3d679f0905"],"5d31e5ade44c0d23378d22781e2f2c293afdb25d":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c235d3263cb5c10d469133f67672db3d679f0905":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"167c9d3137acf706f53c875de69f3165df85fd3b":["5d31e5ade44c0d23378d22781e2f2c293afdb25d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["83b038ad0480d5e81e058bf9fafb2dd85399985d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"89424def13674ea17829b41c5883c54ecc31a132":["83b038ad0480d5e81e058bf9fafb2dd85399985d","a572edd5f13364e5bf50efb6749b339d8ff1064b"],"a572edd5f13364e5bf50efb6749b339d8ff1064b":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["83b038ad0480d5e81e058bf9fafb2dd85399985d","89424def13674ea17829b41c5883c54ecc31a132"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","5d31e5ade44c0d23378d22781e2f2c293afdb25d"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["167c9d3137acf706f53c875de69f3165df85fd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d31e5ade44c0d23378d22781e2f2c293afdb25d":["167c9d3137acf706f53c875de69f3165df85fd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c235d3263cb5c10d469133f67672db3d679f0905":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5d31e5ade44c0d23378d22781e2f2c293afdb25d","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"167c9d3137acf706f53c875de69f3165df85fd3b":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","a572edd5f13364e5bf50efb6749b339d8ff1064b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a572edd5f13364e5bf50efb6749b339d8ff1064b":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c235d3263cb5c10d469133f67672db3d679f0905","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}