{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testConvertShouldAndFilterToMust().mjava","commits":[{"id":"f3386f642cc92d1c5f226b8207f420c0b03aaefd","date":1472132930,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testConvertShouldAndFilterToMust().mjava","pathOld":"/dev/null","sourceNew":"  // Duplicate Should and Filter query is converted to Must (with minShouldMatch -1)\n  public void testConvertShouldAndFilterToMust() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // no minShouldMatch\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new TermQuery(new Term(\"foo\", \"bar\")), searcher.rewrite(bq));\n\n\n    // minShouldMatch is set to -1\n    bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(2)\n        .build();\n\n    BooleanQuery expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(1)\n        .build();\n    assertEquals(expected, searcher.rewrite(bq));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testConvertShouldAndFilterToMust().mjava","pathOld":"/dev/null","sourceNew":"  // Duplicate Should and Filter query is converted to Must (with minShouldMatch -1)\n  public void testConvertShouldAndFilterToMust() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // no minShouldMatch\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new TermQuery(new Term(\"foo\", \"bar\")), searcher.rewrite(bq));\n\n\n    // minShouldMatch is set to -1\n    bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(2)\n        .build();\n\n    BooleanQuery expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(1)\n        .build();\n    assertEquals(expected, searcher.rewrite(bq));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testConvertShouldAndFilterToMust().mjava","pathOld":"/dev/null","sourceNew":"  // Duplicate Should and Filter query is converted to Must (with minShouldMatch -1)\n  public void testConvertShouldAndFilterToMust() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // no minShouldMatch\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new TermQuery(new Term(\"foo\", \"bar\")), searcher.rewrite(bq));\n\n\n    // minShouldMatch is set to -1\n    bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(2)\n        .build();\n\n    BooleanQuery expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"quz\")), Occur.SHOULD)\n        .setMinimumNumberShouldMatch(1)\n        .build();\n    assertEquals(expected, searcher.rewrite(bq));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3386f642cc92d1c5f226b8207f420c0b03aaefd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3386f642cc92d1c5f226b8207f420c0b03aaefd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"f3386f642cc92d1c5f226b8207f420c0b03aaefd":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3386f642cc92d1c5f226b8207f420c0b03aaefd","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}