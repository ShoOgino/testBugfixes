{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","commits":[{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ((Boolean)ln_overlaps.get(fieldName)).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ((Boolean)ln_overlaps.get(fieldName)).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ((Boolean)ln_overlaps.get(fieldName)).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}