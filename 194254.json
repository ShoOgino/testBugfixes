{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","sourceNew":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","sourceNew":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsWriter#TempPostingsWriter(SegmentWriteState,float).mjava","sourceNew":null,"sourceOld":"  /** Creates a postings writer with the specified PackedInts overhead ratio */\n  // TODO: does this ctor even make sense?\n  public TempPostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) throws IOException {\n    super();\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempBlockTreePostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene41SkipWriter(maxSkipLevels,\n                                     BLOCK_SIZE, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}