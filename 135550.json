{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBinaryFieldOffsetLength().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void xxxtestBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void xxxtestBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}