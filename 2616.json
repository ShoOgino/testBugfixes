{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","c0d9871701755df956b8bb5e417776dacc7dc1f2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matches(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(readerContext, this) {\n      @Override\n      public boolean matches(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matches(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cfa96e1cacc0f1f98d8732aa54935875187781"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}