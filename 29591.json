{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","pathOld":"/dev/null","sourceNew":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<Boolean,String>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<Integer,String>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<Long,String>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<Double,String>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,String> dates = new HashMap<Date,String>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<Double,String>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<String>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<Double,Object>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<Integer,Object>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<Long,Object>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<Boolean,Object>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,Object> mixedDates = new HashMap<Date,Object>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    Date extraDate = dateTimeFormatter.parseDateTime(\"2003-04-24\").toDate();\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","pathOld":"/dev/null","sourceNew":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<Boolean,String>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<Integer,String>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<Long,String>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<Double,String>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,String> dates = new HashMap<Date,String>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<Double,String>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<String>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<Double,Object>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<Integer,Object>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<Long,Object>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<Boolean,Object>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,Object> mixedDates = new HashMap<Date,Object>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    Date extraDate = dateTimeFormatter.parseDateTime(\"2003-04-24\").toDate();\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","sourceNew":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,String> dates = new HashMap<>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,Object> mixedDates = new HashMap<>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    Date extraDate = dateTimeFormatter.parseDateTime(\"2003-04-24\").toDate();\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","sourceOld":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<Boolean,String>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<Integer,String>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<Long,String>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<Double,String>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,String> dates = new HashMap<Date,String>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<Double,String>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<String>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<Double,Object>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<Integer,Object>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<Long,Object>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<Boolean,Object>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,Object> mixedDates = new HashMap<Date,Object>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    Date extraDate = dateTimeFormatter.parseDateTime(\"2003-04-24\").toDate();\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","date":1533657076,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","sourceNew":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    Map<Date,String> dates = new HashMap<>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    Map<Date,Object> mixedDates = new HashMap<>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    Date extraDate = parse(isoDateOptionalTimeFormatter, \"2003-04-24\");\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","sourceOld":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,String> dates = new HashMap<>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    dateTimeFormatter = ISODateTimeFormat.dateOptionalTimeParser().withZoneUTC();\n    Map<Date,Object> mixedDates = new HashMap<>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(dateTimeFormatter.parseDateTime(dateString).toDate(), dateString);\n    }\n    Date extraDate = dateTimeFormatter.parseDateTime(\"2003-04-24\").toDate();\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testCascadingParsers().mjava","sourceNew":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_BOOLEAN);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_INTEGER);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_LONG);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_DOUBLE);\n      longs.remove(o);\n    }\n\n    Map<Date,String> dates = new HashMap<>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_DATE);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_DOUBLE);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_STRING);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_DOUBLE);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_INTEGER);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_LONG);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_BOOLEAN);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    Map<Date,Object> mixedDates = new HashMap<>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    Date extraDate = parse(isoDateOptionalTimeFormatter, \"2003-04-24\");\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertThat(o, IS_DATE);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","sourceOld":"  public void testCascadingParsers() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"not_in_schema\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    SolrInputDocument d = null;\n    String chain = \"cascading-parsers-no-run-processor\";\n    \n    Map<Boolean,String> booleans = new HashMap<>();\n    booleans.put(true, \"truE\");\n    booleans.put(false, \"False\");\n    d = processAdd(chain, doc(f(\"id\", \"341\"), f(fieldName, booleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      booleans.remove(o);\n    }\n    assertTrue(booleans.isEmpty());\n\n    Map<Integer,String> ints = new HashMap<>();\n    ints.put(2, \"2\");\n    ints.put(50928, \"50928\");\n    ints.put(86942008, \"86,942,008\");\n    d = processAdd(chain, doc(f(\"id\", \"333\"), f(fieldName, ints.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      ints.remove(o);\n    }\n    assertTrue(ints.isEmpty());\n\n    Map<Long,String> longs = new HashMap<>();\n    longs.put(2L, \"2\");\n    longs.put(50928L, \"50928\");\n    longs.put(86942008987654L, \"86,942,008,987,654\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, longs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      longs.remove(o);\n    }\n    assertTrue(longs.isEmpty());\n    \n    /*\n    // Disabling this test because unlike Integer/Long, Float parsing can perform\n    // rounding to make values fit.  See \n    Map<Float,String> floats = new HashMap<Float,String>();\n    floats.put(2.0, \"2.\");\n    floats.put(509.28, \"509.28\");\n    floats.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, floats.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof float);\n      longs.remove(o);\n    }\n    */\n\n    Map<Double,String> doubles = new HashMap<>();\n    doubles.put(2.0, \"2.\");\n    doubles.put(509.28, \"509.28\");\n    doubles.put(86942.008, \"86,942.008\");\n    d = processAdd(chain, doc(f(\"id\", \"342\"), f(fieldName, doubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      longs.remove(o);\n    }\n\n    Map<Date,String> dates = new HashMap<>();\n    String[] dateStrings = { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      dates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    d = processAdd(chain, doc(f(\"id\", \"343\"), f(fieldName, dates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      dates.remove(o);\n    }\n    assertTrue(dates.isEmpty());\n    \n    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order\n    mixedLongsAndDoubles.put(85.0, \"85\");\n    mixedLongsAndDoubles.put(2.94423E-9, \"2.94423E-9\");\n    mixedLongsAndDoubles.put(2894518.0, \"2,894,518\");\n    mixedLongsAndDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"344\"), f(fieldName, mixedLongsAndDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedLongsAndDoubles.remove(o);\n    }\n    assertTrue(mixedLongsAndDoubles.isEmpty());\n    \n    Set<String> mixed = new HashSet<>();\n    mixed.add(\"true\");\n    mixed.add(\"1682-07-22T18:33:00.000Z\");\n    mixed.add(\"2,894,518\");\n    mixed.add(\"308,393,131,379,900\");\n    mixed.add(\"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"345\"), f(fieldName, mixed)));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof String);\n    }\n\n    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order\n    mixedDoubles.put(85.0, \"85\");\n    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value\n    mixedDoubles.put(2894518.0, \"2,894,518\");\n    mixedDoubles.put(48794721.937, \"48,794,721.937\");\n    d = processAdd(chain, doc(f(\"id\", \"3391\"), f(fieldName, mixedDoubles.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Double);\n      mixedDoubles.remove(o);\n    }\n    assertTrue(mixedDoubles.isEmpty());\n\n    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order\n    mixedInts.put(85, \"85\");\n    mixedInts.put(294423, 294423); // Integer-typed field value\n    mixedInts.put(-2894518, \"-2,894,518\");\n    mixedInts.put(1879472193, \"1,879,472,193\");\n    d = processAdd(chain, doc(f(\"id\", \"3392\"), f(fieldName, mixedInts.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Integer);\n      mixedInts.remove(o);\n    }\n    assertTrue(mixedInts.isEmpty());\n\n    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order\n    mixedLongs.put(85L, \"85\");\n    mixedLongs.put(42944233L, 42944233L); // Long-typed field value\n    mixedLongs.put(2894518L, \"2,894,518\");\n    mixedLongs.put(48794721937L, \"48,794,721,937\");\n    d = processAdd(chain, doc(f(\"id\", \"3393\"), f(fieldName, mixedLongs.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Long);\n      mixedLongs.remove(o);\n    }\n    assertTrue(mixedLongs.isEmpty());\n\n    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order\n    mixedBooleans.put(true, \"true\");\n    mixedBooleans.put(false, false); // Boolean-typed field value\n    mixedBooleans.put(false, \"false\");\n    mixedBooleans.put(true, \"true\");\n    d = processAdd(chain, doc(f(\"id\", \"3394\"), f(fieldName, mixedBooleans.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Boolean);\n      mixedBooleans.remove(o);\n    }\n    assertTrue(mixedBooleans.isEmpty());\n\n    Map<Date,Object> mixedDates = new HashMap<>();\n    dateStrings = new String[] { \"2020-05-13T18:47\", \"1989-12-14\", \"1682-07-22T18:33:00.000Z\" };\n    for (String dateString : dateStrings) {\n      mixedDates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);\n    }\n    Date extraDate = parse(isoDateOptionalTimeFormatter, \"2003-04-24\");\n    mixedDates.put(extraDate, extraDate); // Date-typed field value\n    d = processAdd(chain, doc(f(\"id\", \"3395\"), f(fieldName, mixedDates.values())));\n    assertNotNull(d);\n    for (Object o : d.getFieldValues(fieldName)) {\n      assertTrue(o instanceof Date);\n      mixedDates.remove(o);\n    }\n    assertTrue(mixedDates.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}