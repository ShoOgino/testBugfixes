{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * @param args\r\n   * @throws Exception \r\n   * @throws IOException \r\n   */\r\n  public static void main(String[] args) throws Exception {\r\n    Properties p = initProps();\r\n    Config conf = new Config(p);\r\n    PerfRunData runData = new PerfRunData(conf);\r\n    \r\n    // 1. top sequence\r\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\r\n    \r\n    // 2. task to create the index\r\n    CreateIndexTask create = new CreateIndexTask(runData);\r\n    top.addTask(create);\r\n    \r\n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\r\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\r\n    seq1.setRepetitions(500);\r\n    seq1.setNoChildReport();\r\n    top.addTask(seq1);\r\n\r\n    // 4. task to add the doc\r\n    AddDocTask addDoc = new AddDocTask(runData);\r\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\r\n    seq1.addTask(addDoc); // order matters 9see comment above)\r\n\r\n    // 5. task to close the index\r\n    CloseIndexTask close = new CloseIndexTask(runData);\r\n    top.addTask(close);\r\n\r\n    // task to report\r\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\r\n    top.addTask(rep);\r\n    // execute\r\n    top.doLogic();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c374fcdaaef447f786e6c8a1841c44b24ec178c","date":1171220362,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\r\n   * @param args\r\n   * @throws Exception \r\n   * @throws IOException \r\n   */\r\n  public static void main(String[] args) throws Exception {\r\n    Properties p = initProps();\r\n    Config conf = new Config(p);\r\n    PerfRunData runData = new PerfRunData(conf);\r\n    \r\n    // 1. top sequence\r\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\r\n    \r\n    // 2. task to create the index\r\n    CreateIndexTask create = new CreateIndexTask(runData);\r\n    top.addTask(create);\r\n    \r\n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\r\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\r\n    seq1.setRepetitions(500);\r\n    seq1.setNoChildReport();\r\n    top.addTask(seq1);\r\n\r\n    // 4. task to add the doc\r\n    AddDocTask addDoc = new AddDocTask(runData);\r\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\r\n    seq1.addTask(addDoc); // order matters 9see comment above)\r\n\r\n    // 5. task to close the index\r\n    CloseIndexTask close = new CloseIndexTask(runData);\r\n    top.addTask(close);\r\n\r\n    // task to report\r\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\r\n    top.addTask(rep);\r\n\r\n    // print algorithm\r\n    System.out.println(top.toString());\r\n    \r\n    // execute\r\n    top.doLogic();\r\n  }\r\n\n","sourceOld":"  /**\r\n   * @param args\r\n   * @throws Exception \r\n   * @throws IOException \r\n   */\r\n  public static void main(String[] args) throws Exception {\r\n    Properties p = initProps();\r\n    Config conf = new Config(p);\r\n    PerfRunData runData = new PerfRunData(conf);\r\n    \r\n    // 1. top sequence\r\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\r\n    \r\n    // 2. task to create the index\r\n    CreateIndexTask create = new CreateIndexTask(runData);\r\n    top.addTask(create);\r\n    \r\n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\r\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\r\n    seq1.setRepetitions(500);\r\n    seq1.setNoChildReport();\r\n    top.addTask(seq1);\r\n\r\n    // 4. task to add the doc\r\n    AddDocTask addDoc = new AddDocTask(runData);\r\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\r\n    seq1.addTask(addDoc); // order matters 9see comment above)\r\n\r\n    // 5. task to close the index\r\n    CloseIndexTask close = new CloseIndexTask(runData);\r\n    top.addTask(close);\r\n\r\n    // task to report\r\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\r\n    top.addTask(rep);\r\n    // execute\r\n    top.doLogic();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\r\n   * @param args\r\n   * @throws Exception \r\n   * @throws IOException \r\n   */\r\n  public static void main(String[] args) throws Exception {\r\n    Properties p = initProps();\r\n    Config conf = new Config(p);\r\n    PerfRunData runData = new PerfRunData(conf);\r\n    \r\n    // 1. top sequence\r\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\r\n    \r\n    // 2. task to create the index\r\n    CreateIndexTask create = new CreateIndexTask(runData);\r\n    top.addTask(create);\r\n    \r\n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\r\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\r\n    seq1.setRepetitions(500);\r\n    seq1.setNoChildReport();\r\n    top.addTask(seq1);\r\n\r\n    // 4. task to add the doc\r\n    AddDocTask addDoc = new AddDocTask(runData);\r\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\r\n    seq1.addTask(addDoc); // order matters 9see comment above)\r\n\r\n    // 5. task to close the index\r\n    CloseIndexTask close = new CloseIndexTask(runData);\r\n    top.addTask(close);\r\n\r\n    // task to report\r\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\r\n    top.addTask(rep);\r\n\r\n    // print algorithm\r\n    System.out.println(top.toString());\r\n    \r\n    // execute\r\n    top.doLogic();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parralel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["2c374fcdaaef447f786e6c8a1841c44b24ec178c"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c374fcdaaef447f786e6c8a1841c44b24ec178c":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["2c374fcdaaef447f786e6c8a1841c44b24ec178c"],"2c374fcdaaef447f786e6c8a1841c44b24ec178c":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}