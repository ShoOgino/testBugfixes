{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","commits":[{"id":"38ce5b474ddbd109acee85ba3a311201df474822","date":1377775364,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    try {\n      writer.addDocument(doc);\n      fail(\"should not have succeeded to add a field with different DV type than what already exists\");\n    } catch (IllegalArgumentException e) {\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    try {\n      writer.addDocument(doc);\n      fail(\"should not have succeeded to add a field with different DV type than what already exists\");\n    } catch (IllegalArgumentException e) {\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","sourceNew":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    try {\n      writer.addDocument(doc);\n      fail(\"should not have succeeded to add a field with different DV type than what already exists\");\n    } catch (IllegalArgumentException e) {\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    try {\n      writer.addDocument(doc);\n      fail(\"should not have succeeded to add a field with different DV type than what already exists\");\n    } catch (IllegalArgumentException e) {\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testSameFieldNameForPostingAndDocValue().mjava","sourceNew":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    Document doc2 = new Document();\n    doc2.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.addDocument(doc2);\n    });\n    writer.rollback();\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testSameFieldNameForPostingAndDocValue() throws Exception {\n    // LUCENE-5192: FieldInfos.Builder neglected to update\n    // globalFieldNumbers.docValuesType map if the field existed, resulting in\n    // potentially adding the same field with different DV types.\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"mock-value\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    doc = new Document();\n    doc.add(new BinaryDocValuesField(\"f\", new BytesRef(\"mock\")));\n    try {\n      writer.addDocument(doc);\n      fail(\"should not have succeeded to add a field with different DV type than what already exists\");\n    } catch (IllegalArgumentException e) {\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","bugFix":["38ce5b474ddbd109acee85ba3a311201df474822"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["38ce5b474ddbd109acee85ba3a311201df474822"],"38ce5b474ddbd109acee85ba3a311201df474822":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38ce5b474ddbd109acee85ba3a311201df474822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["05fe562aa248790944d43cdd478f512572835ba0"],"38ce5b474ddbd109acee85ba3a311201df474822":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38ce5b474ddbd109acee85ba3a311201df474822","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}