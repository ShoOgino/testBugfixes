{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","commits":[{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(String,Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(String path, final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.info(\"Updating {} ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                Stat stat = new Stat();\n                byte[] data = getZkClient().getData(path, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  if (e instanceof KeeperException) throw (KeeperException) e;\n                  if (e instanceof InterruptedException) throw (InterruptedException) e;\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"\", e);\n              return;\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac63b614f11eae7300a15a1ec9d8bee1e057e3b","date":1474972984,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e","date":1519728399,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","aac63b614f11eae7300a15a1ec9d8bee1e057e3b"],"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"aac63b614f11eae7300a15a1ec9d8bee1e057e3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc64dbaabfd45a3fe2533c0b7daace3bbe45772e"]},"commit2Childs":{"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","aac63b614f11eae7300a15a1ec9d8bee1e057e3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bc64dbaabfd45a3fe2533c0b7daace3bbe45772e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aac63b614f11eae7300a15a1ec9d8bee1e057e3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}