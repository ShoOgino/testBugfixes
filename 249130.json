{"path":"src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","commits":[{"id":"218fde9d650f817f30726670473f41b564398acd","date":1181882189,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"src/test/org/apache/solr/HighlighterTest#testFieldMatch().mjava","sourceNew":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bb8e0a0e3adfbbc14ba09ed98984c5670e4447","date":1219343864,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testFieldMatch().mjava","sourceNew":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","sourceOld":"  public void testFieldMatch()\n  {\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"1\",\n           \"t_text2\", \"more random words for second field\"));\n     assertU(commit());\n     assertU(optimize());\n     \n     HashMap<String,String> args = new HashMap<String,String>();\n     args.put(\"hl\", \"true\");\n     args.put(\"hl.fl\", \"t_text1 t_text2\");\n     \n     TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     // default should highlight both random and words in both fields\n     assertQ(\"Test Default\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> <em>words</em> for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more <em>random</em> <em>words</em> for second field']\"\n           );\n     \n     // requireFieldMatch=true - highlighting should only occur if term matched in that field\n     args.put(\"hl.requireFieldMatch\", \"true\");\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='1']\",\n           \"//lst[@name='1']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='1']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n\n     // test case for un-optimized index\n     assertU(adoc(\"t_text1\", \"random words for highlighting tests\", \"id\", \"2\",\n             \"t_text2\", \"more random words for second field\"));\n     assertU(delI(\"1\"));\n     assertU(commit());\n     sumLRF = h.getRequestFactory(\n           \"standard\", 0, 200, args);\n     assertQ(\"Test RequireFieldMatch on un-optimized index\",\n           sumLRF.makeRequest(\"t_text1:random OR t_text2:words\"),\n           \"//lst[@name='highlighting']/lst[@name='2']\",\n           \"//lst[@name='2']/arr[@name='t_text1']/str[.='<em>random</em> words for highlighting tests']\",\n           \"//lst[@name='2']/arr[@name='t_text2']/str[.='more random <em>words</em> for second field']\"\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"218fde9d650f817f30726670473f41b564398acd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c7bb8e0a0e3adfbbc14ba09ed98984c5670e4447":["218fde9d650f817f30726670473f41b564398acd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c7bb8e0a0e3adfbbc14ba09ed98984c5670e4447"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"218fde9d650f817f30726670473f41b564398acd":["c7bb8e0a0e3adfbbc14ba09ed98984c5670e4447"],"c7bb8e0a0e3adfbbc14ba09ed98984c5670e4447":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["218fde9d650f817f30726670473f41b564398acd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}