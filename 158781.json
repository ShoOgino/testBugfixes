{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @return\n   */\n  protected Map<String, Object> getSimplCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1","date":1217855899,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimplCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @return\n   */\n  protected Map<String, Object> getSimplCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a","date":1217856027,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimpleCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getSimplCacheData(String).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimpleCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * Only used by cache implementations.\n   *\n   * @param query string for which cached row is to be returned\n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String, Object> getSimplCacheData(String query) {\n    List<Map<String, Object>> rows = simpleCache.get(query);\n    if (rows != null) {\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n        simpleCache.put(query, rows);\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"418d77836a1ba93781f1d48f1dc2fb16dd7fae0a":[],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["418d77836a1ba93781f1d48f1dc2fb16dd7fae0a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["418d77836a1ba93781f1d48f1dc2fb16dd7fae0a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}