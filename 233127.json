{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    return new BlockJoinWeight(this, childQuery.createWeight(searcher, weightScoreMode, boost), parentsFilter, weightScoreMode.needsScores() ? scoreMode : ScoreMode.None);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    return new BlockJoinWeight(this, childQuery.createWeight(searcher, weightScoreMode, boost), parentsFilter, weightScoreMode.needsScores() ? scoreMode : ScoreMode.None);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f625a75e1debd4c2bf7b827c6f8734582741d668","date":1554470649,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    ScoreMode childScoreMode = weightScoreMode.needsScores() ? scoreMode : ScoreMode.None;\n    final Weight childWeight;\n    if (childScoreMode == ScoreMode.None) {\n      // we don't need to compute a score for the child query so we wrap\n      // it under a constant score query that can early terminate if the\n      // minimum score is greater than 0 and the total hits that match the\n      // query is not requested.\n      childWeight = searcher.rewrite(new ConstantScoreQuery(childQuery)).createWeight(searcher, weightScoreMode, 0f);\n    } else {\n      childWeight = childQuery.createWeight(searcher, weightScoreMode, boost);\n    }\n    return new BlockJoinWeight(this, childWeight, parentsFilter, childScoreMode);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    return new BlockJoinWeight(this, childQuery.createWeight(searcher, weightScoreMode, boost), parentsFilter, weightScoreMode.needsScores() ? scoreMode : ScoreMode.None);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5aa35a42bfd2e0dc339b134ec502fc228155e6","date":1554476740,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    ScoreMode childScoreMode = weightScoreMode.needsScores() ? scoreMode : ScoreMode.None;\n    final Weight childWeight;\n    if (childScoreMode == ScoreMode.None) {\n      // we don't need to compute a score for the child query so we wrap\n      // it under a constant score query that can early terminate if the\n      // minimum score is greater than 0 and the total hits that match the\n      // query is not requested.\n      childWeight = searcher.rewrite(new ConstantScoreQuery(childQuery)).createWeight(searcher, weightScoreMode, 0f);\n    } else {\n      childWeight = childQuery.createWeight(searcher, weightScoreMode.needsScores() ? COMPLETE : COMPLETE_NO_SCORES, boost);\n    }\n    return new BlockJoinWeight(this, childWeight, parentsFilter, childScoreMode);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    ScoreMode childScoreMode = weightScoreMode.needsScores() ? scoreMode : ScoreMode.None;\n    final Weight childWeight;\n    if (childScoreMode == ScoreMode.None) {\n      // we don't need to compute a score for the child query so we wrap\n      // it under a constant score query that can early terminate if the\n      // minimum score is greater than 0 and the total hits that match the\n      // query is not requested.\n      childWeight = searcher.rewrite(new ConstantScoreQuery(childQuery)).createWeight(searcher, weightScoreMode, 0f);\n    } else {\n      childWeight = childQuery.createWeight(searcher, weightScoreMode, boost);\n    }\n    return new BlockJoinWeight(this, childWeight, parentsFilter, childScoreMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8168c67b0d3f2c2417bdf5fc96a9ed650dc54","date":1554476817,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    ScoreMode childScoreMode = weightScoreMode.needsScores() ? scoreMode : ScoreMode.None;\n    final Weight childWeight;\n    if (childScoreMode == ScoreMode.None) {\n      // we don't need to compute a score for the child query so we wrap\n      // it under a constant score query that can early terminate if the\n      // minimum score is greater than 0 and the total hits that match the\n      // query is not requested.\n      childWeight = searcher.rewrite(new ConstantScoreQuery(childQuery)).createWeight(searcher, weightScoreMode, 0f);\n    } else {\n      // if the score is needed we force the collection mode to COMPLETE because the child query cannot skip\n      // non-competitive documents.\n      childWeight = childQuery.createWeight(searcher, weightScoreMode.needsScores() ? COMPLETE : weightScoreMode, boost);\n    }\n    return new BlockJoinWeight(this, childWeight, parentsFilter, childScoreMode);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode weightScoreMode, float boost) throws IOException {\n    ScoreMode childScoreMode = weightScoreMode.needsScores() ? scoreMode : ScoreMode.None;\n    final Weight childWeight;\n    if (childScoreMode == ScoreMode.None) {\n      // we don't need to compute a score for the child query so we wrap\n      // it under a constant score query that can early terminate if the\n      // minimum score is greater than 0 and the total hits that match the\n      // query is not requested.\n      childWeight = searcher.rewrite(new ConstantScoreQuery(childQuery)).createWeight(searcher, weightScoreMode, 0f);\n    } else {\n      childWeight = childQuery.createWeight(searcher, weightScoreMode.needsScores() ? COMPLETE : COMPLETE_NO_SCORES, boost);\n    }\n    return new BlockJoinWeight(this, childWeight, parentsFilter, childScoreMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c8168c67b0d3f2c2417bdf5fc96a9ed650dc54":["ee5aa35a42bfd2e0dc339b134ec502fc228155e6"],"f625a75e1debd4c2bf7b827c6f8734582741d668":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee5aa35a42bfd2e0dc339b134ec502fc228155e6":["f625a75e1debd4c2bf7b827c6f8734582741d668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c8168c67b0d3f2c2417bdf5fc96a9ed650dc54"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"09c8168c67b0d3f2c2417bdf5fc96a9ed650dc54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f625a75e1debd4c2bf7b827c6f8734582741d668":["ee5aa35a42bfd2e0dc339b134ec502fc228155e6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ee5aa35a42bfd2e0dc339b134ec502fc228155e6":["09c8168c67b0d3f2c2417bdf5fc96a9ed650dc54"],"417142ff08fda9cf0b72d5133e63097a166c6458":["f625a75e1debd4c2bf7b827c6f8734582741d668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}