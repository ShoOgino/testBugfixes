{"path":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff94e4cae4a92d7aeee5e1b15b8ca2229738ee7e","date":1461168315,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        jettys.get(0).stop();\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        jettys.get(0).start();\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":["7aaa71958ba765b2cf194f405f54cc4d05b4ee41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f","date":1552317217,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        jettys.get(0).stop();\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        jettys.get(0).start();\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        jettys.get(0).stop();\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        jettys.get(0).start();\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        jettys.get(0).stop();\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        jettys.get(0).start();\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, \"conf1\", 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n\n        jettys.get(0).stop();\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        jettys.get(0).start();\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9b701e0fcef214f86bab1daf107adce0b0131212":["abb23fcc2461782ab204e61213240feb77d355aa","ff94e4cae4a92d7aeee5e1b15b8ca2229738ee7e"],"197bbedf08450ade98a11f4a0001448059666bec":["9b701e0fcef214f86bab1daf107adce0b0131212"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff94e4cae4a92d7aeee5e1b15b8ca2229738ee7e":["abb23fcc2461782ab204e61213240feb77d355aa"],"43ad790248d7f7daee5d9cced548c546f37c7218":["28288370235ed02234a64753cdbf0c6ec096304a"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"28288370235ed02234a64753cdbf0c6ec096304a":["9b701e0fcef214f86bab1daf107adce0b0131212","197bbedf08450ade98a11f4a0001448059666bec"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43ad790248d7f7daee5d9cced548c546f37c7218","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["9b701e0fcef214f86bab1daf107adce0b0131212","197bbedf08450ade98a11f4a0001448059666bec"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["43ad790248d7f7daee5d9cced548c546f37c7218"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43ad790248d7f7daee5d9cced548c546f37c7218","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"9b701e0fcef214f86bab1daf107adce0b0131212":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"abb23fcc2461782ab204e61213240feb77d355aa":["9b701e0fcef214f86bab1daf107adce0b0131212","ff94e4cae4a92d7aeee5e1b15b8ca2229738ee7e"],"ff94e4cae4a92d7aeee5e1b15b8ca2229738ee7e":["9b701e0fcef214f86bab1daf107adce0b0131212"],"43ad790248d7f7daee5d9cced548c546f37c7218":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["43ad790248d7f7daee5d9cced548c546f37c7218"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}