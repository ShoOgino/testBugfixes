{"path":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","commits":[{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"/dev/null","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString(), 1.0f);\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"/dev/null","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString(), 1.0f);\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","sourceOld":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString(), 1.0f);\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e822dccd1b346ce9d46853cebd9bc5550e8a55","date":1497302501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      if (this.fieldType.isPointField()) {\n        SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n        if (!vals.advanceExact(docId)) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              for (int i = 0; i < vals.docValueCount(); i++) {\n                w.add(bitsToValue.apply(vals.nextValue()));\n              }\n            });\n        return true;\n      } else {\n        SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n        if (vals.advance(docId) != docId) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              long o;\n              while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                BytesRef ref = vals.lookupOrd(o);\n                fieldType.indexedToReadable(ref, cref);\n                IndexableField f = fieldType.createField(schemaField, cref.toString());\n                if (f == null) w.add(cref.toString());\n                else w.add(fieldType.toObject(f));\n              }\n            });\n        return true;\n      }\n      \n    }\n\n","sourceOld":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      if (this.fieldType.isPointField()) {\n        SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n        if (!vals.advanceExact(docId)) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              for (int i = 0; i < vals.docValueCount(); i++) {\n                w.add(bitsToValue.apply(vals.nextValue()));\n              }\n            });\n        return true;\n      } else {\n        SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n        if (vals.advance(docId) != docId) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              long o;\n              while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                BytesRef ref = vals.lookupOrd(o);\n                fieldType.indexedToReadable(ref, cref);\n                IndexableField f = fieldType.createField(schemaField, cref.toString());\n                if (f == null) w.add(cref.toString());\n                else w.add(fieldType.toObject(f));\n              }\n            });\n        return true;\n      }\n      \n    }\n\n","sourceOld":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","sourceNew":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      if (this.fieldType.isPointField()) {\n        SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n        if (!vals.advanceExact(docId)) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              for (int i = 0; i < vals.docValueCount(); i++) {\n                w.add(bitsToValue.apply(vals.nextValue()));\n              }\n            });\n        return true;\n      } else {\n        SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n        if (vals.advance(docId) != docId) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              long o;\n              while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                BytesRef ref = vals.lookupOrd(o);\n                fieldType.indexedToReadable(ref, cref);\n                IndexableField f = fieldType.createField(schemaField, cref.toString());\n                if (f == null) w.add(cref.toString());\n                else w.add(fieldType.toObject(f));\n              }\n            });\n        return true;\n      }\n      \n    }\n\n","sourceOld":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n      if (vals.advance(docId) != docId) return false;\n      out.put(this.field,\n          (IteratorWriter) w -> {\n            long o;\n            while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              BytesRef ref = vals.lookupOrd(o);\n              fieldType.indexedToReadable(ref, cref);\n              IndexableField f = fieldType.createField(schemaField, cref.toString());\n              if (f == null) w.add(cref.toString());\n              else w.add(fieldType.toObject(f));\n            }\n          });\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":4,"author":"Varun Thacker","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.MultiFieldWriter#write(int,LeafReader,EntryWriter,int).mjava","sourceNew":null,"sourceOld":"    public boolean write(int docId, LeafReader reader, EntryWriter out, int fieldIndex) throws IOException {\n      if (this.fieldType.isPointField()) {\n        SortedNumericDocValues vals = DocValues.getSortedNumeric(reader, this.field);\n        if (!vals.advanceExact(docId)) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              for (int i = 0; i < vals.docValueCount(); i++) {\n                w.add(bitsToValue.apply(vals.nextValue()));\n              }\n            });\n        return true;\n      } else {\n        SortedSetDocValues vals = DocValues.getSortedSet(reader, this.field);\n        if (vals.advance(docId) != docId) return false;\n        out.put(this.field,\n            (IteratorWriter) w -> {\n              long o;\n              while((o = vals.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                BytesRef ref = vals.lookupOrd(o);\n                fieldType.indexedToReadable(ref, cref);\n                IndexableField f = fieldType.createField(schemaField, cref.toString());\n                if (f == null) w.add(cref.toString());\n                else w.add(fieldType.toObject(f));\n              }\n            });\n        return true;\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"28288370235ed02234a64753cdbf0c6ec096304a":["acd9883560fd89e6448b2b447302fe543040cd4f","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["acd9883560fd89e6448b2b447302fe543040cd4f","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["199dfa410f1fdbfd3294106b04096cce5ed34b21","acd9883560fd89e6448b2b447302fe543040cd4f"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["64e822dccd1b346ce9d46853cebd9bc5550e8a55","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}