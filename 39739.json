{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":"  @Test \n  public void testCopyToCharArray() {\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    CategoryPath p = new CategoryPath(components);\n    char[] charArray = new char[p.charsNeededForFullPath()];\n    int numCharsCopied = 0;\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 0, '.');\n    assertEquals(0, numCharsCopied);\n    assertEquals(\"\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 1, '.');\n    assertEquals(5, numCharsCopied);\n    assertEquals(\"hello\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 3, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, -1, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    numCharsCopied = p.copyToCharArray(charArray, 0, 4, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    CategoryPath p = new CategoryPath(components);\n    char[] charArray = new char[p.charsNeededForFullPath()];\n    int numCharsCopied = 0;\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 0, '.');\n    assertEquals(0, numCharsCopied);\n    assertEquals(\"\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 1, '.');\n    assertEquals(5, numCharsCopied);\n    assertEquals(\"hello\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 3, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, -1, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    numCharsCopied = p.copyToCharArray(charArray, 0, 4, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":"  @Test \n  public void testCopyToCharArray() {\n    CategoryPath p = new CategoryPath(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    CategoryPath p = new CategoryPath(components);\n    char[] charArray = new char[p.charsNeededForFullPath()];\n    int numCharsCopied = 0;\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 0, '.');\n    assertEquals(0, numCharsCopied);\n    assertEquals(\"\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 1, '.');\n    assertEquals(5, numCharsCopied);\n    assertEquals(\"hello\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 3, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, -1, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    numCharsCopied = p.copyToCharArray(charArray, 0, 4, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":"  @Test \n  public void testCopyToCharArray() {\n    CategoryPath p = new CategoryPath(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    String[] components = { \"hello\", \"world\", \"yo\" };\n    CategoryPath p = new CategoryPath(components);\n    char[] charArray = new char[p.charsNeededForFullPath()];\n    int numCharsCopied = 0;\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 0, '.');\n    assertEquals(0, numCharsCopied);\n    assertEquals(\"\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 1, '.');\n    assertEquals(5, numCharsCopied);\n    assertEquals(\"hello\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, 3, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    \n    numCharsCopied = p.copyToCharArray(charArray, 0, -1, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n    numCharsCopied = p.copyToCharArray(charArray, 0, 4, '.');\n    assertEquals(14, numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":"  @Test \n  public void testCopyToCharArray() {\n    FacetLabel p = new FacetLabel(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    CategoryPath p = new CategoryPath(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testCopyToCharArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":"  @Test \n  public void testCopyToCharArray() {\n    FacetLabel p = new FacetLabel(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    FacetLabel p = new FacetLabel(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCopyToCharArray().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCopyToCharArray() {\n    CategoryPath p = new CategoryPath(\"hello\", \"world\", \"yo\");\n    char[] charArray = new char[p.fullPathLength()];\n    int numCharsCopied = p.copyFullPath(charArray, 0, '.');\n    assertEquals(p.fullPathLength(), numCharsCopied);\n    assertEquals(\"hello.world.yo\", new String(charArray, 0, numCharsCopied));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}