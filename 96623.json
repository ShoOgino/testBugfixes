{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#IndexedDISI(IndexInput,long,long,int,byte,long).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#IndexedDISI(IndexInput,long,long,int,byte,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This constructor always creates a new blockSlice and a new jumpTable from in, to ensure that operations are\n   * independent from the caller.\n   * See {@link #IndexedDISI(IndexInput, RandomAccessInput, int, byte, long)} for re-use of blockSlice and jumpTable.\n   * @param in backing data.\n   * @param offset starting offset for blocks in the backing data.\n   * @param length the number of bytes holding blocks and jump-table in the backing data.\n   * @param jumpTableEntryCount the number of blocks covered by the jump-table.\n   *                            This must match the number returned by {@link #writeBitSet(DocIdSetIterator, IndexOutput, byte)}.\n   * @param denseRankPower the number of docIDs covered by each rank entry in DENSE blocks, expressed as {@code 2^denseRankPower}.\n   *                       This must match the power given in {@link #writeBitSet(DocIdSetIterator, IndexOutput, byte)}\n   * @param cost normally the number of logical docIDs.\n   */\n  IndexedDISI(IndexInput in, long offset, long length, int jumpTableEntryCount, byte denseRankPower, long cost) throws IOException {\n    this(createBlockSlice(in,\"docs\", offset, length, jumpTableEntryCount),\n        createJumpTable(in, offset, length, jumpTableEntryCount),\n        jumpTableEntryCount, denseRankPower, cost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#IndexedDISI(IndexInput,long,long,int,byte,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This constructor always creates a new blockSlice and a new jumpTable from in, to ensure that operations are\n   * independent from the caller.\n   * See {@link #IndexedDISI(IndexInput, RandomAccessInput, int, byte, long)} for re-use of blockSlice and jumpTable.\n   * @param in backing data.\n   * @param offset starting offset for blocks in the backing data.\n   * @param length the number of bytes holding blocks and jump-table in the backing data.\n   * @param jumpTableEntryCount the number of blocks covered by the jump-table.\n   *                            This must match the number returned by {@link #writeBitSet(DocIdSetIterator, IndexOutput, byte)}.\n   * @param denseRankPower the number of docIDs covered by each rank entry in DENSE blocks, expressed as {@code 2^denseRankPower}.\n   *                       This must match the power given in {@link #writeBitSet(DocIdSetIterator, IndexOutput, byte)}\n   * @param cost normally the number of logical docIDs.\n   */\n  IndexedDISI(IndexInput in, long offset, long length, int jumpTableEntryCount, byte denseRankPower, long cost) throws IOException {\n    this(createBlockSlice(in,\"docs\", offset, length, jumpTableEntryCount),\n        createJumpTable(in, offset, length, jumpTableEntryCount),\n        jumpTableEntryCount, denseRankPower, cost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}