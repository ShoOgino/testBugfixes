{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","commits":[{"id":"0eab5479eeaba1914f4cd6b6bca566976c31075c","date":1162241544,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.docCount());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.docCount());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.docCount());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.docCount());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.docCount());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.docCount());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.docCount());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.docCount());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(100));\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(100));\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(100));\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    writer.setMaxBufferedDocs(1000);\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, false);\n      writer.setUseCompoundFile(false); // use one without a compound file\n      writer.setMaxBufferedDocs(100);\n      writer.setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#setUpDirs(Directory,Directory).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(100));\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    addDocs(writer, 1000);\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      addDocs(writer, 10);\n      writer.close();\n      writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(100));\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}