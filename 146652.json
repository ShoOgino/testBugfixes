{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","commits":[{"id":"10d98d3c84fcfdd2089a56054f4cf7186a57265d","date":1400053445,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["93dd449115a9247533e44bab47e8429e5dccbc6d","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10d98d3c84fcfdd2089a56054f4cf7186a57265d","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}