{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","commits":[{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e51d8822006000d3ecacfb03d22c3a5ee0251bc9","date":1495517642,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null, counts.getValue()));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name) ));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null, counts.getValue(), replica.delta(counts.getValue())));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name) , tag.delta(r.getVal(tag.name))));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null, counts.getValue()));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name) ));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b","date":1495756308,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(e.getKey(), shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null, counts.getValue(), replica.delta(counts.getValue())));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name) , tag.delta(r.getVal(tag.name))));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> errors = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              errors.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          errors.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return errors;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e51d8822006000d3ecacfb03d22c3a5ee0251bc9":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["e51d8822006000d3ecacfb03d22c3a5ee0251bc9"]},"commit2Childs":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","1fca549db64ee4c87a83a94e7c224506fa20d396","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["e51d8822006000d3ecacfb03d22c3a5ee0251bc9"],"e51d8822006000d3ecacfb03d22c3a5ee0251bc9":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}