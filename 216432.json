{"path":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","commits":[{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8eb0daaa223ca00f16ce8b536375cb7dd9967aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063","date":1519154132,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8eb0daaa223ca00f16ce8b536375cb7dd9967aba","date":1519849772,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":["3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ac431b87e175f05332a264b139265fc338c053","date":1527623551,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    actionFiredLatch = new CountDownLatch(1);\n    listenerFiredLatch = new CountDownLatch(1);\n\n    // change rules to create violations\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + TesterAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listeners\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + PREFIX + \"_node_added_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    // set up our own listeners\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_added1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'node_lost1',\" +\n        \"'trigger' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + TesterListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // setup is complete, enable the triggers\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_added_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + PREFIX + \"_node_lost_trigger',\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3f504512a03d978990cbff30db0522b354e846db":["e98520789adb1d5ad05afb4956eca0944a929688"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8eb0daaa223ca00f16ce8b536375cb7dd9967aba":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"75ac431b87e175f05332a264b139265fc338c053":["8eb0daaa223ca00f16ce8b536375cb7dd9967aba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e98520789adb1d5ad05afb4956eca0944a929688":["89948af0461fead48f44ba8fb7866f107ce83f22"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["8eb0daaa223ca00f16ce8b536375cb7dd9967aba","75ac431b87e175f05332a264b139265fc338c053"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","3301c97f51316f9c9937654c07d7a6a21e7aecb8","560c18d71dad43d675158783c3840f8c80d6d39c"],"8eb0daaa223ca00f16ce8b536375cb7dd9967aba":["75ac431b87e175f05332a264b139265fc338c053","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["8eb0daaa223ca00f16ce8b536375cb7dd9967aba"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"89948af0461fead48f44ba8fb7866f107ce83f22":["e98520789adb1d5ad05afb4956eca0944a929688"],"75ac431b87e175f05332a264b139265fc338c053":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"e98520789adb1d5ad05afb4956eca0944a929688":["3f504512a03d978990cbff30db0522b354e846db"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}