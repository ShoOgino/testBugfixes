{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props);\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props);\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props);\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props);\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props);\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String coreNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String coreNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String shardZkNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(shardZkNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219a0b086b948977c595b608d1ca4195de2d1f3","date":1388363759,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String coreNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout()).ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String coreNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b954d1444134ef40d3fcea752c6aaaff4e7da056","date":1393720045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector, final String shardId,\n      final String collection, final String coreNodeName, ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + \"/leader_elect/\"\n        + shardId, ZkStateReader.getShardLeadersPath(collection, shardId),\n        props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout()).ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbf528c0e702c5cbd1339b2da1cdc823fd44a925","date":1427230904,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shardId, null, null);\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shardId, null, null);\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setMDC(collection, shardId, null, null);\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2","date":1446727887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkStateReader;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd378a5822440390b13239c736e2192b9d02bec","date":1447257770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkStateReader;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":["b954d1444134ef40d3fcea752c6aaaff4e7da056","dbf528c0e702c5cbd1339b2da1cdc823fd44a925","a219a0b086b948977c595b608d1ca4195de2d1f3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n\n    try {\n      new ZkCmdExecutor(zkStateReader.getZkClient().getZkClientTimeout())\n          .ensureExists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection,\n              zkClient);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"691d1439503ec32e198724114f6cd32446c86ac6","date":1506996002,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkStateReader = zkStateReader;\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkStateReader = zkStateReader;\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkStateReader).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkStateReader zkStateReader) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkStateReader.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkStateReader = zkStateReader;\n    this.shardId = shardId;\n    this.collection = collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["691d1439503ec32e198724114f6cd32446c86ac6"],"3bd378a5822440390b13239c736e2192b9d02bec":["b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["a219a0b086b948977c595b608d1ca4195de2d1f3"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"691d1439503ec32e198724114f6cd32446c86ac6":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b954d1444134ef40d3fcea752c6aaaff4e7da056","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["3bd378a5822440390b13239c736e2192b9d02bec"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","691d1439503ec32e198724114f6cd32446c86ac6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a219a0b086b948977c595b608d1ca4195de2d1f3":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["3bd378a5822440390b13239c736e2192b9d02bec","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["b954d1444134ef40d3fcea752c6aaaff4e7da056"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bd378a5822440390b13239c736e2192b9d02bec":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a219a0b086b948977c595b608d1ca4195de2d1f3"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"691d1439503ec32e198724114f6cd32446c86ac6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["691d1439503ec32e198724114f6cd32446c86ac6","6240b74b884c5587f2a4062dd27d6c32bf228889","9856095f7afb5a607bf5e65077615ed91273508c"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2":["3bd378a5822440390b13239c736e2192b9d02bec"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"a219a0b086b948977c595b608d1ca4195de2d1f3":["b954d1444134ef40d3fcea752c6aaaff4e7da056"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["439c63ae5d22132fca810a0029a854e97d2c1a3e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","6240b74b884c5587f2a4062dd27d6c32bf228889","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}