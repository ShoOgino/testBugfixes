{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    delegee.searchParams = sampler.overSampledSearchParams(original);\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres); \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      \n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n\n    delegee.searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    delegee.searchParams = sampler.overSampledSearchParams(original);\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres); \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      \n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n\n    delegee.searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b31c82c6df2339d0c31b592f919be77383dac10","date":1369815843,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return fixedRes; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    delegee.searchParams = sampler.overSampledSearchParams(original);\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres); \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      \n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n\n    delegee.searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","bugFix":["571abba77e55fea386a38c0024f72ffa5b37a9ad","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7","date":1369910219,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fres.getFacetRequest()));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return fixedRes; \n  }\n\n","bugFix":["571abba77e55fea386a38c0024f72ffa5b37a9ad","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetRequest fr = fres.getFacetRequest();\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fr, createOrdinalValueResolver(fr));\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fr));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fres.getFacetRequest()));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetRequest fr = fres.getFacetRequest();\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fr, createOrdinalValueResolver(fr));\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fr));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fres.getFacetRequest()));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetRequest fr = fres.getFacetRequest();\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fr, createOrdinalValueResolver(fr));\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fr));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingWrapper#accumulate(ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled (and without statistics-compute)\n    FacetSearchParams original = delegee.searchParams;\n    boolean shouldOversample = sampler.samplingParams.shouldOverSample();\n   \n    if (shouldOversample) {\n      delegee.searchParams = sampler.overSampledSearchParams(original);\n    }\n    \n    SampleResult sampleSet = sampler.getSampleSet(docids);\n\n    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();\n    \n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetRequest fr = fres.getFacetRequest();\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fr, createOrdinalValueResolver(fr));\n      if (sampleFixer != null) {\n        // fix the result of current request\n        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); \n        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n      }\n      \n      if (shouldOversample) {\n        // Using the sampler to trim the extra (over-sampled) results\n        fres = sampler.trimResult(fres);\n      }\n      \n      // final labeling if allowed (because labeling is a costly operation)\n      if (fres.getFacetResultNode().ordinal == TaxonomyReader.INVALID_ORDINAL) {\n        // category does not exist, add an empty result\n        results.add(emptyResult(fres.getFacetResultNode().ordinal, fr));\n      } else {\n        frh.labelResult(fres);\n        results.add(fres);\n      }\n    }\n\n    if (shouldOversample) {\n      delegee.searchParams = original; // Back to original params\n    }\n    \n    return results; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"4b31c82c6df2339d0c31b592f919be77383dac10":["607428da722dcb3e86bbd11c63de8986e6275c36"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["4b31c82c6df2339d0c31b592f919be77383dac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"607428da722dcb3e86bbd11c63de8986e6275c36":["4b31c82c6df2339d0c31b592f919be77383dac10"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4b31c82c6df2339d0c31b592f919be77383dac10":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}