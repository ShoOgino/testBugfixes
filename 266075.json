{"path":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","commits":[{"id":"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5","date":1196349488,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null){\n      public void add(Token t) {\n        if (t != null && t.termText().equalsIgnoreCase(\"The\")){\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    Token token = null;\n    int i = 0;\n    while ((token = source.next()) != null){\n      assertTrue(token.termText() + \" is not equal to \" + tokens1[i], token.termText().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    while ((token = sink1.next()) != null){\n      assertTrue(token.termText() + \" is not equal to \" + \"The\", token.termText().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0da80a9f42f3ff24d68eedd705a763a1bcdd179d","date":1198163279,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.termText().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    Token token = null;\n    int i = 0;\n    while ((token = source.next()) != null) {\n      assertTrue(token.termText() + \" is not equal to \" + tokens1[i], token.termText().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    while ((token = sink1.next()) != null) {\n      assertTrue(token.termText() + \" is not equal to \" + \"The\", token.termText().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null){\n      public void add(Token t) {\n        if (t != null && t.termText().equalsIgnoreCase(\"The\")){\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    Token token = null;\n    int i = 0;\n    while ((token = source.next()) != null){\n      assertTrue(token.termText() + \" is not equal to \" + tokens1[i], token.termText().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    while ((token = sink1.next()) != null){\n      assertTrue(token.termText() + \" is not equal to \" + \"The\", token.termText().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.term().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = source.next(reusableToken); nextToken != null; nextToken = source.next(reusableToken)) {\n      assertTrue(nextToken.term() + \" is not equal to \" + tokens1[i], nextToken.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    for (Token token = sink1.next(reusableToken); token != null; token = sink1.next(reusableToken)) {\n      assertTrue(token.term() + \" is not equal to \" + \"The\", token.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.termText().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    Token token = null;\n    int i = 0;\n    while ((token = source.next()) != null) {\n      assertTrue(token.termText() + \" is not equal to \" + tokens1[i], token.termText().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    while ((token = sink1.next()) != null) {\n      assertTrue(token.termText() + \" is not equal to \" + \"The\", token.termText().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.term().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = source.next(reusableToken); nextToken != null; nextToken = source.next(reusableToken)) {\n      assertTrue(nextToken.term() + \" is not equal to \" + tokens1[i], nextToken.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    for (Token token = sink1.next(reusableToken); token != null; token = sink1.next(reusableToken)) {\n      assertTrue(token.term() + \" is not equal to \" + \"The\", token.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc","date":1243692318,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["0da80a9f42f3ff24d68eedd705a763a1bcdd179d"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0da80a9f42f3ff24d68eedd705a763a1bcdd179d":["4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5"],"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5":["0da80a9f42f3ff24d68eedd705a763a1bcdd179d"],"0da80a9f42f3ff24d68eedd705a763a1bcdd179d":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}