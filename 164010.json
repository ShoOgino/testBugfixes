{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScorer) {\n          final ConstantScoreQuery.ConstantScorer innerScorer = (ConstantScoreQuery.ConstantScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.docIdSetIterator.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"954e59be3da8dc1b046646ad7af4b466852009d3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"51f5280f31484820499077f41fcdfe92d527d9dc":["954e59be3da8dc1b046646ad7af4b466852009d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}