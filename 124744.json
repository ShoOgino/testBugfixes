{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0;\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int offsetInBlock = offsetInBlock(index);\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert offsetInBlock(index) == 0;\n    final int startBlock = blockOffset(index);\n    final int endBlock = blockOffset(index + len);\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << shifts[i]);\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda","date":1340008138,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int offsetInBlock = offsetInBlock(index);\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert offsetInBlock(index) == 0;\n    final int startBlock = blockOffset(index);\n    final int endBlock = blockOffset(index + len);\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << shifts[i]);\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0;\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int offsetInBlock = offsetInBlock(index);\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert offsetInBlock(index) == 0;\n    final int startBlock = blockOffset(index);\n    final int endBlock = blockOffset(index + len);\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << shifts[i]);\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c","date":1341308106,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final int startBlock = index / valuesPerBlock;\n    final int endBlock = (index + len) / valuesPerBlock;\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << (i * bitsPerValue));\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int offsetInBlock = offsetInBlock(index);\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert offsetInBlock(index) == 0;\n    final int startBlock = blockOffset(index);\n    final int endBlock = blockOffset(index + len);\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << shifts[i]);\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.set(blocks, blockIndex, arr, off, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final int startBlock = index / valuesPerBlock;\n    final int endBlock = (index + len) / valuesPerBlock;\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << (i * bitsPerValue));\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.set(blocks, blockIndex, arr, off, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int offsetInBlock = offsetInBlock(index);\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert offsetInBlock(index) == 0;\n    final int startBlock = blockOffset(index);\n    final int endBlock = blockOffset(index + len);\n    final int diff = (endBlock - startBlock) * valuesPerBlock;\n    index += diff; len -= diff;\n    for (int block = startBlock; block < endBlock; ++block) {\n      long next = 0L;\n      for (int i = 0; i < valuesPerBlock; ++i) {\n        next |= (arr[off++] << shifts[i]);\n      }\n      blocks[block] = next;\n    }\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(\n        LongBuffer.wrap(arr, off, arr.length - off),\n        LongBuffer.wrap(blocks, blockIndex, blocks.length - blockIndex),\n        nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.set(blocks, blockIndex, arr, off, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blockCount() == 1;\n    assert op.valueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(\n        LongBuffer.wrap(arr, off, arr.length - off),\n        LongBuffer.wrap(blocks, blockIndex, blocks.length - blockIndex),\n        nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blockCount() == 1;\n    assert op.valueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.set(blocks, blockIndex, arr, off, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blockCount() == 1;\n    assert op.valueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blocks() == 1;\n    assert op.values() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.set(blocks, blockIndex, arr, off, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.longBlockCount() == 1;\n    assert op.longValueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blockCount() == 1;\n    assert op.valueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.longBlockCount() == 1;\n    assert op.longValueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.blockCount() == 1;\n    assert op.valueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    @SuppressWarnings(\"deprecation\")\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.longBlockCount() == 1;\n    assert op.longValueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n\n    // go to the next block boundary\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final int offsetInBlock = index % valuesPerBlock;\n    if (offsetInBlock != 0) {\n      for (int i = offsetInBlock; i < valuesPerBlock && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % valuesPerBlock == 0;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED_SINGLE_BLOCK, bitsPerValue);\n    assert op.longBlockCount() == 1;\n    assert op.longValueCount() == valuesPerBlock;\n    final int blockIndex = index / valuesPerBlock;\n    final int nblocks = (index + len) / valuesPerBlock - blockIndex;\n    op.encode(arr, off, blocks, blockIndex, nblocks);\n    final int diff = nblocks * valuesPerBlock;\n    index += diff; len -= diff;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to\n      // set\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"55110eb60c5105294fc2ae7912d82b750865aa58":["fbf2299b235bb1f008e10b7e3c449b4c70e4a34c"],"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","0e3359210474c12c0b79e6400450313e3d7ef2bb"],"de522d9303bd67c8473a269a1319125d1f3700e0":["f8615860cb50aefb8eebca1d1b3893dbe21cf126","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["035130b0c342f404c027af8c8870587c3741cb1e"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c":["55110eb60c5105294fc2ae7912d82b750865aa58"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","de522d9303bd67c8473a269a1319125d1f3700e0","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["fbf2299b235bb1f008e10b7e3c449b4c70e4a34c","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"035130b0c342f404c027af8c8870587c3741cb1e":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}