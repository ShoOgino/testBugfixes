{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","commits":[{"id":"fb32b2f58e1f02551c5abe6c272b58a970e0bf29","date":1476220416,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i=0; i<nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i==0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\"+i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i=0; i<nShards; i++) {\n        ctx.setShard(\"s\"+i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards+i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i=0; i<nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i==0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\"+i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i=0; i<nShards; i++) {\n        ctx.setShard(\"s\"+i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards+i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i=0; i<nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i==0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\"+i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i=0; i<nShards; i++) {\n        ctx.setShard(\"s\"+i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards+i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i=0; i<nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i==0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\"+i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i=0; i<nShards; i++) {\n        ctx.setShard(\"s\"+i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards+i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i=0; i<nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i==0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\"+i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i=0; i<nShards; i++) {\n        ctx.setShard(\"s\"+i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards+i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = ObjectBuilder.fromJSON(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetRequest.FacetParser parser = new FacetRequest.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetRequest.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetRequest.FacetParser parser = new FacetRequest.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetParser.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetRequest.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#doTestRefine(String,String...).mjava","sourceNew":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      @SuppressWarnings({\"rawtypes\"})\n      FacetParser parser = new FacetParser.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  void doTestRefine(String facet, String... responsesAndTests) throws Exception {\n    SolrQueryRequest req = req();\n    try {\n      int nShards = responsesAndTests.length / 2;\n      Object jsonFacet = Utils.fromJSONString(facet);\n      FacetParser parser = new FacetParser.FacetTopParser(req);\n      FacetRequest facetRequest = parser.parse(jsonFacet);\n\n      FacetMerger merger = null;\n      FacetMerger.Context ctx = new FacetMerger.Context(nShards);\n      for (int i = 0; i < nShards; i++) {\n        Object response = fromJSON(responsesAndTests[i]);\n        if (i == 0) {\n          merger = facetRequest.createFacetMerger(response);\n        }\n        ctx.newShard(\"s\" + i);\n        merger.merge(response, ctx);\n      }\n\n      for (int i = 0; i < nShards; i++) {\n        ctx.setShard(\"s\" + i);\n        Object refinement = merger.getRefinement(ctx);\n        String tests = responsesAndTests[nShards + i];\n        match(refinement, 1e-5, tests);\n      }\n\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["28288370235ed02234a64753cdbf0c6ec096304a"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29","39fdbc59d893f5a211736e861fe145798a40b9ff"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29","39fdbc59d893f5a211736e861fe145798a40b9ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["e98520789adb1d5ad05afb4956eca0944a929688"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["39fdbc59d893f5a211736e861fe145798a40b9ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}