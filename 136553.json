{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.shutdown();\n    writer2.shutdown();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.shutdown();\n    writer2.shutdown();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":null,"sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":null,"sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":null,"sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTieBreaker().mjava","sourceNew":null,"sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * SlowFuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    SlowFuzzyQuery fq = new SlowFuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d0ef034a4f10871667ae75181537775ddcf8ade4","89424def13674ea17829b41c5883c54ecc31a132"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["d0ef034a4f10871667ae75181537775ddcf8ade4","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}