{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214e298ef4711259f333346502d6068a4db56a22","date":1355153351,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal, ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal, ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal,\n          ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal, ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testDefaultOrdinalPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDefaultOrdinalPolicy() {\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertFalse(\"default ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 300; i++) {\n      int ordinal = 1 + random().nextInt(Integer.MAX_VALUE - 1);\n      assertTrue(\"default ordinal policy should match \" + ordinal, ordinalPolicy.shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["214e298ef4711259f333346502d6068a4db56a22"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"214e298ef4711259f333346502d6068a4db56a22":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","214e298ef4711259f333346502d6068a4db56a22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["214e298ef4711259f333346502d6068a4db56a22","407687e67faf6e1f02a211ca078d8e3eed631027"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"214e298ef4711259f333346502d6068a4db56a22":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}