{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","sourceOld":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                if (i==0) {\n                    doc.add(new Field(\"start\"+ng, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(new Field(\"end\"+ng, end, Field.Store.YES, Field.Index.UN_TOKENIZED));\n            }\n        }\n    }\n\n","sourceOld":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc\n            .add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.YES,\n              Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.YES,\n            Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","sourceOld":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                if (i==0) {\n                    doc.add(new Field(\"start\"+ng, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(new Field(\"end\"+ng, end, Field.Store.YES, Field.Index.UN_TOKENIZED));\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d6c8635b7359c78703bca99eed29c45ed44ac7f","date":1153471142,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc\n            .add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.YES,\n              Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.YES,\n            Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac963969d428e20af8b7f75f1f80e41dd42d0f8","date":1179572678,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.YES, Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.UN_TOKENIZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.UN_TOKENIZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.UN_TOKENIZED));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          doc.add(new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        doc.add(new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["6ac963969d428e20af8b7f75f1f80e41dd42d0f8"],"6ac963969d428e20af8b7f75f1f80e41dd42d0f8":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["6ac963969d428e20af8b7f75f1f80e41dd42d0f8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6ac963969d428e20af8b7f75f1f80e41dd42d0f8":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}