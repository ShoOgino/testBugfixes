{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSegmentsChecksumError().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName);\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir, true);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}