{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterClauseDoesNotImpactScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"a d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // With a single clause, we will rewrite to the underlying\n    // query. Make sure that it returns null scores\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with two clauses, we will get a conjunction scorer\n    // Make sure it returns null scores\n    q.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with a scoring clause, we need to make sure that\n    // the boolean scores are the same as those from the term\n    // query\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER and empty SHOULD\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"e\")), Occur.SHOULD);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // mix of FILTER and MUST\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"d\")), Occur.MUST);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER + minShouldMatch\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"field\", \"d\")), Occur.SHOULD);\n    q.setMinimumNumberShouldMatch(1);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","sourceNew":"  public void testFilterClauseDoesNotImpactScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"a d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder qBuilder = new BooleanQuery.Builder();\n    BooleanQuery q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // With a single clause, we will rewrite to the underlying\n    // query. Make sure that it returns null scores\n    assertSameScoresWithoutFilters(searcher, qBuilder.build());\n\n    // Now with two clauses, we will get a conjunction scorer\n    // Make sure it returns null scores\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with a scoring clause, we need to make sure that\n    // the boolean scores are the same as those from the term\n    // query\n    qBuilder.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER and empty SHOULD\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"e\")), Occur.SHOULD);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // mix of FILTER and MUST\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.MUST);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER + minShouldMatch\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.SHOULD);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.SHOULD);\n    qBuilder.setMinimumNumberShouldMatch(1);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterClauseDoesNotImpactScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"a d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // With a single clause, we will rewrite to the underlying\n    // query. Make sure that it returns null scores\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with two clauses, we will get a conjunction scorer\n    // Make sure it returns null scores\n    q.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with a scoring clause, we need to make sure that\n    // the boolean scores are the same as those from the term\n    // query\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER and empty SHOULD\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"e\")), Occur.SHOULD);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // mix of FILTER and MUST\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"d\")), Occur.MUST);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER + minShouldMatch\n    q = new BooleanQuery();\n    q.setBoost(random().nextFloat());\n    q.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"field\", \"d\")), Occur.SHOULD);\n    q.setMinimumNumberShouldMatch(1);\n    assertSameScoresWithoutFilters(searcher, q);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFilterClauseDoesNotImpactScore().mjava","sourceNew":"  public void testFilterClauseDoesNotImpactScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"a d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder qBuilder = new BooleanQuery.Builder();\n    BooleanQuery q = qBuilder.build();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // With a single clause, we will rewrite to the underlying\n    // query. Make sure that it returns null scores\n    assertSameScoresWithoutFilters(searcher, qBuilder.build());\n\n    // Now with two clauses, we will get a conjunction scorer\n    // Make sure it returns null scores\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    q = qBuilder.build();\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with a scoring clause, we need to make sure that\n    // the boolean scores are the same as those from the term\n    // query\n    qBuilder.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n    q = qBuilder.build();\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER and empty SHOULD\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"e\")), Occur.SHOULD);\n    q = qBuilder.build();\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // mix of FILTER and MUST\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.MUST);\n    q = qBuilder.build();\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER + minShouldMatch\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.SHOULD);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.SHOULD);\n    qBuilder.setMinimumNumberShouldMatch(1);\n    q = qBuilder.build();\n    assertSameScoresWithoutFilters(searcher, q);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterClauseDoesNotImpactScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"a d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder qBuilder = new BooleanQuery.Builder();\n    BooleanQuery q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // With a single clause, we will rewrite to the underlying\n    // query. Make sure that it returns null scores\n    assertSameScoresWithoutFilters(searcher, qBuilder.build());\n\n    // Now with two clauses, we will get a conjunction scorer\n    // Make sure it returns null scores\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // Now with a scoring clause, we need to make sure that\n    // the boolean scores are the same as those from the term\n    // query\n    qBuilder.add(new TermQuery(new Term(\"field\", \"c\")), Occur.SHOULD);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER and empty SHOULD\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"e\")), Occur.SHOULD);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // mix of FILTER and MUST\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.MUST);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    // FILTER + minShouldMatch\n    qBuilder = new BooleanQuery.Builder();\n    qBuilder.add(new TermQuery(new Term(\"field\", \"b\")), Occur.FILTER);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"a\")), Occur.SHOULD);\n    qBuilder.add(new TermQuery(new Term(\"field\", \"d\")), Occur.SHOULD);\n    qBuilder.setMinimumNumberShouldMatch(1);\n    q = qBuilder.build();\n    q.setBoost(random().nextFloat());\n    assertSameScoresWithoutFilters(searcher, q);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}