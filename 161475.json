{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/CoresVariable#computeValue(Policy.Session,Clause.Condition,String,String,String).mjava","commits":[{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/CoresVariable#computeValue(Policy.Session,Clause.Condition,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object computeValue(Policy.Session session, Clause.Condition condition, String collection, String shard, String node) {\n    if (condition.computedType == Clause.ComputedType.EQUAL) {\n      int[] coresCount = new int[1];\n      int[] liveNodes = new int[1];\n      for (Row row : session.matrix) {\n        if (!row.isLive) continue;\n        liveNodes[0]++;\n        row.forEachReplica(replicaInfo -> coresCount[0]++);\n      }\n      return liveNodes[0] == 0 || coresCount[0] == 0 ? 0d : (double) coresCount[0] / (double) liveNodes[0];\n    } else {\n      throw new IllegalArgumentException(\"Invalid computed type in \" + condition);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/CoresVariable#computeValue(Policy.Session,Clause.Condition,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object computeValue(Policy.Session session, Clause.Condition condition, String collection, String shard, String node) {\n    if (condition.computedType == Clause.ComputedType.EQUAL) {\n      int[] coresCount = new int[1];\n      int[] liveNodes = new int[1];\n      for (Row row : session.matrix) {\n        if (!row.isLive) continue;\n        liveNodes[0]++;\n        row.forEachReplica(replicaInfo -> coresCount[0]++);\n      }\n      return liveNodes[0] == 0 || coresCount[0] == 0 ? 0d : (double) coresCount[0] / (double) liveNodes[0];\n    } else {\n      throw new IllegalArgumentException(\"Invalid computed type in \" + condition);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["52316373036b9f161a08896e7c9ebf4389790a47"],"52316373036b9f161a08896e7c9ebf4389790a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52316373036b9f161a08896e7c9ebf4389790a47"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52316373036b9f161a08896e7c9ebf4389790a47":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}