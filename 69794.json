{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","commits":[{"id":"fafedf8c0d7ec59d788fbf0e3881ba8178c05158","date":1485844621,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void check10(SolrCore core) {\n    // Just get a couple of searches to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0debbe3b933db3b47fdc5984fbe24e55324d3ed4","date":1485866433,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void check10(SolrCore core) {\n    // Just get a couple of searches to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void check10(SolrCore core) {\n    // Just get a couple of searches to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","sourceNew":"  private void check10(SolrCore core) {\n\n    // DEBUGGING ONLY since I can't get this to fail locally (Erick Erickson)\n    // Wondering if this is the problem with multiple searchers being opened on load, in which case\n    // looping for a bit should help.\n    boolean failIt = false;\n    try {\n      for (int idx = 0; idx < 10; ++idx) {\n        LocalSolrQueryRequest lsrg = makeReq(core, \"q\", \"*:*\", \"wt\", \"xml\");\n        String resp = h.query(lsrg);\n        if (resp.contains(\"numFound=\\\"10\\\"\")) {\n          if (failIt) {\n            fail(\"***********EOE found 10 docs after failing to find 10 docs the first time, Implicates SOLR-11035 ???\");\n          }\n          break;\n        }\n        failIt = true;\n        System.out.println(\"********EOE AT LEAST ONE LOOP FAILED TO FIND 10 DOCS. resp: \" + resp);\n        Thread.sleep(1000);\n      }\n      if (failIt) {\n        System.out.println(\"********EOE Test failed, what happens if we add a doc now? Will there be 11 docs? \");\n        addLazy(core, \"id\", \"1000EOE\");\n        SolrQueryRequest req = makeReq(core);\n        CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n        core.getUpdateHandler().commit(cmtCmd);\n        assertQ(\"test closing core without committing after adding 11th document\",\n            makeReq(core, \"q\", \"*:*\")\n            , \"//result[@numFound='11']\"\n        );\n        fail(\"*************EOE added 11th doc and then found 11! Implicates SOLR-11035 ??? \");\n      }\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n    // Just get a simple search to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","sourceOld":"  private void check10(SolrCore core) {\n    // Just get a couple of searches to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#check10(SolrCore).mjava","sourceNew":"  private void check10(SolrCore core) {\n    // Just get a couple of searches to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","sourceOld":"  private void check10(SolrCore core) {\n\n    // DEBUGGING ONLY since I can't get this to fail locally (Erick Erickson)\n    // Wondering if this is the problem with multiple searchers being opened on load, in which case\n    // looping for a bit should help.\n    boolean failIt = false;\n    try {\n      for (int idx = 0; idx < 10; ++idx) {\n        LocalSolrQueryRequest lsrg = makeReq(core, \"q\", \"*:*\", \"wt\", \"xml\");\n        String resp = h.query(lsrg);\n        if (resp.contains(\"numFound=\\\"10\\\"\")) {\n          if (failIt) {\n            fail(\"***********EOE found 10 docs after failing to find 10 docs the first time, Implicates SOLR-11035 ???\");\n          }\n          break;\n        }\n        failIt = true;\n        System.out.println(\"********EOE AT LEAST ONE LOOP FAILED TO FIND 10 DOCS. resp: \" + resp);\n        Thread.sleep(1000);\n      }\n      if (failIt) {\n        System.out.println(\"********EOE Test failed, what happens if we add a doc now? Will there be 11 docs? \");\n        addLazy(core, \"id\", \"1000EOE\");\n        SolrQueryRequest req = makeReq(core);\n        CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n        core.getUpdateHandler().commit(cmtCmd);\n        assertQ(\"test closing core without committing after adding 11th document\",\n            makeReq(core, \"q\", \"*:*\")\n            , \"//result[@numFound='11']\"\n        );\n        fail(\"*************EOE added 11th doc and then found 11! Implicates SOLR-11035 ??? \");\n      }\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n    // Just get a simple search to work!\n    assertQ(\"test closing core without committing\",\n        makeReq(core, \"q\", \"*:*\")\n        , \"//result[@numFound='10']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fafedf8c0d7ec59d788fbf0e3881ba8178c05158"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"fafedf8c0d7ec59d788fbf0e3881ba8178c05158":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48e6317c36b128552eaed2363bb069267defb0e0"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0debbe3b933db3b47fdc5984fbe24e55324d3ed4","fafedf8c0d7ec59d788fbf0e3881ba8178c05158"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"fafedf8c0d7ec59d788fbf0e3881ba8178c05158":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"48e6317c36b128552eaed2363bb069267defb0e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}