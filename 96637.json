{"path":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6550af40a4977993323e8fd3b3222a2402084800","date":1334548895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.shutdown();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.shutdown();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.shutdown();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.shutdown();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.shutdown();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.shutdown();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.shutdown();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.shutdown();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random(), true);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(analyzer));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.listOfSegmentCommitInfos().size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":["e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.cloneSegmentInfos().size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    // SMS can cause this test to run indefinitely long:\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n\n    final MyIndexWriter w = new MyIndexWriter(d, iwc);\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random());\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.listOfSegmentCommitInfos().size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (doStop.get() == false) {\n            w.updateDocument(new Term(\"docid\", \"\" + random().nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86365ce8db75e42ebe10805e99e92c463fef63b6"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["6613659748fe4411a7dcf85266e55db1f95f7315","e1151ecb4798f5c31137aec032c241638018ed20"],"6613659748fe4411a7dcf85266e55db1f95f7315":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["221076a44effb5561a3b799974ba1a35119fbcc0"],"6550af40a4977993323e8fd3b3222a2402084800":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"221076a44effb5561a3b799974ba1a35119fbcc0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["221076a44effb5561a3b799974ba1a35119fbcc0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["221076a44effb5561a3b799974ba1a35119fbcc0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"e1151ecb4798f5c31137aec032c241638018ed20":["6613659748fe4411a7dcf85266e55db1f95f7315"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["6550af40a4977993323e8fd3b3222a2402084800"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e1151ecb4798f5c31137aec032c241638018ed20"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6550af40a4977993323e8fd3b3222a2402084800":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"221076a44effb5561a3b799974ba1a35119fbcc0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"e1151ecb4798f5c31137aec032c241638018ed20":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["221076a44effb5561a3b799974ba1a35119fbcc0"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6550af40a4977993323e8fd3b3222a2402084800"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}