{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n    // TODO: can we optimize if FLAG_PAYLOADS / FLAG_OFFSETS\n    // isn't passed?\n\n    // TODO: refactor\n    if (fieldInfo.hasPayloads() || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["322360ac5185a8446d3e0b530b2068bef67cd3d5","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["4cc45c615dbb82bf79d5f9550286098367874fbf","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}