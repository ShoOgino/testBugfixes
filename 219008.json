{"path":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","commits":[{"id":"8f8f5dd9e0322b913c47628300753239d0d5ef7e","date":1253656557,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Set<Map.Entry<String, String>> input2expectedSet = initMap().entrySet();\n    for (Iterator<Entry<String, String>> i = input2expectedSet.iterator(); i\n        .hasNext();) {\n      Map.Entry<String, String> me = i.next();\n      String input = me.getKey();\n      String expected = me.getValue();\n      String message = \"message: input value is: \" + input;\n      assertEquals(message, expected, testFilter(input, \"common\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsFilter(\n            new WhitespaceTokenizer(in), commonWords);\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Set<Map.Entry<String, String>> input2expectedSet = initMap().entrySet();\n    for (Iterator<Entry<String, String>> i = input2expectedSet.iterator(); i\n        .hasNext();) {\n      Map.Entry<String, String> me = i.next();\n      String input = me.getKey();\n      String expected = me.getValue();\n      String message = \"message: input value is: \" + input;\n      assertEquals(message, expected, testFilter(input, \"common\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsFilter(\n            new WhitespaceTokenizer(in), commonWords);\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsFilter(\n            new WhitespaceTokenizer(in), commonWords);\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}