{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#[T-extends-LBSolrClient.Req]_getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String,ReqSupplier[T]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#[T-extends-LBSolrClient.Req]_getRoutes(DocRouter,DocCollection,Map[String,List[String]],ModifiableSolrParams,String,ReqSupplier[T]).mjava","pathOld":"/dev/null","sourceNew":"  private <T extends LBSolrClient.Req> Map<String, T> getRoutes(DocRouter router,\n                                                                               DocCollection col, Map<String,List<String>> urlMap,\n                                                                               ModifiableSolrParams params, String idField,\n                                                                               ReqSupplier<T> reqSupplier) {\n    if ((documents == null || documents.size() == 0)\n        && (deleteById == null || deleteById.size() == 0)) {\n      return null;\n    }\n\n    Map<String,T> routes = new HashMap<>();\n    if (documents != null) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = documents.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        SolrInputDocument doc = entry.getKey();\n        Object id = doc.getFieldValue(idField);\n        if (id == null) {\n          return null;\n        }\n        Slice slice = router.getTargetSlice(id\n            .toString(), doc, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        T request = routes\n            .get(leaderUrl);\n        if (request == null) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          updateRequest.setMethod(getMethod());\n          updateRequest.setCommitWithin(getCommitWithin());\n          updateRequest.setParams(params);\n          updateRequest.setPath(getPath());\n          updateRequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          updateRequest.setResponseParser(getResponseParser());\n          request = reqSupplier.get(updateRequest, urls);\n          routes.put(leaderUrl, request);\n        }\n        UpdateRequest urequest = (UpdateRequest) request.getRequest();\n        Map<String,Object> value = entry.getValue();\n        Boolean ow = null;\n        if (value != null) {\n          ow = (Boolean) value.get(OVERWRITE);\n        }\n        if (ow != null) {\n          urequest.add(doc, ow);\n        } else {\n          urequest.add(doc);\n        }\n      }\n    }\n\n    // Route the deleteById's\n\n    if (deleteById != null) {\n\n      Iterator<Map.Entry<String,Map<String,Object>>> entries = deleteById.entrySet()\n          .iterator();\n      while (entries.hasNext()) {\n\n        Map.Entry<String,Map<String,Object>> entry = entries.next();\n\n        String deleteId = entry.getKey();\n        Map<String,Object> map = entry.getValue();\n        Long version = null;\n        if (map != null) {\n          version = (Long) map.get(VER);\n        }\n        Slice slice = router.getTargetSlice(deleteId, null, null, null, col);\n        if (slice == null) {\n          return null;\n        }\n        List<String> urls = urlMap.get(slice.getName());\n        if (urls == null) {\n          return null;\n        }\n        String leaderUrl = urls.get(0);\n        T request = routes.get(leaderUrl);\n        if (request != null) {\n          UpdateRequest urequest = (UpdateRequest) request.getRequest();\n          urequest.deleteById(deleteId, version);\n        } else {\n          UpdateRequest urequest = new UpdateRequest();\n          urequest.setParams(params);\n          urequest.deleteById(deleteId, version);\n          urequest.setCommitWithin(getCommitWithin());\n          urequest.setBasicAuthCredentials(getBasicAuthUser(), getBasicAuthPassword());\n          request = reqSupplier.get(urequest, urls);\n          routes.put(leaderUrl, request);\n        }\n      }\n    }\n\n    return routes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}