{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","commits":[{"id":"0226c4da52b4b59afa6d616cdf5bacb3733ca47e","date":1305730778,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"0226c4da52b4b59afa6d616cdf5bacb3733ca47e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","0226c4da52b4b59afa6d616cdf5bacb3733ca47e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0226c4da52b4b59afa6d616cdf5bacb3733ca47e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}