{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Position#add(int,int,int,int,int,Type).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Position#add(int,int,int,int,int,Type).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.Position#add(int,int,int,int,int,Type).mjava","sourceNew":"    public void add(int cost, int lastRightID, int backPos, int backIndex, int backID, Type backType) {\n      // NOTE: this isn't quite a true Viterbit search,\n      // becase we should check if lastRightID is\n      // already present here, and only update if the new\n      // cost is less than the current cost, instead of\n      // simply appending.  However, that will likely hurt\n      // performance (usually we add a lastRightID only once),\n      // and it means we actually create the full graph\n      // intersection instead of a \"normal\" Viterbi lattice:\n      if (count == costs.length) {\n        grow();\n      }\n      this.costs[count] = cost;\n      this.lastRightID[count] = lastRightID;\n      this.backPos[count] = backPos;\n      this.backIndex[count] = backIndex;\n      this.backID[count] = backID;\n      this.backType[count] = backType;\n      count++;\n    }\n\n","sourceOld":"    public void add(int cost, int lastRightID, int backPos, int backIndex, int backID, Type backType) {\n      // NOTE: this isn't quite a true Viterbit search,\n      // becase we should check if lastRightID is\n      // already present here, and only update if the new\n      // cost is less than the current cost, instead of\n      // simply appending.  However, that will likely hurt\n      // performance (usually we add a lastRightID only once),\n      // and it means we actually create the full graph\n      // intersection instead of a \"normal\" Viterbi lattice:\n      if (count == costs.length) {\n        grow();\n      }\n      this.costs[count] = cost;\n      this.lastRightID[count] = lastRightID;\n      this.backPos[count] = backPos;\n      this.backIndex[count] = backIndex;\n      this.backID[count] = backID;\n      this.backType[count] = backType;\n      count++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Position#add(int,int,int,int,int,Type).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Position#add(int,int,int,int,int,Type).mjava","sourceNew":"    public void add(int cost, int lastRightID, int backPos, int backIndex, int backID, Type backType) {\n      // NOTE: this isn't quite a true Viterbit search,\n      // becase we should check if lastRightID is\n      // already present here, and only update if the new\n      // cost is less than the current cost, instead of\n      // simply appending.  However, that will likely hurt\n      // performance (usually we add a lastRightID only once),\n      // and it means we actually create the full graph\n      // intersection instead of a \"normal\" Viterbi lattice:\n      if (count == costs.length) {\n        grow();\n      }\n      this.costs[count] = cost;\n      this.lastRightID[count] = lastRightID;\n      this.backPos[count] = backPos;\n      this.backIndex[count] = backIndex;\n      this.backID[count] = backID;\n      this.backType[count] = backType;\n      count++;\n    }\n\n","sourceOld":"    public void add(int cost, int lastRightID, int backPos, int backIndex, int backID, Type backType) {\n      // NOTE: this isn't quite a true Viterbit search,\n      // becase we should check if lastRightID is\n      // already present here, and only update if the new\n      // cost is less than the current cost, instead of\n      // simply appending.  However, that will likely hurt\n      // performance (usually we add a lastRightID only once),\n      // and it means we actually create the full graph\n      // intersection instead of a \"normal\" Viterbi lattice:\n      if (count == costs.length) {\n        grow();\n      }\n      this.costs[count] = cost;\n      this.lastRightID[count] = lastRightID;\n      this.backPos[count] = backPos;\n      this.backIndex[count] = backIndex;\n      this.backID[count] = backID;\n      this.backType[count] = backType;\n      count++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}