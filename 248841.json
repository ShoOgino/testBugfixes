{"path":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(IndexReader,String).mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public ScoreDocComparator newComparator(final IndexReader reader, final String fieldname)\n    throws IOException \n  {\n\n    // A future alternate version could store internal docids (would need to be regenerated per IndexReader)\n    // instead of loading the FieldCache instance into memory.\n\n    final FieldCache.StringIndex index =\n            FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n  \n    return new ScoreDocComparator () \n    {\n      public final int compare (final ScoreDoc d0, final ScoreDoc d1) {\n        final int f0 = index.order[d0.doc];\n        final int f1 = index.order[d1.doc];\n \n        final String id0 = index.lookup[f0];\n        final String id1 = index.lookup[f1];\n \n        final Integer b0 = priority.get( id0 );\n        final Integer b1 = priority.get( id1 );\n\n        final int v0 = (b0 == null) ? -1 : b0.intValue();\n        final int v1 = (b1 == null) ? -1 : b1.intValue();\n       \n        return v1 - v0;\n      }\n  \n      public Comparable sortValue (final ScoreDoc d0) {\n        final int f0 = index.order[d0.doc];\n        final String id0 = index.lookup[f0];\n        final Integer b0 = priority.get( id0 );\n        final int v0 = (b0 == null) ? -1 : b0.intValue();       \n        return new Integer( v0 );\n      }\n  \n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  public ScoreDocComparator newComparator(final IndexReader reader, final String fieldname)\n    throws IOException \n  {\n\n    // A future alternate version could store internal docids (would need to be regenerated per IndexReader)\n    // instead of loading the FieldCache instance into memory.\n\n    final FieldCache.StringIndex index =\n            FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n  \n    return new ScoreDocComparator () \n    {\n      public final int compare (final ScoreDoc d0, final ScoreDoc d1) {\n        final int f0 = index.order[d0.doc];\n        final int f1 = index.order[d1.doc];\n \n        final String id0 = index.lookup[f0];\n        final String id1 = index.lookup[f1];\n \n        final Integer b0 = priority.get( id0 );\n        final Integer b1 = priority.get( id1 );\n\n        final int v0 = (b0 == null) ? -1 : b0.intValue();\n        final int v1 = (b1 == null) ? -1 : b1.intValue();\n       \n        return v1 - v0;\n      }\n  \n      public Comparable sortValue (final ScoreDoc d0) {\n        final int f0 = index.order[d0.doc];\n        final String id0 = index.lookup[f0];\n        final Integer b0 = priority.get( id0 );\n        final int v0 = (b0 == null) ? -1 : b0.intValue();       \n        return new Integer( v0 );\n      }\n  \n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["5391288921372c32bf6096df320497ad2d05757f"],"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":[],"5391288921372c32bf6096df320497ad2d05757f":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ac3e6437547a34cce2b5405ce0cf9e3af578401e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}