{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCaseJ4.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCaseJ4.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["43b04c27924fe393e38e9f0986e32c634f261859","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["43b04c27924fe393e38e9f0986e32c634f261859"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["43b04c27924fe393e38e9f0986e32c634f261859","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"43b04c27924fe393e38e9f0986e32c634f261859":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}