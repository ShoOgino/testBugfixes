{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"übersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"ubersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~0.9\",\n        \"motley crue motley~0.75 crue~0.5\", \"renee zellweger renee~0.9 zellweger~2.0\" };\n\n    a = new ASCIIAnalyzer();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"übersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"ubersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~0.9\",\n        \"motley crue motley~0.75 crue~0.5\", \"renee zellweger renee~0.9 zellweger~2.0\" };\n\n    a = new ASCIIAnalyzer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"übersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"ubersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~1\",\n        \"motley crue motley~1 crue~2\", \"renee zellweger renee~0 zellweger~2\" };\n\n    a = new ASCIIAnalyzer();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"übersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"ubersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~0.9\",\n        \"motley crue motley~0.75 crue~0.5\", \"renee zellweger renee~0.9 zellweger~2.0\" };\n\n    a = new ASCIIAnalyzer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"*bersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"*bersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~1\",\n        \"motley crue motley~1 crue~2\", \"renee zellweger renee~0 zellweger~2\" };\n\n    wildcardEscapeHits.put(\"mö*tley\", \"moatley\");\n\n    // need to have at least one genuine wildcard to trigger the wildcard analysis\n    // hence the * before the y\n    wildcardEscapeHits.put(\"mö\\\\*tl*y\", \"mo*tley\");\n\n    // escaped backslash then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\\\\\*tley\", \"mo\\\\atley\");\n    \n    // escaped wildcard then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\??ley\", \"mo?tley\");\n\n    // the first is an escaped * which should yield a miss\n    wildcardEscapeMisses.put(\"mö\\\\*tl*y\", \"moatley\");\n      \n    a = new ASCIIAnalyzer();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"übersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"ubersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~1\",\n        \"motley crue motley~1 crue~2\", \"renee zellweger renee~0 zellweger~2\" };\n\n    a = new ASCIIAnalyzer();\n  }\n\n","bugFix":["874880417e0b2612f777ecd0afe39e0d90486752"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"*bersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"*bersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~1\",\n        \"motley crue motley~1 crue~2\", \"renee zellweger renee~0 zellweger~2\" };\n\n    wildcardEscapeHits.put(\"mö*tley\", \"moatley\");\n\n    // need to have at least one genuine wildcard to trigger the wildcard analysis\n    // hence the * before the y\n    wildcardEscapeHits.put(\"mö\\\\*tl*y\", \"mo*tley\");\n\n    // escaped backslash then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\\\\\*tley\", \"mo\\\\atley\");\n    \n    // escaped wildcard then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\??ley\", \"mo?tley\");\n\n    // the first is an escaped * which should yield a miss\n    wildcardEscapeMisses.put(\"mö\\\\*tl*y\", \"moatley\");\n      \n    a = new ASCIIAnalyzer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    wildcardInput = new String[] { \"*bersetzung über*ung\",\n        \"Mötley Cr\\u00fce Mötl?* Crü?\", \"Renée Zellweger Ren?? Zellw?ger\" };\n    wildcardExpected = new String[] { \"*bersetzung uber*ung\", \"motley crue motl?* cru?\",\n        \"renee zellweger ren?? zellw?ger\" };\n\n    prefixInput = new String[] { \"übersetzung übersetz*\",\n        \"Mötley Crüe Mötl* crü*\", \"René? Zellw*\" };\n    prefixExpected = new String[] { \"ubersetzung ubersetz*\", \"motley crue motl* cru*\",\n        \"rene? zellw*\" };\n\n    rangeInput = new String[] { \"[aa TO bb]\", \"{Anaïs TO Zoé}\" };\n    rangeExpected = new String[] { \"[aa TO bb]\", \"{anais TO zoe}\" };\n\n    fuzzyInput = new String[] { \"Übersetzung Übersetzung~0.9\",\n        \"Mötley Crüe Mötley~0.75 Crüe~0.5\",\n        \"Renée Zellweger Renée~0.9 Zellweger~\" };\n    fuzzyExpected = new String[] { \"ubersetzung ubersetzung~1\",\n        \"motley crue motley~1 crue~2\", \"renee zellweger renee~0 zellweger~2\" };\n\n    wildcardEscapeHits.put(\"mö*tley\", \"moatley\");\n\n    // need to have at least one genuine wildcard to trigger the wildcard analysis\n    // hence the * before the y\n    wildcardEscapeHits.put(\"mö\\\\*tl*y\", \"mo*tley\");\n\n    // escaped backslash then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\\\\\*tley\", \"mo\\\\atley\");\n    \n    // escaped wildcard then true wildcard\n    wildcardEscapeHits.put(\"mö\\\\??ley\", \"mo?tley\");\n\n    // the first is an escaped * which should yield a miss\n    wildcardEscapeMisses.put(\"mö\\\\*tl*y\", \"moatley\");\n      \n    a = new ASCIIAnalyzer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["046829b17e246624c179b94d5a20cb53fa945e87"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["046829b17e246624c179b94d5a20cb53fa945e87","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["046829b17e246624c179b94d5a20cb53fa945e87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}