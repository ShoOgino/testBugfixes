{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRandomOperations().mjava","commits":[{"id":"70c7dd11b97185dbbe8c5963593a87075fb15a40","date":1583720284,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testRandomOperations().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomOperations() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(new FilterMergePolicy(newMergePolicy()) {\n      boolean keepFullyDeletedSegment = random().nextBoolean();\n\n      @Override\n      public boolean keepFullyDeletedSegment(IOSupplier<CodecReader> readerIOSupplier) {\n        return keepFullyDeletedSegment;\n      }\n    });\n    try (Directory dir = newDirectory();\n         IndexWriter writer = new IndexWriter(dir, iwc);\n         SearcherManager sm = new SearcherManager(writer, new SearcherFactory())) {\n      Semaphore numOperations = new Semaphore(10 + random().nextInt(1000));\n      boolean singleDoc = random().nextBoolean();\n      Thread[] threads = new Thread[1 + random().nextInt(4)];\n      CountDownLatch latch = new CountDownLatch(threads.length);\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread(() -> {\n          latch.countDown();\n          try {\n            latch.await();\n            while (numOperations.tryAcquire()) {\n              String id = singleDoc ? \"1\" : Integer.toString(random().nextInt(10));\n              Document doc = new Document();\n              doc.add(new StringField(\"id\", id, Field.Store.YES));\n              if (random().nextInt(10) <= 2) {\n                writer.updateDocument(new Term(\"id\", id), doc);\n              } else if (random().nextInt(10) <= 2) {\n                writer.deleteDocuments(new Term(\"id\", id));\n              } else {\n                writer.addDocument(doc);\n              }\n              if (random().nextInt(100) < 10) {\n                sm.maybeRefreshBlocking();\n              }\n              if (random().nextInt(100) < 5) {\n                writer.commit();\n              }\n              if (random().nextInt(100) < 1) {\n                writer.forceMerge(1 + random().nextInt(10), random().nextBoolean());\n              }\n            }\n          } catch (Exception e) {\n            throw new AssertionError(e);\n          }\n        });\n        threads[i].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70c7dd11b97185dbbe8c5963593a87075fb15a40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70c7dd11b97185dbbe8c5963593a87075fb15a40"]},"commit2Childs":{"70c7dd11b97185dbbe8c5963593a87075fb15a40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70c7dd11b97185dbbe8c5963593a87075fb15a40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}