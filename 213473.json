{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":null,"sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}