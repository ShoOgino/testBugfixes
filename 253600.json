{"path":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","pathOld":"/dev/null","sourceNew":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, Arrays.copyOfRange(toSort, o, o + arr.length));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","sourceNew":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, ArrayUtil.copyOfSubArray(toSort, o, o + arr.length));\n  }\n\n","sourceOld":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, Arrays.copyOfRange(toSort, o, o + arr.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","sourceNew":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, ArrayUtil.copyOfSubArray(toSort, o, o + arr.length));\n  }\n\n","sourceOld":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, Arrays.copyOfRange(toSort, o, o + arr.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/BaseSortTestCase#test(Entry[]).mjava","sourceNew":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, ArrayUtil.copyOfSubArray(toSort, o, o + arr.length));\n  }\n\n","sourceOld":"  public void test(Entry[] arr) {\n    final int o = random().nextInt(1000);\n    final Entry[] toSort = new Entry[o + arr.length + random().nextInt(3)];\n    System.arraycopy(arr, 0, toSort, o, arr.length);\n    final Sorter sorter = newSorter(toSort);\n    sorter.sort(o, o + arr.length);\n    assertSorted(arr, Arrays.copyOfRange(toSort, o, o + arr.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","9798d0818e7a880546802b509792d3f3d57babd2"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9798d0818e7a880546802b509792d3f3d57babd2":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}