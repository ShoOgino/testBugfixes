{"path":"src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).parse();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        ConstantScoreQuery csq = new ConstantScoreQuery(rf);\n        return csq;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).parse();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        SolrConstantScoreQuery csq = new SolrConstantScoreQuery(rf);\n        return csq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).parse();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        ConstantScoreQuery csq = new ConstantScoreQuery(rf);\n        return csq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).parse();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        SolrConstantScoreQuery csq = new SolrConstantScoreQuery(rf);\n        return csq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).parse();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        SolrConstantScoreQuery csq = new SolrConstantScoreQuery(rf);\n        return csq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}