{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, false, 0);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":["9b05bfc12b2525ff33528806e03283a44d6fe7d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, false, 0);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, false, 0);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, false, 0);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, false, 0);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"e92a321a2612261e1010a4038c8586e30b081552":["a44b232879361a7ace3520b5b313094a9a35e044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}