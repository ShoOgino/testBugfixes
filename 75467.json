{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#unlock(Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#unlock(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#unlock(Directory).mjava","sourceNew":"  /**\n   * Forcibly unlocks the taxonomy in the named directory.\n   * <P>\n   * Caution: this should only be used by failure recovery code, when it is\n   * known that no other process nor thread is in fact currently accessing\n   * this taxonomy.\n   * <P>\n   * This method is unnecessary if your {@link Directory} uses a\n   * {@link NativeFSLockFactory} instead of the default\n   * {@link SimpleFSLockFactory}. When the \"native\" lock is used, a lock\n   * does not stay behind forever when the process using it dies. \n   */\n  public static void unlock(Directory directory) throws IOException {\n    IndexWriter.unlock(directory);\n  }\n\n","sourceOld":"  /**\n   * Forcibly unlocks the taxonomy in the named directory.\n   * <P>\n   * Caution: this should only be used by failure recovery code, when it is\n   * known that no other process nor thread is in fact currently accessing\n   * this taxonomy.\n   * <P>\n   * This method is unnecessary if your {@link Directory} uses a\n   * {@link NativeFSLockFactory} instead of the default\n   * {@link SimpleFSLockFactory}. When the \"native\" lock is used, a lock\n   * does not stay behind forever when the process using it dies. \n   */\n  public static void unlock(Directory directory) throws IOException {\n    IndexWriter.unlock(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafd23b8e49a461cdbc22b302dfdea2f2a08d953","date":1415887806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#unlock(Directory).mjava","sourceNew":null,"sourceOld":"  /**\n   * Forcibly unlocks the taxonomy in the named directory.\n   * <P>\n   * Caution: this should only be used by failure recovery code, when it is\n   * known that no other process nor thread is in fact currently accessing\n   * this taxonomy.\n   * <P>\n   * This method is unnecessary if your {@link Directory} uses a\n   * {@link NativeFSLockFactory} instead of the default\n   * {@link SimpleFSLockFactory}. When the \"native\" lock is used, a lock\n   * does not stay behind forever when the process using it dies. \n   */\n  public static void unlock(Directory directory) throws IOException {\n    IndexWriter.unlock(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}