{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","commits":[{"id":"5ceedb6814a4bde25632b8b3d75d7e54e4af8a48","date":1538355363,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvexHull() throws Exception {\n    String expr = \"let(echo=true,\" +\n        \"              x=array(96.42894739701268, 99.11076410926444, 95.71563821370013,101.4356840561301, 96.17912865782684, 113.430677406492, 109.5927785287056, 87.26561260238425, 103.3122002816537, 100.4959815617706, 92.78972440872515, 92.98815024042877, 89.1448359089767, 104.9410622701036, 106.5546761317927, 102.0132643274808, 119.6726096270366, 97.61388415294184, 106.7928221374049, 94.31369945729962, 87.37098859879977, 82.8015657665458, 88.84342877874248, 94.58797342988339, 92.38720473619748),\" +\n        \"              y=array(97.43395922838836, 109.5441846957560, 78.82698890096127, 96.67181538737611,95.52423701473863, 85.3391529394878, 87.01956497912255, 111.5289690656729,86.41034184809114, 84.11696923489203, 109.3874354244069, 102.3391063812790,109.0604436531823,102.7957014900897,114.4376483055848,107.4387578165579,106.2490201384653,103.4490197583837,93.8201540211101,101.6060721649409, 115.3512636715722,119.1046170610335,99.74910277836263,104.2116724112481, 86.02222520549304),\" +\n        \"              c=transpose(matrix(x, y)),\" +\n        \"              d=convexHull(c),\" +\n        \"              e=getVertices(d),\" +\n        \"              f=getArea(d),\" +\n        \"              g=getBoundarySize(d),\" +\n        \"              h=getBaryCenter(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> points = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertTrue(points.size() == 6);\n    List<Number> point1 = points.get(0);\n    assertEquals(point1.size(), 2);\n    assertEquals(point1.get(0).doubleValue(), 82.8015657665458, 0.0);\n    assertEquals(point1.get(1).doubleValue(), 119.1046170610335, 0.0);\n\n    List<Number> point2 = points.get(1);\n    assertEquals(point2.size(), 2);\n    assertEquals(point2.get(0).doubleValue(), 92.38720473619748, 0.0);\n    assertEquals(point2.get(1).doubleValue(), 86.02222520549304, 0.0);\n\n\n    List<Number> point3 = points.get(2);\n    assertEquals(point3.size(), 2);\n    assertEquals(point3.get(0).doubleValue(), 95.71563821370013, 0.0);\n    assertEquals(point3.get(1).doubleValue(), 78.82698890096127, 0.0);\n\n    List<Number> point4 = points.get(3);\n    assertEquals(point4.size(), 2);\n    assertEquals(point4.get(0).doubleValue(), 113.430677406492, 0.0);\n    assertEquals(point4.get(1).doubleValue(),  85.3391529394878, 0.0);\n\n\n    List<Number> point5 = points.get(4);\n    assertEquals(point5.size(), 2);\n    assertEquals(point5.get(0).doubleValue(), 119.6726096270366, 0.0);\n    assertEquals(point5.get(1).doubleValue(),  106.2490201384653, 0.0);\n\n\n    List<Number> point6 = points.get(5);\n    assertEquals(point6.size(), 2);\n    assertEquals(point6.get(0).doubleValue(), 106.5546761317927, 0.0);\n    assertEquals(point6.get(1).doubleValue(),  114.4376483055848, 0.0);\n\n\n    double area = tuples.get(0).getDouble(\"f\");\n    assertEquals(area, 911.6283603859929, 0.0);\n\n    double boundarySize = tuples.get(0).getDouble(\"g\");\n    assertEquals(boundarySize, 122.73784789223708, 0.0);\n\n    List<Number> baryCenter = (List<Number>)tuples.get(0).get(\"h\");\n    assertEquals(baryCenter.size(), 2);\n    assertEquals(baryCenter.get(0).doubleValue(), 101.3021125450865, 0.0);\n    assertEquals(baryCenter.get(1).doubleValue(), 100.07343616615786, 0.0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a0046d48ba82dd982903a22d0d3768645bb8222","date":1562031585,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","sourceNew":"  @Test\n  public void testConvexHull() throws Exception {\n    String expr = \"let(echo=true,\" +\n        \"              x=array(96.42894739701268, 99.11076410926444, 95.71563821370013,101.4356840561301, 96.17912865782684, 113.430677406492, 109.5927785287056, 87.26561260238425, 103.3122002816537, 100.4959815617706, 92.78972440872515, 92.98815024042877, 89.1448359089767, 104.9410622701036, 106.5546761317927, 102.0132643274808, 119.6726096270366, 97.61388415294184, 106.7928221374049, 94.31369945729962, 87.37098859879977, 82.8015657665458, 88.84342877874248, 94.58797342988339, 92.38720473619748),\" +\n        \"              y=array(97.43395922838836, 109.5441846957560, 78.82698890096127, 96.67181538737611,95.52423701473863, 85.3391529394878, 87.01956497912255, 111.5289690656729,86.41034184809114, 84.11696923489203, 109.3874354244069, 102.3391063812790,109.0604436531823,102.7957014900897,114.4376483055848,107.4387578165579,106.2490201384653,103.4490197583837,93.8201540211101,101.6060721649409, 115.3512636715722,119.1046170610335,99.74910277836263,104.2116724112481, 86.02222520549304),\" +\n        \"              c=transpose(matrix(x, y)),\" +\n        \"              d=convexHull(c),\" +\n        \"              e=getVertices(d),\" +\n        \"              f=getArea(d),\" +\n        \"              g=getBoundarySize(d),\" +\n        \"              h=getBaryCenter(d),\" +\n        \"              i=projectToBorder(d, matrix(array(99.11076410926444, 109.5441846957560))))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> points = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertTrue(points.size() == 6);\n    List<Number> point1 = points.get(0);\n    assertEquals(point1.size(), 2);\n    assertEquals(point1.get(0).doubleValue(), 82.8015657665458, 0.0);\n    assertEquals(point1.get(1).doubleValue(), 119.1046170610335, 0.0);\n\n    List<Number> point2 = points.get(1);\n    assertEquals(point2.size(), 2);\n    assertEquals(point2.get(0).doubleValue(), 92.38720473619748, 0.0);\n    assertEquals(point2.get(1).doubleValue(), 86.02222520549304, 0.0);\n\n\n    List<Number> point3 = points.get(2);\n    assertEquals(point3.size(), 2);\n    assertEquals(point3.get(0).doubleValue(), 95.71563821370013, 0.0);\n    assertEquals(point3.get(1).doubleValue(), 78.82698890096127, 0.0);\n\n    List<Number> point4 = points.get(3);\n    assertEquals(point4.size(), 2);\n    assertEquals(point4.get(0).doubleValue(), 113.430677406492, 0.0);\n    assertEquals(point4.get(1).doubleValue(),  85.3391529394878, 0.0);\n\n\n    List<Number> point5 = points.get(4);\n    assertEquals(point5.size(), 2);\n    assertEquals(point5.get(0).doubleValue(), 119.6726096270366, 0.0);\n    assertEquals(point5.get(1).doubleValue(),  106.2490201384653, 0.0);\n\n\n    List<Number> point6 = points.get(5);\n    assertEquals(point6.size(), 2);\n    assertEquals(point6.get(0).doubleValue(), 106.5546761317927, 0.0);\n    assertEquals(point6.get(1).doubleValue(),  114.4376483055848, 0.0);\n\n\n    double area = tuples.get(0).getDouble(\"f\");\n    assertEquals(area, 911.6283603859929, 0.0);\n\n    double boundarySize = tuples.get(0).getDouble(\"g\");\n    assertEquals(boundarySize, 122.73784789223708, 0.0);\n\n    List<Number> baryCenter = (List<Number>)tuples.get(0).get(\"h\");\n    assertEquals(baryCenter.size(), 2);\n    assertEquals(baryCenter.get(0).doubleValue(), 101.3021125450865, 0.0);\n    assertEquals(baryCenter.get(1).doubleValue(), 100.07343616615786, 0.0);\n\n    List<List<Number>> borderPoints = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(borderPoints.get(0).get(0).doubleValue(), 100.31316833934775, 0);\n    assertEquals(borderPoints.get(0).get(1).doubleValue(), 115.6639686234851, 0);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testConvexHull() throws Exception {\n    String expr = \"let(echo=true,\" +\n        \"              x=array(96.42894739701268, 99.11076410926444, 95.71563821370013,101.4356840561301, 96.17912865782684, 113.430677406492, 109.5927785287056, 87.26561260238425, 103.3122002816537, 100.4959815617706, 92.78972440872515, 92.98815024042877, 89.1448359089767, 104.9410622701036, 106.5546761317927, 102.0132643274808, 119.6726096270366, 97.61388415294184, 106.7928221374049, 94.31369945729962, 87.37098859879977, 82.8015657665458, 88.84342877874248, 94.58797342988339, 92.38720473619748),\" +\n        \"              y=array(97.43395922838836, 109.5441846957560, 78.82698890096127, 96.67181538737611,95.52423701473863, 85.3391529394878, 87.01956497912255, 111.5289690656729,86.41034184809114, 84.11696923489203, 109.3874354244069, 102.3391063812790,109.0604436531823,102.7957014900897,114.4376483055848,107.4387578165579,106.2490201384653,103.4490197583837,93.8201540211101,101.6060721649409, 115.3512636715722,119.1046170610335,99.74910277836263,104.2116724112481, 86.02222520549304),\" +\n        \"              c=transpose(matrix(x, y)),\" +\n        \"              d=convexHull(c),\" +\n        \"              e=getVertices(d),\" +\n        \"              f=getArea(d),\" +\n        \"              g=getBoundarySize(d),\" +\n        \"              h=getBaryCenter(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> points = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertTrue(points.size() == 6);\n    List<Number> point1 = points.get(0);\n    assertEquals(point1.size(), 2);\n    assertEquals(point1.get(0).doubleValue(), 82.8015657665458, 0.0);\n    assertEquals(point1.get(1).doubleValue(), 119.1046170610335, 0.0);\n\n    List<Number> point2 = points.get(1);\n    assertEquals(point2.size(), 2);\n    assertEquals(point2.get(0).doubleValue(), 92.38720473619748, 0.0);\n    assertEquals(point2.get(1).doubleValue(), 86.02222520549304, 0.0);\n\n\n    List<Number> point3 = points.get(2);\n    assertEquals(point3.size(), 2);\n    assertEquals(point3.get(0).doubleValue(), 95.71563821370013, 0.0);\n    assertEquals(point3.get(1).doubleValue(), 78.82698890096127, 0.0);\n\n    List<Number> point4 = points.get(3);\n    assertEquals(point4.size(), 2);\n    assertEquals(point4.get(0).doubleValue(), 113.430677406492, 0.0);\n    assertEquals(point4.get(1).doubleValue(),  85.3391529394878, 0.0);\n\n\n    List<Number> point5 = points.get(4);\n    assertEquals(point5.size(), 2);\n    assertEquals(point5.get(0).doubleValue(), 119.6726096270366, 0.0);\n    assertEquals(point5.get(1).doubleValue(),  106.2490201384653, 0.0);\n\n\n    List<Number> point6 = points.get(5);\n    assertEquals(point6.size(), 2);\n    assertEquals(point6.get(0).doubleValue(), 106.5546761317927, 0.0);\n    assertEquals(point6.get(1).doubleValue(),  114.4376483055848, 0.0);\n\n\n    double area = tuples.get(0).getDouble(\"f\");\n    assertEquals(area, 911.6283603859929, 0.0);\n\n    double boundarySize = tuples.get(0).getDouble(\"g\");\n    assertEquals(boundarySize, 122.73784789223708, 0.0);\n\n    List<Number> baryCenter = (List<Number>)tuples.get(0).get(\"h\");\n    assertEquals(baryCenter.size(), 2);\n    assertEquals(baryCenter.get(0).doubleValue(), 101.3021125450865, 0.0);\n    assertEquals(baryCenter.get(1).doubleValue(), 100.07343616615786, 0.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testConvexHull().mjava","sourceNew":"  @Test\n  public void testConvexHull() throws Exception {\n    String expr = \"let(echo=true,\" +\n        \"              x=array(96.42894739701268, 99.11076410926444, 95.71563821370013,101.4356840561301, 96.17912865782684, 113.430677406492, 109.5927785287056, 87.26561260238425, 103.3122002816537, 100.4959815617706, 92.78972440872515, 92.98815024042877, 89.1448359089767, 104.9410622701036, 106.5546761317927, 102.0132643274808, 119.6726096270366, 97.61388415294184, 106.7928221374049, 94.31369945729962, 87.37098859879977, 82.8015657665458, 88.84342877874248, 94.58797342988339, 92.38720473619748),\" +\n        \"              y=array(97.43395922838836, 109.5441846957560, 78.82698890096127, 96.67181538737611,95.52423701473863, 85.3391529394878, 87.01956497912255, 111.5289690656729,86.41034184809114, 84.11696923489203, 109.3874354244069, 102.3391063812790,109.0604436531823,102.7957014900897,114.4376483055848,107.4387578165579,106.2490201384653,103.4490197583837,93.8201540211101,101.6060721649409, 115.3512636715722,119.1046170610335,99.74910277836263,104.2116724112481, 86.02222520549304),\" +\n        \"              c=transpose(matrix(x, y)),\" +\n        \"              d=convexHull(c),\" +\n        \"              e=getVertices(d),\" +\n        \"              f=getArea(d),\" +\n        \"              g=getBoundarySize(d),\" +\n        \"              h=getBaryCenter(d),\" +\n        \"              i=projectToBorder(d, matrix(array(99.11076410926444, 109.5441846957560))))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> points = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertTrue(points.size() == 6);\n    List<Number> point1 = points.get(0);\n    assertEquals(point1.size(), 2);\n    assertEquals(point1.get(0).doubleValue(), 82.8015657665458, 0.0);\n    assertEquals(point1.get(1).doubleValue(), 119.1046170610335, 0.0);\n\n    List<Number> point2 = points.get(1);\n    assertEquals(point2.size(), 2);\n    assertEquals(point2.get(0).doubleValue(), 92.38720473619748, 0.0);\n    assertEquals(point2.get(1).doubleValue(), 86.02222520549304, 0.0);\n\n\n    List<Number> point3 = points.get(2);\n    assertEquals(point3.size(), 2);\n    assertEquals(point3.get(0).doubleValue(), 95.71563821370013, 0.0);\n    assertEquals(point3.get(1).doubleValue(), 78.82698890096127, 0.0);\n\n    List<Number> point4 = points.get(3);\n    assertEquals(point4.size(), 2);\n    assertEquals(point4.get(0).doubleValue(), 113.430677406492, 0.0);\n    assertEquals(point4.get(1).doubleValue(),  85.3391529394878, 0.0);\n\n\n    List<Number> point5 = points.get(4);\n    assertEquals(point5.size(), 2);\n    assertEquals(point5.get(0).doubleValue(), 119.6726096270366, 0.0);\n    assertEquals(point5.get(1).doubleValue(),  106.2490201384653, 0.0);\n\n\n    List<Number> point6 = points.get(5);\n    assertEquals(point6.size(), 2);\n    assertEquals(point6.get(0).doubleValue(), 106.5546761317927, 0.0);\n    assertEquals(point6.get(1).doubleValue(),  114.4376483055848, 0.0);\n\n\n    double area = tuples.get(0).getDouble(\"f\");\n    assertEquals(area, 911.6283603859929, 0.0);\n\n    double boundarySize = tuples.get(0).getDouble(\"g\");\n    assertEquals(boundarySize, 122.73784789223708, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> baryCenter = (List<Number>)tuples.get(0).get(\"h\");\n    assertEquals(baryCenter.size(), 2);\n    assertEquals(baryCenter.get(0).doubleValue(), 101.3021125450865, 0.0);\n    assertEquals(baryCenter.get(1).doubleValue(), 100.07343616615786, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> borderPoints = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(borderPoints.get(0).get(0).doubleValue(), 100.31316833934775, 0);\n    assertEquals(borderPoints.get(0).get(1).doubleValue(), 115.6639686234851, 0);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testConvexHull() throws Exception {\n    String expr = \"let(echo=true,\" +\n        \"              x=array(96.42894739701268, 99.11076410926444, 95.71563821370013,101.4356840561301, 96.17912865782684, 113.430677406492, 109.5927785287056, 87.26561260238425, 103.3122002816537, 100.4959815617706, 92.78972440872515, 92.98815024042877, 89.1448359089767, 104.9410622701036, 106.5546761317927, 102.0132643274808, 119.6726096270366, 97.61388415294184, 106.7928221374049, 94.31369945729962, 87.37098859879977, 82.8015657665458, 88.84342877874248, 94.58797342988339, 92.38720473619748),\" +\n        \"              y=array(97.43395922838836, 109.5441846957560, 78.82698890096127, 96.67181538737611,95.52423701473863, 85.3391529394878, 87.01956497912255, 111.5289690656729,86.41034184809114, 84.11696923489203, 109.3874354244069, 102.3391063812790,109.0604436531823,102.7957014900897,114.4376483055848,107.4387578165579,106.2490201384653,103.4490197583837,93.8201540211101,101.6060721649409, 115.3512636715722,119.1046170610335,99.74910277836263,104.2116724112481, 86.02222520549304),\" +\n        \"              c=transpose(matrix(x, y)),\" +\n        \"              d=convexHull(c),\" +\n        \"              e=getVertices(d),\" +\n        \"              f=getArea(d),\" +\n        \"              g=getBoundarySize(d),\" +\n        \"              h=getBaryCenter(d),\" +\n        \"              i=projectToBorder(d, matrix(array(99.11076410926444, 109.5441846957560))))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> points = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertTrue(points.size() == 6);\n    List<Number> point1 = points.get(0);\n    assertEquals(point1.size(), 2);\n    assertEquals(point1.get(0).doubleValue(), 82.8015657665458, 0.0);\n    assertEquals(point1.get(1).doubleValue(), 119.1046170610335, 0.0);\n\n    List<Number> point2 = points.get(1);\n    assertEquals(point2.size(), 2);\n    assertEquals(point2.get(0).doubleValue(), 92.38720473619748, 0.0);\n    assertEquals(point2.get(1).doubleValue(), 86.02222520549304, 0.0);\n\n\n    List<Number> point3 = points.get(2);\n    assertEquals(point3.size(), 2);\n    assertEquals(point3.get(0).doubleValue(), 95.71563821370013, 0.0);\n    assertEquals(point3.get(1).doubleValue(), 78.82698890096127, 0.0);\n\n    List<Number> point4 = points.get(3);\n    assertEquals(point4.size(), 2);\n    assertEquals(point4.get(0).doubleValue(), 113.430677406492, 0.0);\n    assertEquals(point4.get(1).doubleValue(),  85.3391529394878, 0.0);\n\n\n    List<Number> point5 = points.get(4);\n    assertEquals(point5.size(), 2);\n    assertEquals(point5.get(0).doubleValue(), 119.6726096270366, 0.0);\n    assertEquals(point5.get(1).doubleValue(),  106.2490201384653, 0.0);\n\n\n    List<Number> point6 = points.get(5);\n    assertEquals(point6.size(), 2);\n    assertEquals(point6.get(0).doubleValue(), 106.5546761317927, 0.0);\n    assertEquals(point6.get(1).doubleValue(),  114.4376483055848, 0.0);\n\n\n    double area = tuples.get(0).getDouble(\"f\");\n    assertEquals(area, 911.6283603859929, 0.0);\n\n    double boundarySize = tuples.get(0).getDouble(\"g\");\n    assertEquals(boundarySize, 122.73784789223708, 0.0);\n\n    List<Number> baryCenter = (List<Number>)tuples.get(0).get(\"h\");\n    assertEquals(baryCenter.size(), 2);\n    assertEquals(baryCenter.get(0).doubleValue(), 101.3021125450865, 0.0);\n    assertEquals(baryCenter.get(1).doubleValue(), 100.07343616615786, 0.0);\n\n    List<List<Number>> borderPoints = (List<List<Number>>)tuples.get(0).get(\"i\");\n    assertEquals(borderPoints.get(0).get(0).doubleValue(), 100.31316833934775, 0);\n    assertEquals(borderPoints.get(0).get(1).doubleValue(), 115.6639686234851, 0);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8a0046d48ba82dd982903a22d0d3768645bb8222"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ceedb6814a4bde25632b8b3d75d7e54e4af8a48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a0046d48ba82dd982903a22d0d3768645bb8222":["5ceedb6814a4bde25632b8b3d75d7e54e4af8a48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ceedb6814a4bde25632b8b3d75d7e54e4af8a48"],"5ceedb6814a4bde25632b8b3d75d7e54e4af8a48":["8a0046d48ba82dd982903a22d0d3768645bb8222"],"8a0046d48ba82dd982903a22d0d3768645bb8222":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}