{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","pathOld":"/dev/null","sourceNew":"    protected int startStandaloneSolr(String[] args) {\n\n      if (standaloneSolr != null) {\n        throw new IllegalStateException(\"Test is already running a standalone Solr instance \"+\n            standaloneSolr.getBaseUrl()+\"! This indicates a bug in the unit test logic.\");\n      }\n\n      if (solrCloudCluster != null) {\n        throw new IllegalStateException(\"Test is already running a mini SolrCloud cluster! \"+\n            \"This indicates a bug in the unit test logic.\");\n      }\n\n      int port = Integer.parseInt(getArg(\"-p\", args));\n\n      File solrHomeDir = new File(getArg(\"-s\", args));\n\n      System.setProperty(\"host\", \"localhost\");\n      System.setProperty(\"jetty.port\", String.valueOf(port));\n\n      standaloneSolr = new JettySolrRunner(solrHomeDir.getAbsolutePath(), \"/solr\", port);\n      Thread bg = new Thread() {\n        public void run() {\n          try {\n            standaloneSolr.start();\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n      bg.start();\n\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","sourceNew":"    protected int startStandaloneSolr(String[] args) {\n\n      if (standaloneSolr != null) {\n        throw new IllegalStateException(\"Test is already running a standalone Solr instance \"+\n            standaloneSolr.getBaseUrl()+\"! This indicates a bug in the unit test logic.\");\n      }\n\n      if (solrCloudCluster != null) {\n        throw new IllegalStateException(\"Test is already running a mini SolrCloud cluster! \"+\n            \"This indicates a bug in the unit test logic.\");\n      }\n\n      int port = Integer.parseInt(getArg(\"-p\", args));\n\n      File solrHomeDir = new File(getArg(\"-s\", args));\n\n      System.setProperty(\"host\", \"localhost\");\n      System.setProperty(\"jetty.port\", String.valueOf(port));\n      System.setProperty(\"solr.log.dir\", createTempDir(\"solr_logs\").toString());\n\n      standaloneSolr = new JettySolrRunner(solrHomeDir.getAbsolutePath(), \"/solr\", port);\n      Thread bg = new Thread() {\n        public void run() {\n          try {\n            standaloneSolr.start();\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n      bg.start();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int startStandaloneSolr(String[] args) {\n\n      if (standaloneSolr != null) {\n        throw new IllegalStateException(\"Test is already running a standalone Solr instance \"+\n            standaloneSolr.getBaseUrl()+\"! This indicates a bug in the unit test logic.\");\n      }\n\n      if (solrCloudCluster != null) {\n        throw new IllegalStateException(\"Test is already running a mini SolrCloud cluster! \"+\n            \"This indicates a bug in the unit test logic.\");\n      }\n\n      int port = Integer.parseInt(getArg(\"-p\", args));\n\n      File solrHomeDir = new File(getArg(\"-s\", args));\n\n      System.setProperty(\"host\", \"localhost\");\n      System.setProperty(\"jetty.port\", String.valueOf(port));\n\n      standaloneSolr = new JettySolrRunner(solrHomeDir.getAbsolutePath(), \"/solr\", port);\n      Thread bg = new Thread() {\n        public void run() {\n          try {\n            standaloneSolr.start();\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n      bg.start();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample.RunExampleExecutor#startStandaloneSolr(String[]).mjava","sourceNew":"    protected int startStandaloneSolr(String[] args) {\n\n      if (standaloneSolr != null) {\n        throw new IllegalStateException(\"Test is already running a standalone Solr instance \"+\n            standaloneSolr.getBaseUrl()+\"! This indicates a bug in the unit test logic.\");\n      }\n\n      if (solrCloudCluster != null) {\n        throw new IllegalStateException(\"Test is already running a mini SolrCloud cluster! \"+\n            \"This indicates a bug in the unit test logic.\");\n      }\n\n      int port = Integer.parseInt(getArg(\"-p\", args));\n\n      File solrHomeDir = new File(getArg(\"-s\", args));\n\n      System.setProperty(\"host\", \"localhost\");\n      System.setProperty(\"jetty.port\", String.valueOf(port));\n      System.setProperty(\"solr.log.dir\", createTempDir(\"solr_logs\").toString());\n\n      standaloneSolr = new JettySolrRunner(solrHomeDir.getAbsolutePath(), \"/solr\", port);\n      Thread bg = new Thread() {\n        public void run() {\n          try {\n            standaloneSolr.start();\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n      bg.start();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int startStandaloneSolr(String[] args) {\n\n      if (standaloneSolr != null) {\n        throw new IllegalStateException(\"Test is already running a standalone Solr instance \"+\n            standaloneSolr.getBaseUrl()+\"! This indicates a bug in the unit test logic.\");\n      }\n\n      if (solrCloudCluster != null) {\n        throw new IllegalStateException(\"Test is already running a mini SolrCloud cluster! \"+\n            \"This indicates a bug in the unit test logic.\");\n      }\n\n      int port = Integer.parseInt(getArg(\"-p\", args));\n\n      File solrHomeDir = new File(getArg(\"-s\", args));\n\n      System.setProperty(\"host\", \"localhost\");\n      System.setProperty(\"jetty.port\", String.valueOf(port));\n\n      standaloneSolr = new JettySolrRunner(solrHomeDir.getAbsolutePath(), \"/solr\", port);\n      Thread bg = new Thread() {\n        public void run() {\n          try {\n            standaloneSolr.start();\n          } catch (Exception e) {\n            if (e instanceof RuntimeException) {\n              throw (RuntimeException)e;\n            } else {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n      bg.start();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["4ca20be81c9284c840498143264e583ccbb8525a","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}