{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a6997833904932b5332aede01bfd0f7ce4df318","date":1327398621,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      charsRead = input.read(chars);\n      if (charsRead < 0) {\n        charsRead = inLen = 0;\n        return false;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      charsRead = input.read(chars);\n      if (charsRead < 0) {\n        charsRead = inLen = 0;\n        return false;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      charsRead = input.read(chars);\n      if (charsRead < 0) {\n        charsRead = inLen = 0;\n        return false;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46b5eed1428b2cecc6851b67142702486279f89","date":1332284557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      charsRead = input.read(chars);\n      if (charsRead < 0) {\n        charsRead = inLen = 0;\n        return false;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c983d9f75169f8df08cc7d8006298cddc144075","date":1332524353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        final int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n\n      if (charsRead == chars.length) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        final int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n\n      if (charsRead == chars.length) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        final int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n\n      if (charsRead == chars.length) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8c983d9f75169f8df08cc7d8006298cddc144075"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a7347509fad0711ac30cb15a746e9a3830a38ebd","1a6997833904932b5332aede01bfd0f7ce4df318"],"1a6997833904932b5332aede01bfd0f7ce4df318":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","1a6997833904932b5332aede01bfd0f7ce4df318"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c46b5eed1428b2cecc6851b67142702486279f89":["1a6997833904932b5332aede01bfd0f7ce4df318"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c983d9f75169f8df08cc7d8006298cddc144075":["c46b5eed1428b2cecc6851b67142702486279f89"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"1a6997833904932b5332aede01bfd0f7ce4df318":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c46b5eed1428b2cecc6851b67142702486279f89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"c46b5eed1428b2cecc6851b67142702486279f89":["8c983d9f75169f8df08cc7d8006298cddc144075"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0d22ac6a4146774c1bc8400160fc0b6150294e92","1a6997833904932b5332aede01bfd0f7ce4df318","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"8c983d9f75169f8df08cc7d8006298cddc144075":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}