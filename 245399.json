{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) {}\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":["669ab70ac675a9fdd757b28a1a6ca63f667c7188"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) {}\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) {}\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   * \n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new Collector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n      \n      @Override\n      public void setScorer(Scorer scorer) {}\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public void setNextReader(AtomicReaderContext context) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return acceptDocsOutOfOrder;\n      }\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7","date":1421315622,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"ae73da626f97850c922c42736f808d0378e165f0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}