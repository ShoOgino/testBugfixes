{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}