{"path":"lucene/src/java/org/apache/lucene/store/DataInput#clone().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/DataInput#clone().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    DataInput clone = null;\n    try {\n      clone = (DataInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff","date":1272998298,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/DataInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/DataInput#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    DataInput clone = null;\n    try {\n      clone = (DataInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    DataInput clone = null;\n    try {\n      clone = (DataInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/DataInput#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    DataInput clone = null;\n    try {\n      clone = (DataInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    DataInput clone = null;\n    try {\n      clone = (DataInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb1790f2ff69d84e1b1f3ebda4ebc93ba82b7eff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}