{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(Version,String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","sourceOld":"  public void init(Version matchVersion, String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(Version,String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","sourceOld":"  public void init(Version matchVersion, String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n    // TODO in 8.0(?) remove this.  Prior to 7.2 we defaulted to allowing sub-query parsing by default\n    if (!parser.getReq().getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0)) {\n      setAllowSubQueryParsing(true);\n    } // otherwise defaults to false\n  }\n\n","sourceOld":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","bugFix":null,"bugIntro":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n    // TODO in 8.0(?) remove this.  Prior to 7.2 we defaulted to allowing sub-query parsing by default\n    if (!parser.getReq().getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0)) {\n      setAllowSubQueryParsing(true);\n    } // otherwise defaults to false\n  }\n\n","sourceOld":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n    // TODO in 8.0(?) remove this.  Prior to 7.2 we defaulted to allowing sub-query parsing by default\n    /*\n    if (!parser.getReq().getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0)) {\n      setAllowSubQueryParsing(true);\n    } // otherwise defaults to false\n     */\n  }\n\n","sourceOld":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n    // TODO in 8.0(?) remove this.  Prior to 7.2 we defaulted to allowing sub-query parsing by default\n    if (!parser.getReq().getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0)) {\n      setAllowSubQueryParsing(true);\n    } // otherwise defaults to false\n  }\n\n","bugFix":null,"bugIntro":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a33f2146a1bb5ab36a02a7fd15ade021142ea88","date":1595253088,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#init(String,QParser).mjava","sourceNew":"  public void init(String defaultField, QParser parser) {\n    if ((parser == null) || (parser.getReq() == null) || (parser.getReq().getSchema() == null)) {\n      throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                      \"query parser is null or invalid\");\n    }\n    if ((defaultField != null) && (defaultField.isEmpty())) {\n      throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                      \"default field name is empty\");\n    }\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n  }\n\n","sourceOld":"  public void init(String defaultField, QParser parser) {\n    this.schema = parser.getReq().getSchema();\n    this.parser = parser;\n    this.flags = parser.getFlags();\n    this.defaultField = defaultField;\n    setAnalyzer(schema.getQueryAnalyzer());\n    // TODO in 8.0(?) remove this.  Prior to 7.2 we defaulted to allowing sub-query parsing by default\n    /*\n    if (!parser.getReq().getCore().getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_7_2_0)) {\n      setAllowSubQueryParsing(true);\n    } // otherwise defaults to false\n     */\n  }\n\n","bugFix":["a91f19e3f7576973404e13b7ecfb8ae94f313921","d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["e55782fb51a6e9789542818eb2161a3247f39ace","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["4aee4980038a10791618ea04e79233ce5cbf6607"]},"commit2Childs":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"4aee4980038a10791618ea04e79233ce5cbf6607":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03778630c4604270d88c148afb8c7de35b51d3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}