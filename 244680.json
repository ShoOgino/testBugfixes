{"path":"backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"/dev/null","sourceNew":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          TestCase.fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        TestCase.fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) TestCase.fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          TestCase.fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        TestCase.fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) TestCase.fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final Random rnd = newRandom();\n\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(rnd.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      for (int i=0; i<50; i++) {\n        int lev = rnd.nextInt(maxLev);\n        final long seed = rnd.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(q1,s);\n          QueryUtils.check(q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          TestCase.fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              if (Math.abs(otherScore-score)>1.0e-6f) {\n                        TestCase.fail(\"Doc \" + id + \" scores don't match\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n              }\n            }\n          }\n\n          // check if subset\n          if (!found) TestCase.fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}