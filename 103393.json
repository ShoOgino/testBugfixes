{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#termsFilter(boolean,Collection[Term]).mjava","commits":[{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#termsFilter(boolean,Collection[Term]).mjava","pathOld":"/dev/null","sourceNew":"  private TermsFilter termsFilter(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsFilter(new ArrayList<Term>(termList));\n    }\n    final TermsFilter filter;\n    List<BytesRef> bytes = new ArrayList<BytesRef>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsFilter(field, bytes);\n    return filter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#termsFilter(boolean,Collection[Term]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#termsFilter(boolean,Collection[Term]).mjava","sourceNew":"  private TermsFilter termsFilter(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsFilter(new ArrayList<>(termList));\n    }\n    final TermsFilter filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsFilter(field, bytes);\n    return filter;\n  }\n\n","sourceOld":"  private TermsFilter termsFilter(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsFilter(new ArrayList<Term>(termList));\n    }\n    final TermsFilter filter;\n    List<BytesRef> bytes = new ArrayList<BytesRef>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsFilter(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#termsQuery(boolean,Collection[Term]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#termsFilter(boolean,Collection[Term]).mjava","sourceNew":"  private TermsQuery termsQuery(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsQuery(new ArrayList<>(termList));\n    }\n    final TermsQuery filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsQuery(field, bytes);\n    return filter;\n  }\n\n","sourceOld":"  private TermsFilter termsFilter(boolean singleField, Collection<Term> termList) {\n    if (!singleField) {\n      return new TermsFilter(new ArrayList<>(termList));\n    }\n    final TermsFilter filter;\n    List<BytesRef> bytes = new ArrayList<>();\n    String field = null;\n    for (Term term : termList) {\n        bytes.add(term.bytes());\n        if (field != null) {\n          assertEquals(term.field(), field);\n        }\n        field = term.field();\n    }\n    assertNotNull(field);\n    filter = new TermsFilter(field, bytes);\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}