{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#wait(long,String,ZkStateReader).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#wait(long,String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * You can call this method to wait while the ChaosMonkey is running, it waits approximately the specified time, and periodically\n   * logs the status of the collection\n   * @param runLength The time in ms to wait\n   * @param collectionName The main collection being used for the ChaosMonkey\n   * @param zkStateReader current state reader\n   */\n  public static void wait(long runLength, String collectionName, ZkStateReader zkStateReader) throws InterruptedException {\n    TimeOut t = new TimeOut(runLength, TimeUnit.MILLISECONDS);\n    while (!t.hasTimedOut()) {\n      Thread.sleep(Math.min(1000, t.timeLeft(TimeUnit.MILLISECONDS)));\n      logCollectionStateSummary(collectionName, zkStateReader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#wait(long,String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * You can call this method to wait while the ChaosMonkey is running, it waits approximately the specified time, and periodically\n   * logs the status of the collection\n   * @param runLength The time in ms to wait\n   * @param collectionName The main collection being used for the ChaosMonkey\n   * @param zkStateReader current state reader\n   */\n  public static void wait(long runLength, String collectionName, ZkStateReader zkStateReader) throws InterruptedException {\n    TimeOut t = new TimeOut(runLength, TimeUnit.MILLISECONDS);\n    while (!t.hasTimedOut()) {\n      Thread.sleep(Math.min(1000, t.timeLeft(TimeUnit.MILLISECONDS)));\n      logCollectionStateSummary(collectionName, zkStateReader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#wait(long,String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#wait(long,String,ZkStateReader).mjava","sourceNew":"  /**\n   * You can call this method to wait while the ChaosMonkey is running, it waits approximately the specified time, and periodically\n   * logs the status of the collection\n   * @param runLength The time in ms to wait\n   * @param collectionName The main collection being used for the ChaosMonkey\n   * @param zkStateReader current state reader\n   */\n  public static void wait(long runLength, String collectionName, ZkStateReader zkStateReader) throws InterruptedException {\n    TimeOut t = new TimeOut(runLength, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      Thread.sleep(Math.min(1000, t.timeLeft(TimeUnit.MILLISECONDS)));\n      logCollectionStateSummary(collectionName, zkStateReader);\n    }\n  }\n\n","sourceOld":"  /**\n   * You can call this method to wait while the ChaosMonkey is running, it waits approximately the specified time, and periodically\n   * logs the status of the collection\n   * @param runLength The time in ms to wait\n   * @param collectionName The main collection being used for the ChaosMonkey\n   * @param zkStateReader current state reader\n   */\n  public static void wait(long runLength, String collectionName, ZkStateReader zkStateReader) throws InterruptedException {\n    TimeOut t = new TimeOut(runLength, TimeUnit.MILLISECONDS);\n    while (!t.hasTimedOut()) {\n      Thread.sleep(Math.min(1000, t.timeLeft(TimeUnit.MILLISECONDS)));\n      logCollectionStateSummary(collectionName, zkStateReader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}