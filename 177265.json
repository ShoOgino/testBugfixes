{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","sourceNew":"  @Override\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    String q = getQuery();\n    initQuery(context.replaceTokens(q));\n    if (rowIterator == null)\n      return rows;\n    while (rowIterator.hasNext()) {\n      Map<String, Object> arow = rowIterator.next();\n      if (arow == null) {\n        break;\n      } else {\n        rows.add(arow);\n      }\n    }\n    return rows;\n  }\n\n","sourceOld":"  @Override\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    String q = getQuery();\n    initQuery(context.replaceTokens(q));\n    if (rowIterator == null)\n      return rows;\n    while (rowIterator.hasNext()) {\n      Map<String, Object> arow = rowIterator.next();\n      if (arow == null) {\n        break;\n      } else {\n        rows.add(arow);\n      }\n    }\n    return rows;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","sourceNew":"  @Override\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    String q = getQuery();\n    initQuery(context.replaceTokens(q));\n    if (rowIterator == null)\n      return rows;\n    while (rowIterator.hasNext()) {\n      Map<String, Object> arow = rowIterator.next();\n      if (arow == null) {\n        break;\n      } else {\n        rows.add(arow);\n      }\n    }\n    return rows;\n  }\n\n","sourceOld":"  @Override\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    String q = getQuery();\n    initQuery(context.replaceTokens(q));\n    if (rowIterator == null)\n      return rows;\n    while (rowIterator.hasNext()) {\n      Map<String, Object> arow = rowIterator.next();\n      if (arow == null) {\n        break;\n      } else {\n        rows.add(arow);\n      }\n    }\n    return rows;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/CachedSqlEntityProcessor#getAllNonCachedRows().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected List<Map<String, Object>> getAllNonCachedRows() {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    String q = getQuery();\n    initQuery(context.replaceTokens(q));\n    if (rowIterator == null)\n      return rows;\n    while (rowIterator.hasNext()) {\n      Map<String, Object> arow = rowIterator.next();\n      if (arow == null) {\n        break;\n      } else {\n        rows.add(arow);\n      }\n    }\n    return rows;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3337b86edd36607f0208321f1deee79c55e5fd21":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3337b86edd36607f0208321f1deee79c55e5fd21"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3337b86edd36607f0208321f1deee79c55e5fd21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"3337b86edd36607f0208321f1deee79c55e5fd21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}