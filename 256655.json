{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","commits":[{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name()))  {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name()))  {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.cells) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.name;\n            if (cell.name.equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.val);\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":"  private void handleDiagnostics(SolrQueryResponse rsp, AutoScalingConfig autoScalingConf) throws IOException {\n    Policy policy = autoScalingConf.getPolicy();\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleDiagnostics(SolrQueryResponse,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void handleDiagnostics(SolrQueryResponse rsp, Map<String, Object> autoScalingConf) throws IOException {\n    Policy policy = new Policy(autoScalingConf);\n    try (CloudSolrClient build = new CloudSolrClient.Builder()\n        .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n        .withZkHost(container.getZkController().getZkServerAddress()).build()) {\n      Policy.Session session = policy.createSession(new SolrClientDataProvider(build));\n      List<Row> sorted = session.getSorted();\n      List<Clause.Violation> violations = session.getViolations();\n\n      List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n      List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n      for (Row row : sorted) {\n        Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n        for (Cell cell : row.getCells()) {\n          for (Preference clusterPreference : clusterPreferences) {\n            Policy.SortParam name = clusterPreference.getName();\n            if (cell.getName().equalsIgnoreCase(name.name())) {\n              map.put(name.name(), cell.getValue());\n              break;\n            }\n          }\n        }\n        sortedNodes.add(map);\n      }\n\n      Map<String, Object> map = new HashMap<>(2);\n      map.put(\"sortedNodes\", sortedNodes);\n\n      map.put(\"violations\", violations);\n      rsp.getValues().add(\"diagnostics\", map);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["09d06843c166c033fc611df4ce71e33731bc1ad1","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09d06843c166c033fc611df4ce71e33731bc1ad1","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}