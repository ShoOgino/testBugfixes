{"path":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","a0ae5e3ed1232483b7b8a014f175a5fe43595982","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}