{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#init(IndexOutput).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#init(IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#start(IndexOutput).mjava","sourceNew":"  @Override\n  public void init(IndexOutput termsOut) throws IOException {\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","sourceOld":"  @Override\n  public void start(IndexOutput termsOut) throws IOException {\n    this.termsOut = termsOut;\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#init(IndexOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#start(IndexOutput).mjava","sourceNew":"  @Override\n  public void init(IndexOutput termsOut) throws IOException {\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","sourceOld":"  @Override\n  public void start(IndexOutput termsOut) throws IOException {\n    this.termsOut = termsOut;\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#init(IndexOutput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(IndexOutput termsOut) throws IOException {\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#init(IndexOutput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(IndexOutput termsOut) throws IOException {\n    CodecUtil.writeHeader(termsOut, CODEC, VERSION_CURRENT);\n    // TODO: -- just ask skipper to \"start\" here\n    termsOut.writeInt(skipInterval);                // write skipInterval\n    termsOut.writeInt(maxSkipLevels);               // write maxSkipLevels\n    termsOut.writeInt(skipMinimum);                 // write skipMinimum\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}