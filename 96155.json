{"path":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","commits":[{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"legacyCloud\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3l, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2l, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","sourceNew":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"legacyCloud\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","sourceOld":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"legacyCloud\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3l, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2l, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","sourceNew":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"autoAddReplicas\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","sourceOld":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"legacyCloud\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","bugFix":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"autoAddReplicas\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","sourceOld":"  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"autoAddReplicas\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testMergeJson().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testMergeJson() {\n    Map<String, Object> sink = (Map<String, Object>) Utils.fromJSONString(\"{k2:v2, k1: {a:b, p:r, k21:{xx:yy}}}\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"k1:{a:c, e:f, p :null, k11:{a1:b1}, k21:{pp : qq}}\")));\n\n    assertEquals(\"v2\", Utils.getObjectByPath(sink, true, \"k2\"));\n    assertEquals(\"c\", Utils.getObjectByPath(sink, true, \"k1/a\"));\n    assertEquals(\"yy\", Utils.getObjectByPath(sink, true, \"k1/k21/xx\"));\n    assertEquals(\"qq\", Utils.getObjectByPath(sink, true, \"k1/k21/pp\"));\n    assertEquals(\"f\", Utils.getObjectByPath(sink, true, \"k1/e\"));\n    assertEquals(\"b1\", Utils.getObjectByPath(sink, true, \"k1/k11/a1\"));\n\n    sink = new HashMap<>();\n    sink.put(\"autoAddReplicas\", \"false\");\n    assertTrue(Utils.mergeJson(sink, (Map<String, Object>) Utils.fromJSONString(\"collectionDefaults:{numShards:3 , nrtReplicas:2}\")));\n    assertEquals(3L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP)));\n    assertEquals(2L, Utils.getObjectByPath(sink, true, ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"3f504512a03d978990cbff30db0522b354e846db":["e98520789adb1d5ad05afb4956eca0944a929688"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e98520789adb1d5ad05afb4956eca0944a929688":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e98520789adb1d5ad05afb4956eca0944a929688"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"e98520789adb1d5ad05afb4956eca0944a929688":["3f504512a03d978990cbff30db0522b354e846db"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}