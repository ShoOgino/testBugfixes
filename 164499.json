{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState).mjava","pathOld":"/dev/null","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (state.index.isLeafNode()) {\n      //System.out.println(\"ADDALL\");\n      if (state.index.nodeExists()) {\n        visitDocIDs(state.in, state.index.getLeafBlockFP(), state.visitor);\n      }\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      state.index.pushLeft();\n      addAll(state);\n      state.index.pop();\n\n      state.index.pushRight();\n      addAll(state);\n      state.index.pop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState).mjava","pathOld":"/dev/null","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (state.index.isLeafNode()) {\n      //System.out.println(\"ADDALL\");\n      if (state.index.nodeExists()) {\n        visitDocIDs(state.in, state.index.getLeafBlockFP(), state.visitor);\n      }\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      state.index.pushLeft();\n      addAll(state);\n      state.index.pop();\n\n      state.index.pushRight();\n      addAll(state);\n      state.index.pop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d31002d4824498d05fb6c4676a515b1fef8f41ce","date":1486389627,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, boolean grown) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (grown == false) {\n      final long maxPointCount = (long) maxPointsInLeafNode * state.index.getNumLeaves();\n      if (maxPointCount <= Integer.MAX_VALUE) { // could be >MAX_VALUE if there are more than 2B points in total\n        state.visitor.grow((int) maxPointCount);\n        grown = true;\n      }\n    }\n\n    if (state.index.isLeafNode()) {\n      assert grown;\n      //System.out.println(\"ADDALL\");\n      if (state.index.nodeExists()) {\n        visitDocIDs(state.in, state.index.getLeafBlockFP(), state.visitor);\n      }\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      state.index.pushLeft();\n      addAll(state, grown);\n      state.index.pop();\n\n      state.index.pushRight();\n      addAll(state, grown);\n      state.index.pop();\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (state.index.isLeafNode()) {\n      //System.out.println(\"ADDALL\");\n      if (state.index.nodeExists()) {\n        visitDocIDs(state.in, state.index.getLeafBlockFP(), state.visitor);\n      }\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      state.index.pushLeft();\n      addAll(state);\n      state.index.pop();\n\n      state.index.pushRight();\n      addAll(state);\n      state.index.pop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d31002d4824498d05fb6c4676a515b1fef8f41ce":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d31002d4824498d05fb6c4676a515b1fef8f41ce"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["d31002d4824498d05fb6c4676a515b1fef8f41ce","9856095f7afb5a607bf5e65077615ed91273508c"],"d31002d4824498d05fb6c4676a515b1fef8f41ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}