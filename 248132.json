{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","commits":[{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"/dev/null","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\");\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d59a6c58646fd3b86812575df8c76d712478ee03"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d59a6c58646fd3b86812575df8c76d712478ee03","date":1343505452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\");\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"/dev/null","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"/dev/null","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = _TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      _TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rm(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), IOUtils.CHARSET_UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), IOUtils.CHARSET_UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), IOUtils.CHARSET_UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rm(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rm(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = TestUtil.getTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rmDir(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final File base = createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      TestUtil.rm(base);\n    }\n  }\n\n","bugFix":["5eb2511ababf862ea11e10761c70ee560cd84510"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    try {\n      Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final File base = createTempDir(\"fsResourceLoaderBase\").getAbsoluteFile();\n    try {\n      base.mkdirs();\n      Writer os = new OutputStreamWriter(new FileOutputStream(new File(base, \"template.txt\")), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = new File(base, \"template.txt\").toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n      \n      // now use RL without base dir:\n      rl = new FilesystemResourceLoader();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(new File(base, \"template.txt\").toString()), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    try {\n      Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    try {\n      Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    try {\n      Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    try {\n      Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n      try {\n        os.write(\"foobar\\n\");\n      } finally {\n        IOUtils.closeWhileHandlingException(os);\n      }\n      \n      ResourceLoader rl = new FilesystemResourceLoader(base);\n      assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n      // Same with full path name:\n      String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n      assertEquals(\"foobar\",\n          WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n      assertClasspathDelegation(rl);\n      assertNotFound(rl);\n    } finally {\n      IOUtils.rm(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#testBaseDir().mjava","sourceNew":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","sourceOld":"  public void testBaseDir() throws Exception {\n    final Path base = createTempDir(\"fsResourceLoaderBase\");\n    Writer os = Files.newBufferedWriter(base.resolve(\"template.txt\"), StandardCharsets.UTF_8);\n    try {\n      os.write(\"foobar\\n\");\n    } finally {\n      IOUtils.closeWhileHandlingException(os);\n    }\n      \n    ResourceLoader rl = new FilesystemResourceLoader(base);\n    assertEquals(\"foobar\", WordlistLoader.getLines(rl.openResource(\"template.txt\"), StandardCharsets.UTF_8).get(0));\n    // Same with full path name:\n    String fullPath = base.resolve(\"template.txt\").toAbsolutePath().toString();\n    assertEquals(\"foobar\",\n                 WordlistLoader.getLines(rl.openResource(fullPath), StandardCharsets.UTF_8).get(0));\n    assertClasspathDelegation(rl);\n    assertNotFound(rl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d0d579490a72f2e6297eaa648940611234c57cf1","7d89d7e4e5101347833eea558851bf4209218619"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5a207d19eac354d649c3f0e2cce070017c78125e"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7d89d7e4e5101347833eea558851bf4209218619","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d59a6c58646fd3b86812575df8c76d712478ee03"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"7d89d7e4e5101347833eea558851bf4209218619":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d59a6c58646fd3b86812575df8c76d712478ee03"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d59a6c58646fd3b86812575df8c76d712478ee03":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d59a6c58646fd3b86812575df8c76d712478ee03"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7d89d7e4e5101347833eea558851bf4209218619","d0d579490a72f2e6297eaa648940611234c57cf1"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["5eb2511ababf862ea11e10761c70ee560cd84510"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f4abec28b874149a7223e32cc7a01704c27790de":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","b470f36a9372c97283360b1304eacbde22df6c0d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","e456307e9593d8518ec97cd724d8a7d3a109297b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d59a6c58646fd3b86812575df8c76d712478ee03":["6613659748fe4411a7dcf85266e55db1f95f7315","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["d59a6c58646fd3b86812575df8c76d712478ee03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}