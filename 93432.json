{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeout) {\n    long start = System.currentTimeMillis();\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (System.currentTimeMillis() > start + timeout) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        throw new RuntimeException(\"Time out waiting for ZooKeeper shutdown!\");\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        break;\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    return false;\n  }\n\n","bugFix":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n\n      if (timeout.hasTimedOut()) {\n        throw new RuntimeException(\"Time out waiting for ZooKeeper shutdown!\");\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n      \n      if (timeout.hasTimedOut()) {\n        throw new RuntimeException(\"Time out waiting for ZooKeeper shutdown!\");\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#waitForServerDown(String,long).mjava","sourceNew":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    log.info(\"waitForServerDown: {}\", hp);\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n\n      if (timeout.hasTimedOut()) {\n        throw new RuntimeException(\"Time out waiting for ZooKeeper shutdown!\");\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n  }\n\n","sourceOld":"  public static boolean waitForServerDown(String hp, long timeoutMs) {\n    final TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      try {\n        HostPort hpobj = parseHostPortList(hp).get(0);\n        send4LetterWord(hpobj.host, hpobj.port, \"stat\");\n      } catch (IOException e) {\n        return true;\n      }\n\n      if (timeout.hasTimedOut()) {\n        throw new RuntimeException(\"Time out waiting for ZooKeeper shutdown!\");\n      }\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"b06f42faae0ab79dde1a569756990bb96283580d":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b06f42faae0ab79dde1a569756990bb96283580d"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}