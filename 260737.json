{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#randomCopy(BitSet,int).mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#randomCopy(BitSet,int).mjava","pathOld":"/dev/null","sourceNew":"  private DocIdSet randomCopy(BitSet set, int numBits) throws IOException {\n    if (random().nextBoolean()) {\n      return new BitDocIdSet(copyOf(set, numBits), set.cardinality());\n    } else if (random().nextBoolean()) {\n      final RoaringDocIdSet.Builder builder = new RoaringDocIdSet.Builder(numBits);\n      for (int i = set.nextSetBit(0); i != DocIdSetIterator.NO_MORE_DOCS; i = i + 1 >= numBits ? DocIdSetIterator.NO_MORE_DOCS : set.nextSetBit(i + 1)) {\n        builder.add(i);\n      }\n      return builder.build();\n    } else {\n      return new BitDocIdSet(set, set.cardinality());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#randomCopy(BitSet,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#randomCopy(BitSet,int).mjava","sourceNew":"  private DocIdSet randomCopy(BitSet set, int numBits) throws IOException {\n    switch (random().nextInt(5)) {\n      case 0:\n        return new BitDocIdSet(set, set.cardinality());\n      case 1:\n        return new BitDocIdSet(copyOf(set, numBits), set.cardinality());\n      case 2:\n        final RoaringDocIdSet.Builder builder = new RoaringDocIdSet.Builder(numBits);\n        for (int i = set.nextSetBit(0); i != DocIdSetIterator.NO_MORE_DOCS; i = i + 1 >= numBits ? DocIdSetIterator.NO_MORE_DOCS : set.nextSetBit(i + 1)) {\n          builder.add(i);\n        }\n        return builder.build();\n      case 3:\n        FixedBitSet fbs = new FixedBitSet(numBits);\n        fbs.or(new BitSetIterator(set, 0));\n        return new BitDocIdSet(fbs);\n      case 4:\n        SparseFixedBitSet sfbs = new SparseFixedBitSet(numBits);\n        sfbs.or(new BitSetIterator(set, 0));\n        return new BitDocIdSet(sfbs);\n      default:\n        fail();\n        return null;\n    }\n  }\n\n","sourceOld":"  private DocIdSet randomCopy(BitSet set, int numBits) throws IOException {\n    if (random().nextBoolean()) {\n      return new BitDocIdSet(copyOf(set, numBits), set.cardinality());\n    } else if (random().nextBoolean()) {\n      final RoaringDocIdSet.Builder builder = new RoaringDocIdSet.Builder(numBits);\n      for (int i = set.nextSetBit(0); i != DocIdSetIterator.NO_MORE_DOCS; i = i + 1 >= numBits ? DocIdSetIterator.NO_MORE_DOCS : set.nextSetBit(i + 1)) {\n        builder.add(i);\n      }\n      return builder.build();\n    } else {\n      return new BitDocIdSet(set, set.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"]},"commit2Childs":{"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}