{"path":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","commits":[{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        Version.LUCENE_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        Version.LUCENE_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["966b079690131e434b39530d82cc413f5aff4cd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["966b079690131e434b39530d82cc413f5aff4cd5"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}