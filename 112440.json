{"path":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  public void init(PluginInfo info) {\n    List<UpdateRequestProcessorFactory> list = solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null);\n    if(list.isEmpty()){\n      throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n    }\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9618ead92419811e6b28aab7ba2f587a1fd17638","date":1376515395,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib \n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list.toArray(new UpdateRequestProcessorFactory[list.size()]); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89ae495191648c27a6ed94d2ace7e34b763a535c","date":1476855250,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.info(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.info(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = createProcessors(info);\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = new ArrayList<>\n      (solrCore.initPlugins(info.getChildren(\"processor\"),UpdateRequestProcessorFactory.class,null));\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating {}\", infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = createProcessors(info);\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into {}\", infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating \" + infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = createProcessors(info);\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into \" + infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#init(PluginInfo).mjava","sourceNew":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating {}\", infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = createProcessors(info);\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into {}\", infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","sourceOld":"  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but\n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n  @Override\n  public void init(PluginInfo info) {\n    final String infomsg = \"updateRequestProcessorChain \\\"\" + \n      (null != info.name ? info.name : \"\") + \"\\\"\" + \n      (info.isDefault() ? \" (default)\" : \"\");\n\n    log.debug(\"creating {}\", infomsg);\n\n    // wrap in an ArrayList so we know we know we can do fast index lookups \n    // and that add(int,Object) is supported\n    List<UpdateRequestProcessorFactory> list = createProcessors(info);\n\n    if(list.isEmpty()){\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" require at least one processor\");\n    }\n\n    int numDistrib = 0;\n    int runIndex = -1;\n    // hi->lo incase multiple run instances, add before first one\n    // (no idea why someone might use multiple run instances, but just in case)\n    for (int i = list.size()-1; 0 <= i; i--) {\n      UpdateRequestProcessorFactory factory = list.get(i);\n      if (factory instanceof DistributingUpdateProcessorFactory) {\n        numDistrib++;\n      }\n      if (factory instanceof RunUpdateProcessorFactory) {\n        runIndex = i;\n      }\n    }\n    if (1 < numDistrib) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              infomsg + \" may not contain more then one \" +\n                              \"instance of DistributingUpdateProcessorFactory\");\n    }\n    if (0 <= runIndex && 0 == numDistrib) {\n      // by default, add distrib processor immediately before run\n      DistributedUpdateProcessorFactory distrib\n        = new DistributedUpdateProcessorFactory();\n      distrib.init(new NamedList());\n      list.add(runIndex, distrib);\n\n      log.debug(\"inserting DistributedUpdateProcessorFactory into {}\", infomsg);\n    }\n\n    chain = list;\n    ProcessorInfo processorInfo = new ProcessorInfo(new MapSolrParams(info.attributes));\n    if (processorInfo.isEmpty()) return;\n    UpdateRequestProcessorChain newChain = constructChain(this, processorInfo, solrCore);\n    chain = newChain.chain;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["9618ead92419811e6b28aab7ba2f587a1fd17638"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e2fe35ac47f8f51356d6c1724455d18f31c94fae","7530de27b87b961b51f01bd1299b7004d46e8823"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["7530de27b87b961b51f01bd1299b7004d46e8823","9618ead92419811e6b28aab7ba2f587a1fd17638"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","89ae495191648c27a6ed94d2ace7e34b763a535c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9618ead92419811e6b28aab7ba2f587a1fd17638","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["89ae495191648c27a6ed94d2ace7e34b763a535c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"9618ead92419811e6b28aab7ba2f587a1fd17638":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89ae495191648c27a6ed94d2ace7e34b763a535c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["0d62172dd2fc1195c7e475550ac394a9948a18ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"740d649f013f07efbeb73ca854f106c60166e7c0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["740d649f013f07efbeb73ca854f106c60166e7c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["89ae495191648c27a6ed94d2ace7e34b763a535c"],"9618ead92419811e6b28aab7ba2f587a1fd17638":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"89ae495191648c27a6ed94d2ace7e34b763a535c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","954ae83b7dfacaa33d48ea056448ae11f7745a93"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","9618ead92419811e6b28aab7ba2f587a1fd17638"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}