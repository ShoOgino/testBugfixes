{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","commits":[{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67210e010ad52ccb1eee189c5395a5123b977c3c","date":1371026067,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed());\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8ee441d3e61e4669e10566a8d028a41333642b7","date":1371579547,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed());\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed());\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11fc0d9dddf2e34456c930d0d88660ace84655b","date":1371591334,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed());\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed());\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingLongBuffer\n    AppendingLongBuffer buf = new AppendingLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (_TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(_TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? _TestUtil.nextInt(random(), 0, 63) : _TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, _TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(_TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageEstimator.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    PackedLongValues.Builder buf = PackedLongValues.deltaPackedBuilder(random().nextFloat());\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    final LongValues values = buf.build();\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, values.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(values.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    AppendingDeltaPackedLongBuffer buf = new AppendingDeltaPackedLongBuffer();\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, buf.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(buf.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPagedGrowableWriter().mjava","sourceNew":"  public void testPagedGrowableWriter() {\n    Random random = random();\n    int pageSize = 1 << (TestUtil.nextInt(random, 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random, 1, 64), random.nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    PackedLongValues.Builder buf = PackedLongValues.deltaPackedBuilder(random.nextFloat());\n    int size = TEST_NIGHTLY ? random.nextInt(1000000) : random.nextInt(100000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random, 0, max));\n      if (rarely(random)) {\n        max = PackedInts.maxValue(rarely(random) ? TestUtil.nextInt(random, 0, 63) : TestUtil.nextInt(random, 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random, 1, 64), random.nextFloat());\n    assertEquals(size, writer.size());\n    final LongValues values = buf.build();\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, values.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(values.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random, writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random, writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testPagedGrowableWriter() {\n    int pageSize = 1 << (TestUtil.nextInt(random(), 6, 30));\n    // supports 0 values?\n    PagedGrowableWriter writer = new PagedGrowableWriter(0, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(0, writer.size());\n\n    // compare against AppendingDeltaPackedLongBuffer\n    PackedLongValues.Builder buf = PackedLongValues.deltaPackedBuilder(random().nextFloat());\n    int size = random().nextInt(1000000);\n    long max = 5;\n    for (int i = 0; i < size; ++i) {\n      buf.add(TestUtil.nextLong(random(), 0, max));\n      if (rarely()) {\n        max = PackedInts.maxValue(rarely() ? TestUtil.nextInt(random(), 0, 63) : TestUtil.nextInt(random(), 0, 31));\n      }\n    }\n    writer = new PagedGrowableWriter(size, pageSize, TestUtil.nextInt(random(), 1, 64), random().nextFloat());\n    assertEquals(size, writer.size());\n    final LongValues values = buf.build();\n    for (int i = size - 1; i >= 0; --i) {\n      writer.set(i, values.get(i));\n    }\n    for (int i = 0; i < size; ++i) {\n      assertEquals(values.get(i), writer.get(i));\n    }\n\n    // test ramBytesUsed\n    assertEquals(RamUsageTester.sizeOf(writer), writer.ramBytesUsed(), 8);\n\n    // test copy\n    PagedGrowableWriter copy = writer.resize(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < copy.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), copy.get(i));\n      } else {\n        assertEquals(0, copy.get(i));\n      }\n    }\n\n    // test grow\n    PagedGrowableWriter grow = writer.grow(TestUtil.nextLong(random(), writer.size() / 2, writer.size() * 3 / 2));\n    for (long i = 0; i < grow.size(); ++i) {\n      if (i < writer.size()) {\n        assertEquals(writer.get(i), grow.get(i));\n      } else {\n        assertEquals(0, grow.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["67210e010ad52ccb1eee189c5395a5123b977c3c","f11fc0d9dddf2e34456c930d0d88660ace84655b"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["f11fc0d9dddf2e34456c930d0d88660ace84655b"],"f11fc0d9dddf2e34456c930d0d88660ace84655b":["c8ee441d3e61e4669e10566a8d028a41333642b7"],"67210e010ad52ccb1eee189c5395a5123b977c3c":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["6613659748fe4411a7dcf85266e55db1f95f7315","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ee441d3e61e4669e10566a8d028a41333642b7":["67210e010ad52ccb1eee189c5395a5123b977c3c"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"67210e010ad52ccb1eee189c5395a5123b977c3c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c8ee441d3e61e4669e10566a8d028a41333642b7"],"f11fc0d9dddf2e34456c930d0d88660ace84655b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cb240aebd5a347d79f642127ad9255dd9a979f06"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["67210e010ad52ccb1eee189c5395a5123b977c3c"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["f11fc0d9dddf2e34456c930d0d88660ace84655b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}