{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","pathOld":"/dev/null","sourceNew":"    private String translateMatch2(RexNode node) {\n      switch (node.getKind()) {\n        case EQUALS:\n          return translateBinary(null, null, (RexCall) node);\n//        case LESS_THAN:\n//          return translateBinary(\"$lt\", \"$gt\", (RexCall) node);\n//        case LESS_THAN_OR_EQUAL:\n//          return translateBinary(\"$lte\", \"$gte\", (RexCall) node);\n//        case NOT_EQUALS:\n//          return translateBinary(\"$ne\", \"$ne\", (RexCall) node);\n//        case GREATER_THAN:\n//          return translateBinary(\"$gt\", \"$lt\", (RexCall) node);\n//        case GREATER_THAN_OR_EQUAL:\n//          return translateBinary(\"$gte\", \"$lte\", (RexCall) node);\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","date":1461958396,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","sourceNew":"    private String translateMatch2(RexNode node) {\n      switch (node.getKind()) {\n        case EQUALS:\n          return translateBinary(\"\", \"\", (RexCall) node);\n//        case NOT_EQUALS:\n//          return null;\n//        case LESS_THAN:\n//          return translateBinary(\"$lt\", \"$gt\", (RexCall) node);\n//        case LESS_THAN_OR_EQUAL:\n//          return translateBinary(\"$lte\", \"$gte\", (RexCall) node);\n        case NOT:\n          return translateBinary(\"-\", \"-\", (RexCall) node);\n//        case GREATER_THAN:\n//          return translateBinary(\"$gt\", \"$lt\", (RexCall) node);\n//        case GREATER_THAN_OR_EQUAL:\n//          return translateBinary(\"$gte\", \"$lte\", (RexCall) node);\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","sourceOld":"    private String translateMatch2(RexNode node) {\n      switch (node.getKind()) {\n        case EQUALS:\n          return translateBinary(null, null, (RexCall) node);\n//        case LESS_THAN:\n//          return translateBinary(\"$lt\", \"$gt\", (RexCall) node);\n//        case LESS_THAN_OR_EQUAL:\n//          return translateBinary(\"$lte\", \"$gte\", (RexCall) node);\n//        case NOT_EQUALS:\n//          return translateBinary(\"$ne\", \"$ne\", (RexCall) node);\n//        case GREATER_THAN:\n//          return translateBinary(\"$gt\", \"$lt\", (RexCall) node);\n//        case GREATER_THAN_OR_EQUAL:\n//          return translateBinary(\"$gte\", \"$lte\", (RexCall) node);\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","sourceNew":"    private String translateMatch2(RexNode node) {\n      Pair<String, RexLiteral> binaryTranslated = translateBinary((RexCall) node);\n\n      switch (node.getKind()) {\n//        case NOT:\n//          return translateBinary(\"-\", \"-\", (RexCall) node);\n        case EQUALS:\n          return binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case NOT_EQUALS:\n          return \"-\" + binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case LESS_THAN:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" }\";\n        case LESS_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" ]\";\n        case GREATER_THAN:\n          return binaryTranslated.getKey() + \": { \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        case GREATER_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","sourceOld":"    private String translateMatch2(RexNode node) {\n      switch (node.getKind()) {\n        case EQUALS:\n          return translateBinary(\"\", \"\", (RexCall) node);\n//        case NOT_EQUALS:\n//          return null;\n//        case LESS_THAN:\n//          return translateBinary(\"$lt\", \"$gt\", (RexCall) node);\n//        case LESS_THAN_OR_EQUAL:\n//          return translateBinary(\"$lte\", \"$gte\", (RexCall) node);\n        case NOT:\n          return translateBinary(\"-\", \"-\", (RexCall) node);\n//        case GREATER_THAN:\n//          return translateBinary(\"$gt\", \"$lt\", (RexCall) node);\n//        case GREATER_THAN_OR_EQUAL:\n//          return translateBinary(\"$gte\", \"$lte\", (RexCall) node);\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","sourceNew":"    private String translateMatch2(RexNode node) {\n      Pair<String, RexLiteral> binaryTranslated = null;\n      if (((RexCall) node).getOperands().size() == 2) {\n        binaryTranslated = translateBinary((RexCall) node);\n      }\n\n      switch (node.getKind()) {\n        case NOT:\n          return \"-\"+translateMatch2(((RexCall) node).getOperands().get(0));\n        case EQUALS:\n          return binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case NOT_EQUALS:\n          return \"-\" + binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case LESS_THAN:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" }\";\n        case LESS_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" ]\";\n        case GREATER_THAN:\n          return binaryTranslated.getKey() + \": { \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        case GREATER_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","sourceOld":"    private String translateMatch2(RexNode node) {\n      Pair<String, RexLiteral> binaryTranslated = translateBinary((RexCall) node);\n\n      switch (node.getKind()) {\n//        case NOT:\n//          return translateBinary(\"-\", \"-\", (RexCall) node);\n        case EQUALS:\n          return binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case NOT_EQUALS:\n          return \"-\" + binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case LESS_THAN:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" }\";\n        case LESS_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" ]\";\n        case GREATER_THAN:\n          return binaryTranslated.getKey() + \": { \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        case GREATER_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateComparison(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateMatch2(RexNode).mjava","sourceNew":"    private String translateComparison(RexNode node) {\n      Pair<String, RexLiteral> binaryTranslated = null;\n      if (((RexCall) node).getOperands().size() == 2) {\n        binaryTranslated = translateBinary((RexCall) node);\n      }\n\n      switch (node.getKind()) {\n        case NOT:\n          return \"-\"+translateComparison(((RexCall) node).getOperands().get(0));\n        case EQUALS:\n          String terms = binaryTranslated.getValue().getValue2().toString().trim();\n          if(!terms.startsWith(\"(\")){\n            terms = \"\\\"\"+terms+\"\\\"\";\n          }\n\n          String clause = binaryTranslated.getKey() + \":\" + terms;\n          this.negativeQuery = false;\n          return clause;\n        case NOT_EQUALS:\n          return \"-(\" + binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2()+\")\";\n        case LESS_THAN:\n          this.negativeQuery = false;\n          return \"(\"+binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" })\";\n        case LESS_THAN_OR_EQUAL:\n          this.negativeQuery = false;\n          return \"(\"+binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" ])\";\n        case GREATER_THAN:\n          this.negativeQuery = false;\n          return \"(\"+binaryTranslated.getKey() + \": { \" + binaryTranslated.getValue().getValue2() + \" TO * ])\";\n        case GREATER_THAN_OR_EQUAL:\n          this.negativeQuery = false;\n          return \"(\"+binaryTranslated.getKey() + \": [ \" + binaryTranslated.getValue().getValue2() + \" TO * ])\";\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","sourceOld":"    private String translateMatch2(RexNode node) {\n      Pair<String, RexLiteral> binaryTranslated = null;\n      if (((RexCall) node).getOperands().size() == 2) {\n        binaryTranslated = translateBinary((RexCall) node);\n      }\n\n      switch (node.getKind()) {\n        case NOT:\n          return \"-\"+translateMatch2(((RexCall) node).getOperands().get(0));\n        case EQUALS:\n          return binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case NOT_EQUALS:\n          return \"-\" + binaryTranslated.getKey() + \":\" + binaryTranslated.getValue().getValue2();\n        case LESS_THAN:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" }\";\n        case LESS_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ * TO \" + binaryTranslated.getValue().getValue2() + \" ]\";\n        case GREATER_THAN:\n          return binaryTranslated.getKey() + \": { \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        case GREATER_THAN_OR_EQUAL:\n          return binaryTranslated.getKey() + \": [ \" + binaryTranslated.getValue().getValue2() + \" TO * ]\";\n        default:\n          throw new AssertionError(\"cannot translate \" + node);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":[],"d984627825732e682759c22df7a3b171a80f3812":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d984627825732e682759c22df7a3b171a80f3812","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["36b1ce25b5b465615c00f409ce694664abbe7bd2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}