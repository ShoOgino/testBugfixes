{"path":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory(random);\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory(random);\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check\n    // there is no prox after full merge\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check\n    // there is no prox after full merge\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check\n    // there is no prox after full merge\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["132903c28af3aa6f67284b78de91c0f0a99488c2","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}