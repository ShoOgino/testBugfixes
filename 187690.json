{"path":"src/demo/org/apache/lucene/demo/html/SimpleCharStream#FillBuff().mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/SimpleCharStream#FillBuff().mjava","pathOld":"/dev/null","sourceNew":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/html/SimpleCharStream#FillBuff().mjava","pathOld":"src/demo/org/apache/lucene/demo/html/SimpleCharStream#FillBuff().mjava","sourceNew":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","sourceOld":"  protected void FillBuff() throws java.io.IOException\n  {\n     if (maxNextCharInd == available)\n     {\n        if (available == bufsize)\n        {\n           if (tokenBegin > 2048)\n           {\n              bufpos = maxNextCharInd = 0;\n              available = tokenBegin;\n           }\n           else if (tokenBegin < 0)\n              bufpos = maxNextCharInd = 0;\n           else\n              ExpandBuff(false);\n        }\n        else if (available > tokenBegin)\n           available = bufsize;\n        else if ((tokenBegin - available) < 2048)\n           ExpandBuff(true);\n        else\n           available = tokenBegin;\n     }\n\n     int i;\n     try {\n        if ((i = inputStream.read(buffer, maxNextCharInd,\n                                    available - maxNextCharInd)) == -1)\n        {\n           inputStream.close();\n           throw new java.io.IOException();\n        }\n        else\n           maxNextCharInd += i;\n        return;\n     }\n     catch(java.io.IOException e) {\n        --bufpos;\n        backup(0);\n        if (tokenBegin == -1)\n           tokenBegin = bufpos;\n        throw e;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}