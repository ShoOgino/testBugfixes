{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsAndPositionsEnum#getPayload().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsAndPositionsEnum#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader.PulsingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      //System.out.println(\"PR  getPayload payloadLength=\" + payloadLength + \" this=\" + this);\n      if (payloadRetrieved) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      payloadRetrieved = true;\n      if (payloadLength > 0) {\n        if (payload == null) {\n          payload = new BytesRef(payloadLength);\n        } else {\n          payload.grow(payloadLength);\n        }\n        postings.readBytes(payload.bytes, 0, payloadLength);\n        payload.length = payloadLength;\n        return payload;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      //System.out.println(\"PR  getPayload payloadLength=\" + payloadLength + \" this=\" + this);\n      if (payloadRetrieved) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      payloadRetrieved = true;\n      if (payloadLength > 0) {\n        if (payload == null) {\n          payload = new BytesRef(payloadLength);\n        } else {\n          payload.grow(payloadLength);\n        }\n        postings.readBytes(payload.bytes, 0, payloadLength);\n        payload.length = payloadLength;\n        return payload;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsAndPositionsEnum#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      //System.out.println(\"PR  getPayload payloadLength=\" + payloadLength + \" this=\" + this);\n      if (payloadRetrieved) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      payloadRetrieved = true;\n      if (payloadLength > 0) {\n        if (payload == null) {\n          payload = new BytesRef(payloadLength);\n        } else {\n          payload.grow(payloadLength);\n        }\n        postings.readBytes(payload.bytes, 0, payloadLength);\n        payload.length = payloadLength;\n        return payload;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      //System.out.println(\"PR  getPayload payloadLength=\" + payloadLength + \" this=\" + this);\n      if (payloadRetrieved) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      payloadRetrieved = true;\n      if (payloadLength > 0) {\n        if (payload == null) {\n          payload = new BytesRef(payloadLength);\n        } else {\n          payload.grow(payloadLength);\n        }\n        postings.readBytes(payload.bytes, 0, payloadLength);\n        payload.length = payloadLength;\n        return payload;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}