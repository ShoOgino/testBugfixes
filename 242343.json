{"path":"backwards/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}