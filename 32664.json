{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":["31d9b46cad4c17a1079c050a11068965b0221231","31d9b46cad4c17a1079c050a11068965b0221231","31d9b46cad4c17a1079c050a11068965b0221231"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}