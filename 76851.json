{"path":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a2b7a4c3442f9d6e937213f4661f316485108c8","date":1304351258,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    quickSort(lo, hi, MERGE_TO_QUICKSORT_THRESHOLD);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0d986f42c7320fce5b6ba6a767c160289c738a","date":1304428044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    quickSort(lo, hi, MERGE_TO_QUICKSORT_THRESHOLD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left);\n    quickSort(left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["6a2b7a4c3442f9d6e937213f4661f316485108c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a3776dccca01c11e7046323cfad46a3b4a471233","6a2b7a4c3442f9d6e937213f4661f316485108c8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}