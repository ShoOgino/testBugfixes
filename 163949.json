{"path":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    RAMDirectory indexStore = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n        Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","1509f151d7692d84fae414b2b799ac06ba60fcb4","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}