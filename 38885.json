{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testLargeValue().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testLargeValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testLargeValue().mjava","sourceNew":"  @Test(expected = MaxBytesLengthExceededException.class)\n  public void testLargeValue() {\n    int[] sizes = new int[] { random.nextInt(5),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 33 + random.nextInt(31),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 1 + random.nextInt(37) };\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < sizes.length; i++) {\n      ref.bytes = new byte[sizes[i]];\n      ref.offset = 0;\n      ref.length = sizes[i];\n      try {\n        assertEquals(i, hash.add(ref));\n      } catch (MaxBytesLengthExceededException e) {\n        if (i < sizes.length - 1)\n          fail(\"unexpected exception at size: \" + sizes[i]);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  @Test(expected = MaxBytesLengthExceededException.class)\n  public void testLargeValue() {\n    int[] sizes = new int[] { random.nextInt(5),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 33 + random.nextInt(31),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 1 + random.nextInt(37) };\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < sizes.length; i++) {\n      ref.bytes = new byte[sizes[i]];\n      ref.offset = 0;\n      ref.length = sizes[i];\n      try {\n        assertEquals(i, hash.add(ref));\n      } catch (MaxBytesLengthExceededException e) {\n        if (i < sizes.length - 1)\n          fail(\"unexpected exception at size: \" + sizes[i]);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testLargeValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testLargeValue().mjava","sourceNew":"  @Test(expected = MaxBytesLengthExceededException.class)\n  public void testLargeValue() {\n    int[] sizes = new int[] { random().nextInt(5),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 33 + random().nextInt(31),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 1 + random().nextInt(37) };\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < sizes.length; i++) {\n      ref.bytes = new byte[sizes[i]];\n      ref.offset = 0;\n      ref.length = sizes[i];\n      try {\n        assertEquals(i, hash.add(ref));\n      } catch (MaxBytesLengthExceededException e) {\n        if (i < sizes.length - 1)\n          fail(\"unexpected exception at size: \" + sizes[i]);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  @Test(expected = MaxBytesLengthExceededException.class)\n  public void testLargeValue() {\n    int[] sizes = new int[] { random.nextInt(5),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 33 + random.nextInt(31),\n        ByteBlockPool.BYTE_BLOCK_SIZE - 1 + random.nextInt(37) };\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < sizes.length; i++) {\n      ref.bytes = new byte[sizes[i]];\n      ref.offset = 0;\n      ref.length = sizes[i];\n      try {\n        assertEquals(i, hash.add(ref));\n      } catch (MaxBytesLengthExceededException e) {\n        if (i < sizes.length - 1)\n          fail(\"unexpected exception at size: \" + sizes[i]);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}