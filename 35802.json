{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    assumeFalse(\"PreFlex codec does not support ReaderTermsIndexDivisor!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random, r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    assumeFalse(\"PreFlex codec does not support ReaderTermsIndexDivisor!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random, r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    assumeFalse(\"PreFlex codec does not support ReaderTermsIndexDivisor!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    assumeFalse(\"PreFlex codec does not support ReaderTermsIndexDivisor!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random, r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    assumeFalse(\"PreFlex codec does not support ReaderTermsIndexDivisor!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = IndexReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\"));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true).getSequentialSubReaders()[0];\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n        (format.equals(\"SimpleText\") || format.equals(\"Memory\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, 0);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, 0);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, 0);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, false);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, 0);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, 0);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\") || format.equals(\"TempFST\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":null,"sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbba3c5be159d190b2b308dfc250c43531694ddb","date":1375234944,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\") || \n                 format.equals(\"TempFST\") || format.equals(\"TempFSTOrd\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\") || format.equals(\"TempFST\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testNoTermsIndex().mjava","sourceNew":null,"sourceOld":"  public void testNoTermsIndex() throws Exception {\n    // Some Codecs don't honor the ReaderTermsIndexDivisor, so skip the test if\n    // they're picked.\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setReaderTermsIndexDivisor(-1);\n    \n    // Don't proceed if picked Codec is in the list of illegal ones.\n    final String format = _TestUtil.getPostingsFormat(\"f\");\n    assumeFalse(\"Format: \" + format + \" does not support ReaderTermsIndexDivisor!\",\n                (format.equals(\"SimpleText\") || format.equals(\"Memory\") || format.equals(\"Direct\") || \n                 format.equals(\"TempFST\") || format.equals(\"TempFSTOrd\")));\n\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new TextField(\"f\", \"val\", Field.Store.NO));\n    w.addDocument(doc);\n    SegmentReader r = getOnlySegmentReader(DirectoryReader.open(w, true));\n    try {\n      _TestUtil.docs(random(), r, \"f\", new BytesRef(\"val\"), null, null, DocsEnum.FLAG_NONE);\n      fail(\"should have failed to seek since terms index was not loaded.\");\n    } catch (IllegalStateException e) {\n      // expected - we didn't load the term index\n    } finally {\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a45bec74b98f6fc05f52770cfb425739e6563960":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"dbba3c5be159d190b2b308dfc250c43531694ddb":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","172cf08877d0e6738a51edd238c4dc5ffc088345"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["dbba3c5be159d190b2b308dfc250c43531694ddb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","172cf08877d0e6738a51edd238c4dc5ffc088345"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"02331260bb246364779cb6f04919ca47900d01bb":["172cf08877d0e6738a51edd238c4dc5ffc088345"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["dbba3c5be159d190b2b308dfc250c43531694ddb"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"dbba3c5be159d190b2b308dfc250c43531694ddb":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a45bec74b98f6fc05f52770cfb425739e6563960","3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}