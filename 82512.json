{"path":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"/dev/null","sourceNew":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1,false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2,false,false);\n        }\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1,false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2,false,false);\n        }\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h, s);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        Hits h = s.search(q);\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length());\n\n            float score0 = h.score(0);\n            float score1 = h.score(1);\n            float score2 = h.score(2);\n            float score3 = h.score(3);\n\n            String doc0 = h.doc(0).get(\"id\");\n            String doc1 = h.doc(1).get(\"id\");\n            String doc2 = h.doc(2).get(\"id\");\n            String doc3 = h.doc(3).get(\"id\");\n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h, s);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n            q1.add(tq(\"hed\",\"albino\", 1.5f));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n            q2.add(tq(\"hed\",\"elephant\", 1.5f));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n\n            float score0 = h[0].score;\n            float score1 = h[1].score;\n            float score2 = h[2].score;\n            float score3 = h[3].score;\n\n            String doc0 = s.doc(h[0].doc).get(\"id\");\n            String doc1 = s.doc(h[1].doc).get(\"id\");\n            String doc2 = s.doc(h[2].doc).get(\"id\");\n            String doc3 = s.doc(h[3].doc).get(\"id\");            \n\n            assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n            assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n            assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n            assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n\n            assertTrue(\"d4 does not have a better score then d3: \" +\n                       score0 + \" >? \" + score1,\n                       score0 > score1);\n            assertTrue(\"d3 does not have a better score then d2: \" +\n                       score1 + \" >? \" + score2,\n                       score1 > score2);\n            assertTrue(\"d3 does not have a better score then d1: \" +\n                       score2 + \" >? \" + score3,\n                       score2 > score3);\n\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalWithTiebreakerAndBoost\",h, s);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}