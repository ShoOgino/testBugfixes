{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","commits":[{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextPointNear(holes[random().nextInt(holes.length)]);\n    }\n\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = random().nextInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = random().nextInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = random().nextInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextPointNear(holes[random().nextInt(holes.length)]);\n    }\n\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = random().nextInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = random().nextInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = random().nextInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextPointNear(holes[random().nextInt(holes.length)]);\n    }\n\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = random().nextInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = random().nextInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = random().nextInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e051bcfc1e0bf24d81e61f5c6540fba9ee9a15ce","date":1533129473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 2);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 2);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 2);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccb8206894ac4c2226bb96afa1c3193ee00aae04","date":1533131087,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 2);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 2);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 2);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPointNear(Polygon).mjava","sourceNew":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && random().nextInt(3) == 0) {\n      return nextPointNear(holes[random().nextInt(holes.length)]);\n    }\n\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = random().nextInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = random().nextInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = random().nextInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = random().nextBoolean() ? startVertex + 1 : random().nextInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","sourceOld":"  /** Returns next point (lat/lon) for testing near a Polygon */\n  // see http://www-ma2.upc.es/geoc/Schirra-pointPolygon.pdf for more info on some of these strategies\n  public static double[] nextPointNear(Polygon polygon) {\n    double polyLats[] = polygon.getPolyLats();\n    double polyLons[] = polygon.getPolyLons();\n    Polygon holes[] = polygon.getHoles();\n\n    // if there are any holes, target them aggressively\n    if (holes.length > 0 && randomInt(3) == 0) {\n      return nextPointNear(holes[randomInt(holes.length)]);\n    }\n\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return new double[] { nextLatitude(), nextLongitude() };\n    } else if (surpriseMe < 5) {\n      // purely random within bounding box\n      return new double[] { nextLatitudeBetween(polygon.minLat, polygon.maxLat), nextLongitudeBetween(polygon.minLon, polygon.maxLon) };\n    } else if (surpriseMe < 20) {\n      // target a vertex\n      int vertex = randomInt(polyLats.length - 1);\n      return new double[] { nextLatitudeNear(polyLats[vertex], polyLats[vertex+1] - polyLats[vertex]), \n                            nextLongitudeNear(polyLons[vertex], polyLons[vertex+1] - polyLons[vertex]) };\n    } else if (surpriseMe < 30) {\n      // target points around the bounding box edges\n      Polygon container = boxPolygon(new Rectangle(polygon.minLat, polygon.maxLat, polygon.minLon, polygon.maxLon));\n      double containerLats[] = container.getPolyLats();\n      double containerLons[] = container.getPolyLons();\n      int startVertex = randomInt(containerLats.length - 1);\n      return nextPointAroundLine(containerLats[startVertex], containerLons[startVertex], \n                                 containerLats[startVertex+1], containerLons[startVertex+1]);\n    } else {\n      // target points around diagonals between vertices\n      int startVertex = randomInt(polyLats.length - 1);\n      // but favor edges heavily\n      int endVertex = randomBoolean() ? startVertex + 1 : randomInt(polyLats.length - 1);\n      return nextPointAroundLine(polyLats[startVertex], polyLons[startVertex], \n                                 polyLats[endVertex],   polyLons[endVertex]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["713122036535651642e6d4fe57ce12b449e18473"],"ccb8206894ac4c2226bb96afa1c3193ee00aae04":["e051bcfc1e0bf24d81e61f5c6540fba9ee9a15ce"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["ccb8206894ac4c2226bb96afa1c3193ee00aae04"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"e051bcfc1e0bf24d81e61f5c6540fba9ee9a15ce":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["e051bcfc1e0bf24d81e61f5c6540fba9ee9a15ce"],"ccb8206894ac4c2226bb96afa1c3193ee00aae04":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"e051bcfc1e0bf24d81e61f5c6540fba9ee9a15ce":["ccb8206894ac4c2226bb96afa1c3193ee00aae04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}