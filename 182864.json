{"path":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"/dev/null","sourceNew":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(ApiBag.INTROSPECT) ? path.substring(0, path.length() - ApiBag.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(ApiBag.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - ApiBag.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(ApiBag.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"/dev/null","sourceNew":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(ApiBag.INTROSPECT) ? path.substring(0, path.length() - ApiBag.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(ApiBag.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - ApiBag.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(ApiBag.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","sourceNew":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(CommonParams.INTROSPECT) ? path.substring(0, path.length() - CommonParams.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(CommonParams.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - CommonParams.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(CommonParams.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(ApiBag.INTROSPECT) ? path.substring(0, path.length() - ApiBag.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(ApiBag.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - ApiBag.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(ApiBag.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","sourceNew":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(CommonParams.INTROSPECT) ? path.substring(0, path.length() - CommonParams.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(CommonParams.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - CommonParams.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(CommonParams.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(ApiBag.INTROSPECT) ? path.substring(0, path.length() - ApiBag.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(ApiBag.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - ApiBag.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(ApiBag.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","sourceNew":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(CommonParams.INTROSPECT) ? path.substring(0, path.length() - CommonParams.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(CommonParams.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - CommonParams.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(CommonParams.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(ApiBag.INTROSPECT) ? path.substring(0, path.length() - ApiBag.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(ApiBag.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - ApiBag.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(ApiBag.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPathApi(PluginBag[SolrRequestHandler],String,String,CompositeApi).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(CommonParams.INTROSPECT) ? path.substring(0, path.length() - CommonParams.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(CommonParams.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - CommonParams.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(CommonParams.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  private static CompositeApi getSubPathApi(PluginBag<SolrRequestHandler> requestHandlers, String path, String fullPath, CompositeApi compositeApi) {\n\n    String newPath = path.endsWith(CommonParams.INTROSPECT) ? path.substring(0, path.length() - CommonParams.INTROSPECT.length()) : path;\n    Map<String, Set<String>> subpaths = new LinkedHashMap<>();\n\n    getSubPaths(newPath, requestHandlers.getApiBag(), subpaths);\n    final Map<String, Set<String>> subPaths = subpaths;\n    if (subPaths.isEmpty()) return null;\n    return compositeApi.add(new Api(() -> ValidatingJsonMap.EMPTY) {\n      @Override\n      public void call(SolrQueryRequest req1, SolrQueryResponse rsp) {\n        String prefix = null;\n        prefix = fullPath.endsWith(CommonParams.INTROSPECT) ?\n            fullPath.substring(0, fullPath.length() - CommonParams.INTROSPECT.length()) :\n            fullPath;\n        LinkedHashMap<String, Set<String>> result = new LinkedHashMap<>(subPaths.size());\n        for (Map.Entry<String, Set<String>> e : subPaths.entrySet()) {\n          if (e.getKey().endsWith(CommonParams.INTROSPECT)) continue;\n          result.put(prefix + e.getKey(), e.getValue());\n        }\n\n        Map m = (Map) rsp.getValues().get(\"availableSubPaths\");\n        if(m != null){\n          m.putAll(result);\n        } else {\n          rsp.add(\"availableSubPaths\", result);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}