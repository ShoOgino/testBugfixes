{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","pathOld":"/dev/null","sourceNew":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = stripQuotes(node.getLeft().toString());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td <= d;\n        case GREATER_THAN_OR_EQUAL:\n          return td <= d;\n        default:\n          return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","sourceNew":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = stripQuotes(node.getLeft().toString());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","sourceOld":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = stripQuotes(node.getLeft().toString());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td <= d;\n        case GREATER_THAN_OR_EQUAL:\n          return td <= d;\n        default:\n          return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","sourceNew":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = getHavingField(node.getLeft());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","sourceOld":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = stripQuotes(node.getLeft().toString());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","sourceNew":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = getHavingField(node.getLeft());\n\n      if(reverseAliasMap.containsKey(field)) {\n        field = reverseAliasMap.get(field);\n      }\n\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","sourceOld":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = getHavingField(node.getLeft());\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","sourceNew":null,"sourceOld":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = getHavingField(node.getLeft());\n\n      if(reverseAliasMap.containsKey(field)) {\n        field = reverseAliasMap.get(field);\n      }\n\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.HavingVisitor#visitComparisonExpression(ComparisonExpression,Tuple).mjava","sourceNew":null,"sourceOld":"    protected Boolean visitComparisonExpression(ComparisonExpression node, Tuple tuple) {\n      String field = getHavingField(node.getLeft());\n\n      if(reverseAliasMap.containsKey(field)) {\n        field = reverseAliasMap.get(field);\n      }\n\n      double d = Double.parseDouble(node.getRight().toString());\n      double td = tuple.getDouble(field);\n      ComparisonExpression.Type t = node.getType();\n\n      switch(t) {\n        case LESS_THAN:\n          return td < d;\n        case LESS_THAN_OR_EQUAL:\n          return td <= d;\n        case NOT_EQUAL:\n          return td != d;\n        case EQUAL:\n          return td == d;\n        case GREATER_THAN:\n          return td > d;\n        case GREATER_THAN_OR_EQUAL:\n          return td >= d;\n        default:\n          return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["3ec71d4701edbd96cfea97384101d13611393552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}