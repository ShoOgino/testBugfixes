{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n\t */\n\t//@Override\n\tpublic DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\t\tfinal OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n\t\tfinal TermDocs termDocs=reader.termDocs();\n\t\ttry {\n\t\t\tfinal int count=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tmin,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n\t\t\t\tmax,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n\t\t\t);\n\t\t\tlastNumberOfTerms=new Integer(count);\n\t\t\t//System.out.println(\"Found \"+count+\" distinct terms in filtered range for field '\"+field+\"'.\");\n\t\t} finally {\n\t\t\ttermDocs.close();\n\t\t}\n\t\treturn bits;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    final TermDocs termDocs=reader.termDocs();\n    try {\n      final int count=splitRange(\n        reader,termDocs,bits,\n        min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n        max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n      );\n      lastNumberOfTerms=new Integer(count);\n      //System.out.println(\"Found \"+count+\" distinct terms in filtered range for field '\"+field+\"'.\");\n    } finally {\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","sourceOld":"\t/**\n\t * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n\t */\n\t//@Override\n\tpublic DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\t\tfinal OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n\t\tfinal TermDocs termDocs=reader.termDocs();\n\t\ttry {\n\t\t\tfinal int count=splitRange(\n\t\t\t\treader,termDocs,bits,\n\t\t\t\tmin,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n\t\t\t\tmax,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n\t\t\t);\n\t\t\tlastNumberOfTerms=new Integer(count);\n\t\t\t//System.out.println(\"Found \"+count+\" distinct terms in filtered range for field '\"+field+\"'.\");\n\t\t} finally {\n\t\t\ttermDocs.close();\n\t\t}\n\t\treturn bits;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475f68f6c1dd63a09582751144718a1767dfdc01","date":1231671896,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    final TermDocs termDocs = reader.termDocs();\n    try {\n      lastNumberOfTerms=splitRange(\n        reader,termDocs,bits,\n        min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n        max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n      );\n      //System.out.println(\"Found \"+lastNumberOfTerms+\" distinct terms in filtered range for field '\"+field+\"'.\");\n    } finally {\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    final TermDocs termDocs=reader.termDocs();\n    try {\n      final int count=splitRange(\n        reader,termDocs,bits,\n        min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n        max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n      );\n      lastNumberOfTerms=new Integer(count);\n      //System.out.println(\"Found \"+count+\" distinct terms in filtered range for field '\"+field+\"'.\");\n    } finally {\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78247fcc08921105534707227e0897d97f178c","date":1233079954,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (min.compareTo(max) > 0) {\n      // shortcut: if min>max, no docs will match!\n      lastNumberOfTerms=0;\n      return EMPTY_DOCIDSET;\n    } else {\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n      final TermDocs termDocs = reader.termDocs();\n      try {\n        lastNumberOfTerms=splitRange(\n          reader,termDocs,bits,\n          min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n          max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n        );\n      } finally {\n        termDocs.close();\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    final TermDocs termDocs = reader.termDocs();\n    try {\n      lastNumberOfTerms=splitRange(\n        reader,termDocs,bits,\n        min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n        max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n      );\n      //System.out.println(\"Found \"+lastNumberOfTerms+\" distinct terms in filtered range for field '\"+field+\"'.\");\n    } finally {\n      termDocs.close();\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c0b73ec4d2f7d5bf9bd7bb731cc7e6e17ac55d","date":1233243551,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (min.compareTo(max) > 0) {\n      // shortcut: if min>max, no docs will match!\n      lastNumberOfTerms=0;\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else {\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n      final TermDocs termDocs = reader.termDocs();\n      try {\n        lastNumberOfTerms=splitRange(\n          reader,termDocs,bits,\n          min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n          max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n        );\n      } finally {\n        termDocs.close();\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (min.compareTo(max) > 0) {\n      // shortcut: if min>max, no docs will match!\n      lastNumberOfTerms=0;\n      return EMPTY_DOCIDSET;\n    } else {\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n      final TermDocs termDocs = reader.termDocs();\n      try {\n        lastNumberOfTerms=splitRange(\n          reader,termDocs,bits,\n          min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n          max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n        );\n      } finally {\n        termDocs.close();\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\n   */\n  //@Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (min.compareTo(max) > 0) {\n      // shortcut: if min>max, no docs will match!\n      lastNumberOfTerms=0;\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else {\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n      final TermDocs termDocs = reader.termDocs();\n      try {\n        lastNumberOfTerms=splitRange(\n          reader,termDocs,bits,\n          min,trieVariant.TRIE_CODED_NUMERIC_MIN.equals(min),\n          max,trieVariant.TRIE_CODED_NUMERIC_MAX.equals(max)\n        );\n      } finally {\n        termDocs.close();\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc78247fcc08921105534707227e0897d97f178c":["475f68f6c1dd63a09582751144718a1767dfdc01"],"475f68f6c1dd63a09582751144718a1767dfdc01":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["38c0b73ec4d2f7d5bf9bd7bb731cc7e6e17ac55d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c0b73ec4d2f7d5bf9bd7bb731cc7e6e17ac55d":["bc78247fcc08921105534707227e0897d97f178c"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"bc78247fcc08921105534707227e0897d97f178c":["38c0b73ec4d2f7d5bf9bd7bb731cc7e6e17ac55d"],"475f68f6c1dd63a09582751144718a1767dfdc01":["bc78247fcc08921105534707227e0897d97f178c"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"38c0b73ec4d2f7d5bf9bd7bb731cc7e6e17ac55d":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["475f68f6c1dd63a09582751144718a1767dfdc01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}