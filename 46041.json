{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        BooleanQuery booleanQuery = new BooleanQuery();\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"hi\")), Occur.SHOULD);\n        booleanQuery.add(new TermQuery(new Term(\"text\", \"speed\")), Occur.SHOULD);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new TermQuery(new Term(\"text\", \"foo\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new TermQuery(new Term(\"text\", \"10\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hi\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"speed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new TermQuery(new Term(\"text\", \"hispeed\"));\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = booleanQuery;\n        highlighter = getHighlighter(query, \"text\", HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cf7efd82433f3f64684711c16edfd149db6af111"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cf7efd82433f3f64684711c16edfd149db6af111":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["cf7efd82433f3f64684711c16edfd149db6af111","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"cf7efd82433f3f64684711c16edfd149db6af111":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}