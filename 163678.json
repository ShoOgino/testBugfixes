{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313aa53a0b138beaae780203df1cde577ddb40ab","date":1316047785,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    List<Query> expandQueries = new ArrayList<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":["14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14942f0002b0e2aff803c994b3cc8a5d9b2575df","date":1327888973,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    List<Query> expandQueries = new ArrayList<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":["313aa53a0b138beaae780203df1cde577ddb40ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ed537de0f5011f66d563092bca474c50e51135f","date":1327937245,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    List<Query> expandQueries = new ArrayList<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    List<Query> expandQueries = new ArrayList<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ed537de0f5011f66d563092bca474c50e51135f":["313aa53a0b138beaae780203df1cde577ddb40ab","14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"14942f0002b0e2aff803c994b3cc8a5d9b2575df":["313aa53a0b138beaae780203df1cde577ddb40ab"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["313aa53a0b138beaae780203df1cde577ddb40ab","14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"313aa53a0b138beaae780203df1cde577ddb40ab":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["313aa53a0b138beaae780203df1cde577ddb40ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"6ed537de0f5011f66d563092bca474c50e51135f":[],"14942f0002b0e2aff803c994b3cc8a5d9b2575df":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6ed537de0f5011f66d563092bca474c50e51135f","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"313aa53a0b138beaae780203df1cde577ddb40ab":["6ed537de0f5011f66d563092bca474c50e51135f","14942f0002b0e2aff803c994b3cc8a5d9b2575df","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6ed537de0f5011f66d563092bca474c50e51135f","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}