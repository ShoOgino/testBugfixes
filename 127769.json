{"path":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","commits":[{"id":"7b01e327764dff0c4e657a87afb8a11306045b76","date":1320242486,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.currentTimeMillis();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.currentTimeMillis() - 100; // minus a tad of slop\n    long fast5time = 1 + fast5end - fast5start;\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil(fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil(fast5time / hardCommitWaitMillis);\n    \n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + softCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + soft,\n                 fast5end + (softCommitWaitMillis * i) <= soft);\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + hardCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + hard,\n                 fast5end + (hardCommitWaitMillis * i) <= hard);\n    }\n \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bdab10e35e54fecc62f933128ffdc3321c24a03","date":1360110906,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.currentTimeMillis();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.currentTimeMillis() - 200; // minus a tad of slop\n    long fast5time = 1 + fast5end - fast5start;\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil(fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil(fast5time / hardCommitWaitMillis);\n    \n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + softCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + soft,\n                 fast5end + (softCommitWaitMillis * i) <= soft);\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + hardCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + hard,\n                 fast5end + (hardCommitWaitMillis * i) <= hard);\n    }\n \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.currentTimeMillis();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.currentTimeMillis() - 100; // minus a tad of slop\n    long fast5time = 1 + fast5end - fast5start;\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil(fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil(fast5time / hardCommitWaitMillis);\n    \n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + softCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + soft,\n                 fast5end + (softCommitWaitMillis * i) <= soft);\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + hardCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + hard,\n                 fast5end + (hardCommitWaitMillis * i) <= hard);\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occured too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occured too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.currentTimeMillis();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.currentTimeMillis() - 200; // minus a tad of slop\n    long fast5time = 1 + fast5end - fast5start;\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil(fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil(fast5time / hardCommitWaitMillis);\n    \n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + softCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + soft,\n                 fast5end + (softCommitWaitMillis * i) <= soft);\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      assertTrue(i + \": soft occured too fast: \" + \n                 fast5end + \" + (\" + hardCommitWaitMillis + \" * \" + i +\n                 \") !<= \" + hard,\n                 fast5end + (hardCommitWaitMillis * i) <= hard);\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occurred too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occured too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occured too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occurred too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occured too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occured too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occurred too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occured too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occured too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a043e93ce5cee80458f8468ac6db8f024055773","date":1486677634,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(300, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n    \n    expectedSoft = Math.max(1, expectedSoft);\n    expectedHard = Math.max(1, expectedHard);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with plenty of fudge to survive nasty envs\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      if (soft != null || i == 1) {\n        assertNotNull(i + \": soft wasn't fast enough\", soft);\n        monitor.assertSaneOffers();\n\n        // have to assume none of the docs were added until\n        // very end of the add window\n        long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n        assertTrue(i + \": soft occurred too fast: \" +\n            softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n            softMs >= (softCommitWaitMillis * i));\n      } else {\n        // we may have guessed wrong and there were fewer commits\n        assertNull(\"Got a soft commit we weren't expecting\", monitor.soft.poll(2000, MILLISECONDS));\n      }\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n    \n    // we are only guessing how many commits we may see, allow one extra of each\n    monitor.soft.poll(softCommitWaitMillis + 200, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis + 200, MILLISECONDS);\n \n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any\n    // new hard/soft commits\n    assertNull(\"Got a hard commit we weren't expecting\",\n        monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n        monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(200, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with some fudge\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      assertNotNull(i + \": soft wasn't fast enough\", soft);\n      monitor.assertSaneOffers();\n\n      // have to assume none of the docs were added until\n      // very end of the add window\n      long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": soft occurred too fast: \" +\n              softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n          softMs >= (softCommitWaitMillis * i));\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c903df062ce7ba11d48e3e2da5293b14e516bc0","date":1487549972,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(300, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n    \n    expectedSoft = Math.max(1, expectedSoft);\n    expectedHard = Math.max(1, expectedHard);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with plenty of fudge to survive nasty envs\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 3, MILLISECONDS);\n      if (soft != null || i == 1) {\n        assertNotNull(i + \": soft wasn't fast enough\", soft);\n        monitor.assertSaneOffers();\n\n        // have to assume none of the docs were added until\n        // very end of the add window\n        long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n        assertTrue(i + \": soft occurred too fast: \" +\n            softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n            softMs >= (softCommitWaitMillis * i));\n      } else {\n        // we may have guessed wrong and there were fewer commits\n        assertNull(\"Got a soft commit we weren't expecting\", monitor.soft.poll(2000, MILLISECONDS));\n      }\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n    \n    // we are only guessing how many commits we may see, allow one extra of each\n    monitor.soft.poll(softCommitWaitMillis + 200, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis + 200, MILLISECONDS);\n \n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any\n    // new hard/soft commits\n    assertNull(\"Got a hard commit we weren't expecting\",\n        monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n        monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(300, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n    \n    expectedSoft = Math.max(1, expectedSoft);\n    expectedHard = Math.max(1, expectedHard);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with plenty of fudge to survive nasty envs\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n      if (soft != null || i == 1) {\n        assertNotNull(i + \": soft wasn't fast enough\", soft);\n        monitor.assertSaneOffers();\n\n        // have to assume none of the docs were added until\n        // very end of the add window\n        long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n        assertTrue(i + \": soft occurred too fast: \" +\n            softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n            softMs >= (softCommitWaitMillis * i));\n      } else {\n        // we may have guessed wrong and there were fewer commits\n        assertNull(\"Got a soft commit we weren't expecting\", monitor.soft.poll(2000, MILLISECONDS));\n      }\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n    \n    // we are only guessing how many commits we may see, allow one extra of each\n    monitor.soft.poll(softCommitWaitMillis + 200, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis + 200, MILLISECONDS);\n \n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any\n    // new hard/soft commits\n    assertNull(\"Got a hard commit we weren't expecting\",\n        monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n        monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7","date":1499971216,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n\n    final long preFirstNanos = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    final long postLastNanos = System.nanoTime();\n    \n    monitor.assertSaneOffers();\n\n    final long maxTimeMillis = MILLISECONDS.convert(postLastNanos - preFirstNanos, NANOSECONDS);\n    log.info(\"maxTimeMillis: {}ns - {}ns == {}ms\", postLastNanos, preFirstNanos, maxTimeMillis);\n    \n    // NOTE: explicitly using truncated division of longs to round down\n    // even if evenly divisible, need +1 to account for possible \"last\" commit triggered by \"last\" doc\n    final long maxExpectedSoft = 1L + (maxTimeMillis / softCommitWaitMillis);\n    final long maxExpectedHard = 1L + (maxTimeMillis / hardCommitWaitMillis);\n\n    log.info(\"maxExpectedSoft={}\", maxExpectedSoft);\n    log.info(\"maxExpectedHard={}\", maxExpectedHard);\n\n    // do a loop pool over each monitor queue, asserting that:\n    // - we get at least one commit\n    // - we don't get more then the max possible commits expected\n    // - any commit we do get doesn't happen \"too fast\" relative the previous commit\n    //   (or first doc added for the first commit)\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"softCommit\", preFirstNanos, softCommitWaitMillis,\n                                 maxExpectedSoft, monitor.soft);\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"hardCommit\", preFirstNanos, hardCommitWaitMillis,\n                                 maxExpectedHard, monitor.hard);\n\n    // now wait a bit...\n    // w/o other action we shouldn't see any additional hard/soft commits\n\n    assertNull(\"Got a hard commit we weren't expecting\",\n               monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n               monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(300, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n    \n    expectedSoft = Math.max(1, expectedSoft);\n    expectedHard = Math.max(1, expectedHard);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with plenty of fudge to survive nasty envs\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 3, MILLISECONDS);\n      if (soft != null || i == 1) {\n        assertNotNull(i + \": soft wasn't fast enough\", soft);\n        monitor.assertSaneOffers();\n\n        // have to assume none of the docs were added until\n        // very end of the add window\n        long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n        assertTrue(i + \": soft occurred too fast: \" +\n            softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n            softMs >= (softCommitWaitMillis * i));\n      } else {\n        // we may have guessed wrong and there were fewer commits\n        assertNull(\"Got a soft commit we weren't expecting\", monitor.soft.poll(2000, MILLISECONDS));\n      }\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n    \n    // we are only guessing how many commits we may see, allow one extra of each\n    monitor.soft.poll(softCommitWaitMillis + 200, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis + 200, MILLISECONDS);\n \n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any\n    // new hard/soft commits\n    assertNull(\"Got a hard commit we weren't expecting\",\n        monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n        monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n\n    final long preFirstNanos = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    final long postLastNanos = System.nanoTime();\n    \n    monitor.assertSaneOffers();\n\n    final long maxTimeMillis = MILLISECONDS.convert(postLastNanos - preFirstNanos, NANOSECONDS);\n    log.info(\"maxTimeMillis: {}ns - {}ns == {}ms\", postLastNanos, preFirstNanos, maxTimeMillis);\n    \n    // NOTE: explicitly using truncated division of longs to round down\n    // even if evenly divisible, need +1 to account for possible \"last\" commit triggered by \"last\" doc\n    final long maxExpectedSoft = 1L + (maxTimeMillis / softCommitWaitMillis);\n    final long maxExpectedHard = 1L + (maxTimeMillis / hardCommitWaitMillis);\n\n    log.info(\"maxExpectedSoft={}\", maxExpectedSoft);\n    log.info(\"maxExpectedHard={}\", maxExpectedHard);\n\n    // do a loop pool over each monitor queue, asserting that:\n    // - we get at least one commit\n    // - we don't get more then the max possible commits expected\n    // - any commit we do get doesn't happen \"too fast\" relative the previous commit\n    //   (or first doc added for the first commit)\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"softCommit\", preFirstNanos, softCommitWaitMillis,\n                                 maxExpectedSoft, monitor.soft);\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"hardCommit\", preFirstNanos, hardCommitWaitMillis,\n                                 maxExpectedHard, monitor.hard);\n\n    // now wait a bit...\n    // w/o other action we shouldn't see any additional hard/soft commits\n\n    assertNull(\"Got a hard commit we weren't expecting\",\n               monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n               monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n    long fast5start = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    long fast5end = System.nanoTime() - TimeUnit.NANOSECONDS.convert(300, TimeUnit.MILLISECONDS); // minus a tad of slop\n    long fast5time = 1 + TimeUnit.MILLISECONDS.convert(fast5end - fast5start, TimeUnit.NANOSECONDS);\n\n    // total time for all 5 adds determines the number of soft to expect\n    long expectedSoft = (long)Math.ceil((double) fast5time / softCommitWaitMillis);\n    long expectedHard = (long)Math.ceil((double) fast5time / hardCommitWaitMillis);\n    \n    expectedSoft = Math.max(1, expectedSoft);\n    expectedHard = Math.max(1, expectedHard);\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedSoft; i++) {\n      // Wait for the soft commit with plenty of fudge to survive nasty envs\n      Long soft = monitor.soft.poll(softCommitWaitMillis * 3, MILLISECONDS);\n      if (soft != null || i == 1) {\n        assertNotNull(i + \": soft wasn't fast enough\", soft);\n        monitor.assertSaneOffers();\n\n        // have to assume none of the docs were added until\n        // very end of the add window\n        long softMs = TimeUnit.MILLISECONDS.convert(soft - fast5end, TimeUnit.NANOSECONDS);\n        assertTrue(i + \": soft occurred too fast: \" +\n            softMs + \" < (\" + softCommitWaitMillis + \" * \" + i + \")\",\n            softMs >= (softCommitWaitMillis * i));\n      } else {\n        // we may have guessed wrong and there were fewer commits\n        assertNull(\"Got a soft commit we weren't expecting\", monitor.soft.poll(2000, MILLISECONDS));\n      }\n    }\n\n    // note: counting from 1 for multiplication\n    for (int i = 1; i <= expectedHard; i++) {\n      // wait for the hard commit, shouldn't need any fudge given \n      // other actions already taken\n      Long hard = monitor.hard.poll(hardCommitWaitMillis, MILLISECONDS);\n      assertNotNull(i + \": hard wasn't fast enough\", hard);\n      monitor.assertSaneOffers();\n      \n      // have to assume none of the docs were added until\n      // very end of the add window\n      long hardMs = TimeUnit.MILLISECONDS.convert(hard - fast5end, TimeUnit.NANOSECONDS);\n      assertTrue(i + \": hard occurred too fast: \" +\n              hardMs + \" < (\" + hardCommitWaitMillis + \" * \" + i + \")\",\n          hardMs >= (hardCommitWaitMillis * i));\n    }\n    \n    // we are only guessing how many commits we may see, allow one extra of each\n    monitor.soft.poll(softCommitWaitMillis + 200, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis + 200, MILLISECONDS);\n \n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any\n    // new hard/soft commits\n    assertNull(\"Got a hard commit we weren't expecting\",\n        monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n        monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25aea5e95fe9399f6ca9758178fa3a003159ff4d","date":1507651705,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#testSoftAndHardCommitMaxTimeRapidAdds().mjava","sourceNew":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n    doTestSoftAndHardCommitMaxTimeRapidAdds(CommitWithinType.NONE);\n  }\n\n","sourceOld":"  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {\n \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n\n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    \n    softTracker.setTimeUpperBound(softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we\n    // are looking for prompt timings\n    hardTracker.setOpenSearcher(false);\n    \n    // try to add 5 docs really fast\n\n    final long preFirstNanos = System.nanoTime();\n    for( int i=0;i<5; i++ ) {\n      assertU(adoc(\"id\", \"\"+500 + i, \"subject\", \"five fast docs\"));\n    }\n    final long postLastNanos = System.nanoTime();\n    \n    monitor.assertSaneOffers();\n\n    final long maxTimeMillis = MILLISECONDS.convert(postLastNanos - preFirstNanos, NANOSECONDS);\n    log.info(\"maxTimeMillis: {}ns - {}ns == {}ms\", postLastNanos, preFirstNanos, maxTimeMillis);\n    \n    // NOTE: explicitly using truncated division of longs to round down\n    // even if evenly divisible, need +1 to account for possible \"last\" commit triggered by \"last\" doc\n    final long maxExpectedSoft = 1L + (maxTimeMillis / softCommitWaitMillis);\n    final long maxExpectedHard = 1L + (maxTimeMillis / hardCommitWaitMillis);\n\n    log.info(\"maxExpectedSoft={}\", maxExpectedSoft);\n    log.info(\"maxExpectedHard={}\", maxExpectedHard);\n\n    // do a loop pool over each monitor queue, asserting that:\n    // - we get at least one commit\n    // - we don't get more then the max possible commits expected\n    // - any commit we do get doesn't happen \"too fast\" relative the previous commit\n    //   (or first doc added for the first commit)\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"softCommit\", preFirstNanos, softCommitWaitMillis,\n                                 maxExpectedSoft, monitor.soft);\n    monitor.assertSaneOffers();\n    assertRapidMultiCommitQueues(\"hardCommit\", preFirstNanos, hardCommitWaitMillis,\n                                 maxExpectedHard, monitor.hard);\n\n    // now wait a bit...\n    // w/o other action we shouldn't see any additional hard/soft commits\n\n    assertNull(\"Got a hard commit we weren't expecting\",\n               monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n               monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bcf9886c8ff537aafde14de48ebf744f5673f08b","0158ced21948b6626f733c1c42c1e18d94449789"],"6a043e93ce5cee80458f8468ac6db8f024055773":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3bdab10e35e54fecc62f933128ffdc3321c24a03":["7b01e327764dff0c4e657a87afb8a11306045b76"],"7b01e327764dff0c4e657a87afb8a11306045b76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["3c903df062ce7ba11d48e3e2da5293b14e516bc0","8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"3c903df062ce7ba11d48e3e2da5293b14e516bc0":["6a043e93ce5cee80458f8468ac6db8f024055773"],"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7":["3c903df062ce7ba11d48e3e2da5293b14e516bc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3bdab10e35e54fecc62f933128ffdc3321c24a03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"],"0158ced21948b6626f733c1c42c1e18d94449789":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6a043e93ce5cee80458f8468ac6db8f024055773"],"6a043e93ce5cee80458f8468ac6db8f024055773":["3c903df062ce7ba11d48e3e2da5293b14e516bc0"],"3bdab10e35e54fecc62f933128ffdc3321c24a03":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"7b01e327764dff0c4e657a87afb8a11306045b76":["3bdab10e35e54fecc62f933128ffdc3321c24a03"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"3c903df062ce7ba11d48e3e2da5293b14e516bc0":["aaf90fc29510e72665ac7934f34c3d1c25efad64","8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7":["25aea5e95fe9399f6ca9758178fa3a003159ff4d","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b01e327764dff0c4e657a87afb8a11306045b76"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}