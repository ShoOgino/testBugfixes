{"path":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer==null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer==null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"441013c453e5dc822f80c10f014c221e7156d985","date":1440081570,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer == null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer==null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e57158408015b1e7b1079de74aafe822e11811","date":1453058546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer == null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    if (pos < BUFFER_SIZE * (long) file.numBuffers()) {\n      // do not overwrite bufferPosition if EOF should be thrown on the next read\n      bufferPosition = (int) (pos % BUFFER_SIZE);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer == null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4eda6e6a7dc9d9178b430d989fa9e3033edc780","date":1453398628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    int newBufferIndex = (int) (pos / BUFFER_SIZE);\n\n    if (newBufferIndex != currentBufferIndex) {\n      // we seek'd to a different buffer:\n      currentBufferIndex = newBufferIndex;\n      setCurrentBuffer();\n    }\n\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n\n    // This is not >= because seeking to exact end of file is OK: this is where\n    // you'd also be if you did a readBytes of all bytes in the file)\n    if (getFilePointer() > length()) {\n      throw new EOFException(\"read past EOF: pos=\" + getFilePointer() + \" vs length=\" + length() + \": \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    if (currentBuffer == null || pos < bufferStart || pos >= bufferStart + BUFFER_SIZE) {\n      currentBufferIndex = (int) (pos / BUFFER_SIZE);\n      switchCurrentBuffer(false);\n    }\n    if (pos < BUFFER_SIZE * (long) file.numBuffers()) {\n      // do not overwrite bufferPosition if EOF should be thrown on the next read\n      bufferPosition = (int) (pos % BUFFER_SIZE);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":"  @Override\n  public void seek(long pos) throws IOException {\n    int newBufferIndex = (int) (pos / BUFFER_SIZE);\n\n    if (newBufferIndex != currentBufferIndex) {\n      // we seek'd to a different buffer:\n      currentBufferIndex = newBufferIndex;\n      setCurrentBuffer();\n    }\n\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n\n    // This is not >= because seeking to exact end of file is OK: this is where\n    // you'd also be if you did a readBytes of all bytes in the file\n    if (getFilePointer() > length()) {\n      throw new EOFException(\"seek beyond EOF: pos=\" + getFilePointer() + \" vs length=\" + length() + \": \" + this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    int newBufferIndex = (int) (pos / BUFFER_SIZE);\n\n    if (newBufferIndex != currentBufferIndex) {\n      // we seek'd to a different buffer:\n      currentBufferIndex = newBufferIndex;\n      setCurrentBuffer();\n    }\n\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n\n    // This is not >= because seeking to exact end of file is OK: this is where\n    // you'd also be if you did a readBytes of all bytes in the file)\n    if (getFilePointer() > length()) {\n      throw new EOFException(\"read past EOF: pos=\" + getFilePointer() + \" vs length=\" + length() + \": \" + this);\n    }\n  }\n\n","bugFix":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#seek(long).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void seek(long pos) throws IOException {\n    int newBufferIndex = (int) (pos / BUFFER_SIZE);\n\n    if (newBufferIndex != currentBufferIndex) {\n      // we seek'd to a different buffer:\n      currentBufferIndex = newBufferIndex;\n      setCurrentBuffer();\n    }\n\n    bufferPosition = (int) (pos % BUFFER_SIZE);\n\n    // This is not >= because seeking to exact end of file is OK: this is where\n    // you'd also be if you did a readBytes of all bytes in the file\n    if (getFilePointer() > length()) {\n      throw new EOFException(\"seek beyond EOF: pos=\" + getFilePointer() + \" vs length=\" + length() + \": \" + this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43e57158408015b1e7b1079de74aafe822e11811":["441013c453e5dc822f80c10f014c221e7156d985"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["43e57158408015b1e7b1079de74aafe822e11811"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"441013c453e5dc822f80c10f014c221e7156d985":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"43e57158408015b1e7b1079de74aafe822e11811":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["441013c453e5dc822f80c10f014c221e7156d985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["7bdf5317fc9c595685174d4aaf2f25deb8eb19ae"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bdf5317fc9c595685174d4aaf2f25deb8eb19ae":["d77dafd89756a5161d244985903e3487ca109182"],"441013c453e5dc822f80c10f014c221e7156d985":["43e57158408015b1e7b1079de74aafe822e11811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}