{"path":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","commits":[{"id":"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8","date":1246360634,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = ((Number) lowerVal).intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = ((Number) upperVal).intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee95de5f4b7a55d6d295e9f302b1554a95d88901","date":1255995676,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = ((Number) lowerVal).intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = ((Number) upperVal).intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffde9116cdfd279f0a9c0ec6e7dc568d5f178b81","date":1255996143,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee95de5f4b7a55d6d295e9f302b1554a95d88901":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ffde9116cdfd279f0a9c0ec6e7dc568d5f178b81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ffde9116cdfd279f0a9c0ec6e7dc568d5f178b81":["ee95de5f4b7a55d6d295e9f302b1554a95d88901"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["ee95de5f4b7a55d6d295e9f302b1554a95d88901"],"ee95de5f4b7a55d6d295e9f302b1554a95d88901":["ffde9116cdfd279f0a9c0ec6e7dc568d5f178b81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ffde9116cdfd279f0a9c0ec6e7dc568d5f178b81":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}