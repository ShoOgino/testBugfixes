{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      if (!refCounts.containsKey(fileName)) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteNewFiles(Collection[String]).mjava","sourceNew":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        toDelete.add(fileName);\n      }\n    }\n\n    deleteFiles(toDelete);\n  }\n\n","sourceOld":"  /** Deletes the specified files, but only if they are new\n   *  (have not yet been incref'd). */\n  void deleteNewFiles(Collection<String> files) throws IOException {\n    assert locked();\n    for (final String fileName: files) {\n      // NOTE: it's very unusual yet possible for the\n      // refCount to be present and 0: it can happen if you\n      // open IW on a crashed index, and it removes a bunch\n      // of unref'd files, and then you add new docs / do\n      // merging, and it reuses that segment name.\n      // TestCrash.testCrashAfterReopen can hit this:\n      if (!refCounts.containsKey(fileName) || refCounts.get(fileName).count == 0) {\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"will delete new file \\\"\" + fileName + \"\\\"\");\n        }\n        deletable.add(fileName);\n      }\n    }\n\n    deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["9eae2a56dc810a17cf807d831f720dec931a03de"],"55980207f1977bd1463465de1659b821347e2fa8":["9eae2a56dc810a17cf807d831f720dec931a03de","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"9eae2a56dc810a17cf807d831f720dec931a03de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["950882a2bd2a5f9dc16a154871584eaa643d882a","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["55980207f1977bd1463465de1659b821347e2fa8","950882a2bd2a5f9dc16a154871584eaa643d882a"],"55980207f1977bd1463465de1659b821347e2fa8":[],"9eae2a56dc810a17cf807d831f720dec931a03de":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","55980207f1977bd1463465de1659b821347e2fa8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eae2a56dc810a17cf807d831f720dec931a03de"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"950882a2bd2a5f9dc16a154871584eaa643d882a":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}