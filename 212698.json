{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c87d20f012bf841bca4751583c938a2828dc65","date":1500064819,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String).mjava","sourceNew":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c87d20f012bf841bca4751583c938a2828dc65":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2c87d20f012bf841bca4751583c938a2828dc65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c87d20f012bf841bca4751583c938a2828dc65"]},"commit2Childs":{"d2c87d20f012bf841bca4751583c938a2828dc65":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["d2c87d20f012bf841bca4751583c938a2828dc65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}