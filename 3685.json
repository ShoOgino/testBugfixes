{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","commits":[{"id":"255895910bec99adb867c3575281a4e4f4471eea","date":1319481775,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator();\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","date":1327858167,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicIndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicIndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    IndexReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyFieldNameWithEmptyTerm().mjava","sourceNew":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyFieldNameWithEmptyTerm() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"\", \"\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"a\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"b\", StringField.TYPE_UNSTORED));\n    doc.add(newField(\"\", \"c\", StringField.TYPE_UNSTORED));\n    writer.addDocument(doc);  \n    writer.close();\n    DirectoryReader reader = IndexReader.open(dir);\n    AtomicReader subreader = getOnlySegmentReader(reader);\n    TermsEnum te = subreader.fields().terms(\"\").iterator(null);\n    assertEquals(new BytesRef(\"\"), te.next());\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertNull(te.next());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"255895910bec99adb867c3575281a4e4f4471eea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["255895910bec99adb867c3575281a4e4f4471eea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","da6d5ac19a80d65b1e864251f155d30960353b7e"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"255895910bec99adb867c3575281a4e4f4471eea":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["255895910bec99adb867c3575281a4e4f4471eea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}