{"path":"lucene/core/src/java/org/apache/lucene/index/SortingCodecReader#produceNumericDocValues(FieldInfo,NumericDocValues,Map[String,NumericDocValuesWriter.CachedNumericDVs]).mjava","commits":[{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingCodecReader#produceNumericDocValues(FieldInfo,NumericDocValues,Map[String,NumericDocValuesWriter.CachedNumericDVs]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader#getNormValues(String).mjava","sourceNew":"  private NumericDocValues produceNumericDocValues(FieldInfo field, NumericDocValues oldNorms,\n                                                   Map<String, NumericDocValuesWriter.CachedNumericDVs> cachedNorms) throws IOException {\n    NumericDocValuesWriter.CachedNumericDVs norms;\n    synchronized (cachedNorms) {\n      norms = cachedNorms.get(field);\n      if (norms == null) {\n        FixedBitSet docsWithField = new FixedBitSet(maxDoc());\n        long[] values = new long[maxDoc()];\n        while (true) {\n          int docID = oldNorms.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          int newDocID = docMap.oldToNew(docID);\n          docsWithField.set(newDocID);\n          values[newDocID] = oldNorms.longValue();\n        }\n        norms = new NumericDocValuesWriter.CachedNumericDVs(values, docsWithField);\n        cachedNorms.put(field.name, norms);\n      }\n    }\n    return new NumericDocValuesWriter.SortingNumericDocValues(norms);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNormValues(String field) throws IOException {\n    final NumericDocValues oldNorms = in.getNormValues(field);\n    if (oldNorms == null) return null;\n    CachedNumericDVs norms;\n    synchronized (cachedNorms) {\n      norms = cachedNorms.get(field);\n      if (norms == null) {\n        FixedBitSet docsWithField = new FixedBitSet(maxDoc());\n        long[] values = new long[maxDoc()];\n        while (true) {\n          int docID = oldNorms.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          int newDocID = docMap.oldToNew(docID);\n          docsWithField.set(newDocID);\n          values[newDocID] = oldNorms.longValue();\n        }\n        norms = new CachedNumericDVs(values, docsWithField);\n        cachedNorms.put(field, norms);\n      }\n    }\n    return new SortingNumericDocValues(norms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6109eb85278a3a0b573c754977177cbad278c6c","date":1600863688,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingCodecReader#produceNumericDocValues(FieldInfo,NumericDocValues,Map[String,NumericDocValuesWriter.CachedNumericDVs]).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues produceNumericDocValues(FieldInfo field, NumericDocValues oldNorms,\n                                                   Map<String, NumericDocValuesWriter.CachedNumericDVs> cachedNorms) throws IOException {\n    NumericDocValuesWriter.CachedNumericDVs norms;\n    synchronized (cachedNorms) {\n      norms = cachedNorms.get(field);\n      if (norms == null) {\n        FixedBitSet docsWithField = new FixedBitSet(maxDoc());\n        long[] values = new long[maxDoc()];\n        while (true) {\n          int docID = oldNorms.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          int newDocID = docMap.oldToNew(docID);\n          docsWithField.set(newDocID);\n          values[newDocID] = oldNorms.longValue();\n        }\n        norms = new NumericDocValuesWriter.CachedNumericDVs(values, docsWithField);\n        cachedNorms.put(field.name, norms);\n      }\n    }\n    return new NumericDocValuesWriter.SortingNumericDocValues(norms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6109eb85278a3a0b573c754977177cbad278c6c":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6109eb85278a3a0b573c754977177cbad278c6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"c6109eb85278a3a0b573c754977177cbad278c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["c6109eb85278a3a0b573c754977177cbad278c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}