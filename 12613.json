{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","pathOld":"/dev/null","sourceNew":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getInvalidStructuredDir2(random);\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(ir1, ir2);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random.nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689","date":1329492225,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","sourceNew":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getInvalidStructuredDir2(random);\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random.nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getInvalidStructuredDir2(random);\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(ir1, ir2);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random.nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","sourceNew":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getInvalidStructuredDir2(random());\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random().nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getInvalidStructuredDir2(random);\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random.nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes2().mjava","sourceNew":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getInvalidStructuredDir2(random());\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(readers);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(random().nextBoolean(), readers, readers);\n    });\n\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getInvalidStructuredDir2(random());\n\n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    CompositeReader[] readers = new CompositeReader[] {ir1, ir2};\n    try {\n      new ParallelCompositeReader(readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random().nextBoolean(), readers, readers);\n      fail(\"didn't get expected exception: indexes don't have same subreader structure\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8be807b98a5aab36b690a9bd4ef0e4b5d33b8689"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689":["6e09a3a223be07d75777515a717312813221fe58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["05fe562aa248790944d43cdd478f512572835ba0"],"6e09a3a223be07d75777515a717312813221fe58":["8be807b98a5aab36b690a9bd4ef0e4b5d33b8689"],"8be807b98a5aab36b690a9bd4ef0e4b5d33b8689":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}