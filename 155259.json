{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random.nextBoolean()) {\n      final boolean q1RandomAccess = random.nextBoolean();\n      final boolean q2RandomAccess = random.nextBoolean();\n      q1 = new FilteredQuery(q1, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q1RandomAccess;\n        }\n      };\n      q2 = new FilteredQuery(q2, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q2RandomAccess;\n        }\n      };\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random.nextBoolean()) {\n      final boolean q1RandomAccess = random.nextBoolean();\n      final boolean q2RandomAccess = random.nextBoolean();\n      q1 = new FilteredQuery(q1, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q1RandomAccess;\n        }\n      };\n      q2 = new FilteredQuery(q2, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q2RandomAccess;\n        }\n      };\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      final boolean q1RandomAccess = random().nextBoolean();\n      final boolean q2RandomAccess = random().nextBoolean();\n      q1 = new FilteredQuery(q1, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q1RandomAccess;\n        }\n      };\n      q2 = new FilteredQuery(q2, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q2RandomAccess;\n        }\n      };\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random.nextBoolean()) {\n      final boolean q1RandomAccess = random.nextBoolean();\n      final boolean q2RandomAccess = random.nextBoolean();\n      q1 = new FilteredQuery(q1, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q1RandomAccess;\n        }\n      };\n      q2 = new FilteredQuery(q2, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q2RandomAccess;\n        }\n      };\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, _TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  _TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      final boolean q1RandomAccess = random().nextBoolean();\n      final boolean q2RandomAccess = random().nextBoolean();\n      q1 = new FilteredQuery(q1, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q1RandomAccess;\n        }\n      };\n      q2 = new FilteredQuery(q2, filter) {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return q2RandomAccess;\n        }\n      };\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, _TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  _TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":["92749b51992f15c9e464fd464baf3372bd5573a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4c51cefc12f21daadde42d03d8316dcef3b226","date":1424526999,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TODO: remove this randomness and just explicitly test the query N times always?\n    if (filter != null) {\n      int res = random().nextInt(3);\n      if (res == 0) {\n        // use FilteredQuery explicitly\n        q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n        q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n        filter = null;\n      } else if (res == 1) {\n        // use BooleanQuery FILTER clause\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(filter, Occur.FILTER);\n        q1 = bq1;\n        \n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(filter, Occur.FILTER);\n        q2 = bq2;\n        filter = null;\n      } else {\n        // do nothing, we use search(q, filter, int, ...) in this case.\n      }\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TRUNK ONLY: test both filter code paths\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e8701e5b46d362735e000a65f451ad8cab75fd4","date":1424530754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // TODO: remove this randomness and just explicitly test the query N times always?\n    if (filter != null) {\n      int res = random().nextInt(3);\n      if (res == 0) {\n        // use FilteredQuery explicitly\n        q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n        q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n        filter = null;\n      } else if (res == 1) {\n        // use BooleanQuery FILTER clause\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(filter, Occur.FILTER);\n        q1 = bq1;\n        \n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(filter, Occur.FILTER);\n        q2 = bq2;\n        filter = null;\n      } else {\n        // do nothing, we use search(q, filter, int, ...) in this case.\n      }\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);\n    assertTrue(td1.totalHits <= td2.totalHits);\n    \n    // fill the superset into a bitset\n    BitSet bitset = new BitSet();\n    for (int i = 0; i < td2.scoreDocs.length; i++) {\n      bitset.set(td2.scoreDocs[i].doc);\n    }\n    \n    // check in the subset, that every bit was set by the super\n    for (int i = 0; i < td1.scoreDocs.length; i++) {\n      assertTrue(bitset.get(td1.scoreDocs[i].doc));\n    }\n  }\n\n","bugFix":null,"bugIntro":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c208fbf3daca3ea1b644a76111fd70256212d50","date":1428090221,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Query filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"8c208fbf3daca3ea1b644a76111fd70256212d50":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["8c208fbf3daca3ea1b644a76111fd70256212d50"],"1db68e96dd908fcd79ef809095822736aa601d08":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["ec4c51cefc12f21daadde42d03d8316dcef3b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","8c208fbf3daca3ea1b644a76111fd70256212d50"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["92749b51992f15c9e464fd464baf3372bd5573a2"],"ec4c51cefc12f21daadde42d03d8316dcef3b226":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"8c208fbf3daca3ea1b644a76111fd70256212d50":["4c74000f48f15dd52e66dc2f279abd04cb226ed2","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["ec4c51cefc12f21daadde42d03d8316dcef3b226"],"6613659748fe4411a7dcf85266e55db1f95f7315":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"92749b51992f15c9e464fd464baf3372bd5573a2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["8c208fbf3daca3ea1b644a76111fd70256212d50","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ec4c51cefc12f21daadde42d03d8316dcef3b226":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}