{"path":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#addTerm(Token,RawPostingList).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#addTerm(Token,RawPostingList).mjava","pathOld":"/dev/null","sourceNew":"  void addTerm(Token t, RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n    p.freq++;\n\n    if (doVectorOffsets) {\n      final int startOffset = fieldState.offset + t.startOffset();\n      final int endOffset = fieldState.offset + t.endOffset();\n      termsHashPerField.writeVInt(1, startOffset - p.lastOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - p.lastPosition);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#addTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#addTerm(Token,RawPostingList).mjava","sourceNew":"  void addTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n    p.freq++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset - p.lastOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - p.lastPosition);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void addTerm(Token t, RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n    p.freq++;\n\n    if (doVectorOffsets) {\n      final int startOffset = fieldState.offset + t.startOffset();\n      final int endOffset = fieldState.offset + t.endOffset();\n      termsHashPerField.writeVInt(1, startOffset - p.lastOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - p.lastPosition);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}