{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query build() {\n      Map<String, BytesRef[]> collectedTerms = new HashMap<>();\n      for (String field : terms.keySet()) {\n        collectedTerms.put(field, convertHash(terms.get(field)));\n      }\n      BooleanQuery.Builder parent = new BooleanQuery.Builder();\n      for (int i = 0; i < passes; i++) {\n        BooleanQuery.Builder child = new BooleanQuery.Builder();\n        for (String field : terms.keySet()) {\n          child.add(new TermInSetQuery(field(field, i), collectedTerms.get(field)), BooleanClause.Occur.SHOULD);\n        }\n        parent.add(child.build(), BooleanClause.Occur.MUST);\n      }\n      return parent.build();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","pathOld":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","sourceNew":"    @Override\n    public Query build() {\n      Map<String, BytesRef[]> collectedTerms = new HashMap<>();\n      for (Map.Entry<String, BytesRefHash> entry : terms.entrySet()) {\n        collectedTerms.put(entry.getKey(), convertHash(entry.getValue()));\n      }\n      BooleanQuery.Builder parent = new BooleanQuery.Builder();\n      for (int i = 0; i < passes; i++) {\n        BooleanQuery.Builder child = new BooleanQuery.Builder();\n        for (String field : terms.keySet()) {\n          child.add(new TermInSetQuery(field(field, i), collectedTerms.get(field)), BooleanClause.Occur.SHOULD);\n        }\n        parent.add(child.build(), BooleanClause.Occur.MUST);\n      }\n      return parent.build();\n    }\n\n","sourceOld":"    @Override\n    public Query build() {\n      Map<String, BytesRef[]> collectedTerms = new HashMap<>();\n      for (String field : terms.keySet()) {\n        collectedTerms.put(field, convertHash(terms.get(field)));\n      }\n      BooleanQuery.Builder parent = new BooleanQuery.Builder();\n      for (int i = 0; i < passes; i++) {\n        BooleanQuery.Builder child = new BooleanQuery.Builder();\n        for (String field : terms.keySet()) {\n          child.add(new TermInSetQuery(field(field, i), collectedTerms.get(field)), BooleanClause.Occur.SHOULD);\n        }\n        parent.add(child.build(), BooleanClause.Occur.MUST);\n      }\n      return parent.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","pathOld":"lucene/monitor/src/java/org/apache/lucene/monitor/MultipassTermFilteredPresearcher.MultipassDocumentQueryBuilder#build().mjava","sourceNew":"    @Override\n    public Query build() {\n      Map<String, BytesRef[]> collectedTerms = new HashMap<>();\n      for (Map.Entry<String, BytesRefHash> entry : terms.entrySet()) {\n        collectedTerms.put(entry.getKey(), convertHash(entry.getValue()));\n      }\n      BooleanQuery.Builder parent = new BooleanQuery.Builder();\n      for (int i = 0; i < passes; i++) {\n        BooleanQuery.Builder child = new BooleanQuery.Builder();\n        for (String field : terms.keySet()) {\n          child.add(new TermInSetQuery(field(field, i), collectedTerms.get(field)), BooleanClause.Occur.SHOULD);\n        }\n        parent.add(child.build(), BooleanClause.Occur.MUST);\n      }\n      return parent.build();\n    }\n\n","sourceOld":"    @Override\n    public Query build() {\n      Map<String, BytesRef[]> collectedTerms = new HashMap<>();\n      for (String field : terms.keySet()) {\n        collectedTerms.put(field, convertHash(terms.get(field)));\n      }\n      BooleanQuery.Builder parent = new BooleanQuery.Builder();\n      for (int i = 0; i < passes; i++) {\n        BooleanQuery.Builder child = new BooleanQuery.Builder();\n        for (String field : terms.keySet()) {\n          child.add(new TermInSetQuery(field(field, i), collectedTerms.get(field)), BooleanClause.Occur.SHOULD);\n        }\n        parent.add(child.build(), BooleanClause.Occur.MUST);\n      }\n      return parent.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["7c529b189e09de25455d82ebd7260748cf11ee14"],"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["7c529b189e09de25455d82ebd7260748cf11ee14","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"7c529b189e09de25455d82ebd7260748cf11ee14":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}