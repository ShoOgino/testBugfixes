{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    assertTrue(reporters.keySet().containsAll(Arrays.asList(INITIAL_REPORTERS)));\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    assertTrue(reporters.keySet().containsAll(Arrays.asList(INITIAL_REPORTERS)));\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    assertTrue(reporters.keySet().containsAll(Arrays.asList(INITIAL_REPORTERS)));\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricReporterPlugins();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                              \"solrconfig.xml\", \"schema.xml\"));\n                             \n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                              \"solrconfig.xml\", \"schema.xml\"));\n                             \n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n    cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                              \"solrconfig.xml\", \"schema.xml\"));\n                             \n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-metricreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                             (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                              \"solrconfig.xml\", \"schema.xml\"));\n                             \n    h.coreName = DEFAULT_TEST_CORENAME;\n    jmxReporter = JmxUtil.findFirstMBeanServer() != null ? 1 : 0;\n    metricManager = cc.getMetricManager();\n    tag = h.getCore().getCoreMetricManager().getTag();\n    // initially there are more reporters, because two of them are added via a matching collection name\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.core.\" + DEFAULT_TEST_CORENAME);\n    assertEquals(INITIAL_REPORTERS.length + jmxReporter, reporters.size());\n    for (String r : INITIAL_REPORTERS) {\n      assertTagged(reporters, r);\n    }\n    // test rename operation\n    cc.rename(DEFAULT_TEST_CORENAME, CORE_NAME);\n    h.coreName = CORE_NAME;\n    cfg = cc.getConfig();\n    PluginInfo[] plugins = cfg.getMetricsConfig().getMetricReporters();\n    assertNotNull(plugins);\n    assertEquals(10 + jmxReporter, plugins.length);\n    reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(4 + jmxReporter, reporters.size());\n    assertTrue(\"Reporter '\" + REPORTER_NAMES[0] + \"' missing in solr.node\", reporters.containsKey(REPORTER_NAMES[0]));\n    assertTrue(\"Reporter '\" + UNIVERSAL + \"' missing in solr.node\", reporters.containsKey(UNIVERSAL));\n    assertTrue(\"Reporter '\" + MULTIGROUP + \"' missing in solr.node\", reporters.containsKey(MULTIGROUP));\n    assertTrue(\"Reporter '\" + MULTIREGISTRY + \"' missing in solr.node\", reporters.containsKey(MULTIREGISTRY));\n    SolrMetricReporter reporter = reporters.get(REPORTER_NAMES[0]);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n    reporter = reporters.get(UNIVERSAL);\n    assertTrue(\"Reporter \" + reporter + \" is not an instance of \" + MockMetricReporter.class.getName(),\n        reporter instanceof  MockMetricReporter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["9799ebcab48102552d92f7807965a91fb6e116f7"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"9799ebcab48102552d92f7807965a91fb6e116f7":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"f8061ddd97f3352007d927dae445884a6f3d857b":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","9799ebcab48102552d92f7807965a91fb6e116f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"9799ebcab48102552d92f7807965a91fb6e116f7":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","f8061ddd97f3352007d927dae445884a6f3d857b"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","9799ebcab48102552d92f7807965a91fb6e116f7","f8061ddd97f3352007d927dae445884a6f3d857b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}