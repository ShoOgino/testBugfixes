{"path":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,int...).mjava","commits":[{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,Object...).mjava","sourceNew":"  /**\n   * Given a QueryResponse returned by SolrServer.query, asserts that the\n   * \"id\" of the list of documents returned matches the expected list\n   * @see org.apache.solr.client.solrj.SolrClient#query\n   */\n  private void assertDocList(QueryResponse rsp, int... ids) {\n    SolrDocumentList docs = extractDocList(rsp);\n    assertEquals(\"Wrong number of docs in response\", ids.length, docs.size());\n    int i = 0;\n    for (int id : ids) {\n      assertEquals(rsp.toString(), \"\"+id, docs.get(i).get(\"id\"));\n      i++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a QueryResponse returned by SolrServer.query, asserts that the\n   * \"id\" of the list of documents returned matches the expected list\n   * @see org.apache.solr.client.solrj.SolrClient#query\n   */\n  private void assertDocList(QueryResponse rsp, Object... ids) {\n    SolrDocumentList docs = extractDocList(rsp);\n    assertEquals(\"Wrong number of docs in response\", ids.length, docs.size());\n    int i = 0;\n    for (Object id : ids) {\n      assertEquals(rsp.toString(), id, docs.get(i).get(\"id\"));\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,Object...).mjava","sourceNew":"  /**\n   * Given a QueryResponse returned by SolrServer.query, asserts that the\n   * \"id\" of the list of documents returned matches the expected list\n   * @see org.apache.solr.client.solrj.SolrClient#query\n   */\n  private void assertDocList(QueryResponse rsp, int... ids) {\n    SolrDocumentList docs = extractDocList(rsp);\n    assertEquals(\"Wrong number of docs in response\", ids.length, docs.size());\n    int i = 0;\n    for (int id : ids) {\n      assertEquals(rsp.toString(), \"\"+id, docs.get(i).get(\"id\"));\n      i++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a QueryResponse returned by SolrServer.query, asserts that the\n   * \"id\" of the list of documents returned matches the expected list\n   * @see org.apache.solr.client.solrj.SolrClient#query\n   */\n  private void assertDocList(QueryResponse rsp, Object... ids) {\n    SolrDocumentList docs = extractDocList(rsp);\n    assertEquals(\"Wrong number of docs in response\", ids.length, docs.size());\n    int i = 0;\n    for (Object id : ids) {\n      assertEquals(rsp.toString(), id, docs.get(i).get(\"id\"));\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertDocList(QueryResponse,int...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a QueryResponse returned by SolrServer.query, asserts that the\n   * \"id\" of the list of documents returned matches the expected list\n   * @see org.apache.solr.client.solrj.SolrClient#query\n   */\n  private void assertDocList(QueryResponse rsp, int... ids) {\n    SolrDocumentList docs = extractDocList(rsp);\n    assertEquals(\"Wrong number of docs in response\", ids.length, docs.size());\n    int i = 0;\n    for (int id : ids) {\n      assertEquals(rsp.toString(), \"\"+id, docs.get(i).get(\"id\"));\n      i++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}