{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef],IntsRef).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex, IntsRef scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(FSTCompiler[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(FSTCompiler<BytesRef> fstCompiler, FST<BytesRef> subIndex, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        fstCompiler.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(FSTCompiler[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef],IntsRefBuilder).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(FSTCompiler<BytesRef> fstCompiler, FST<BytesRef> subIndex, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        fstCompiler.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}