{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<?> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\");\n      stemmer = (SnowballProgram) stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<?> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\");\n      stemmer = (SnowballProgram) stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d","date":1274827476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<?> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\");\n      stemmer = (SnowballProgram) stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n\n","bugFix":["4cf4d7ebce4950ca82b78f6b20a6d427fb03a599"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#SnowballFilter(TokenStream,String).mjava","sourceNew":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the named stemming filter.\n   *\n   * Available stemmers are listed in {@link org.tartarus.snowball.ext}.\n   * The name of a stemmer is the part of the class name before \"Stemmer\",\n   * e.g., the stemmer in {@link org.tartarus.snowball.ext.EnglishStemmer} is named \"English\".\n   *\n   * @param in the input tokens to stem\n   * @param name the name of a stemmer\n   */\n  public SnowballFilter(TokenStream in, String name) {\n    super(in);\n    try {      \n      Class<? extends SnowballProgram> stemClass =\n        Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballProgram.class);\n      stemmer = stemClass.newInstance();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid stemmer class specified: \" + name, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d"],"eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"eaa7b9ccec3dafeecd1d1e9342b79b0cb6400c7d":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}