{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n    iParams.addCategoryListParams(new CategoryPath(\"Band\"),\n        new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    iParams.addCategoryListParams(new CategoryPath(\"Composer\"),\n        new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n    iParams.addCategoryListParams(new CategoryPath(\"Band\"),\n        new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    iParams.addCategoryListParams(new CategoryPath(\"Composer\"),\n        new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n    iParams.addCategoryListParams(new CategoryPath(\"Band\"),\n        new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    iParams.addCategoryListParams(new CategoryPath(\"Composer\"),\n        new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams();\n    iParams.addCategoryListParams(new CategoryPath(\"Band\"),\n        new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    iParams.addCategoryListParams(new CategoryPath(\"Composer\"),\n        new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(dirs[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1],\n        OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(new Term(\"$music\", \"Bands\")));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(new Term(\"$music\", \"Composers\")));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir,\n        searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertPostingListExists(\"$facets\", \"$fulltree$\", ir);\n    assertPostingListExists(\"$music\", \"Bands\", ir);\n    assertPostingListExists(\"$music\", \"Composers\", ir);\n\n    tr.close();\n    ir.close();\n    iw.close();\n    tw.close();\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory[][] dirs = getDirs();\n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dirs[0][0], newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0][1], OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dirs[0][1]);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(dirs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<FacetLabel,CategoryListParams> paramsMap = new HashMap<FacetLabel,CategoryListParams>();\n    paramsMap.put(new FacetLabel(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new FacetLabel(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#testTwoCustomsSameField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    SimpleFacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<FacetLabel,CategoryListParams> paramsMap = new HashMap<FacetLabel,CategoryListParams>();\n    paramsMap.put(new FacetLabel(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new FacetLabel(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testTwoCustomsSameField().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTwoCustomsSameField() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<CategoryPath,CategoryListParams> paramsMap = new HashMap<CategoryPath,CategoryListParams>();\n    paramsMap.put(new CategoryPath(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new CategoryPath(\"Composer\"), new CategoryListParams(\"$music\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n\n    assertOrdinalsExist(\"$facets\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$music\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["c4015cd39dff8d4dec562d909f9766debac53aa6","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"c4015cd39dff8d4dec562d909f9766debac53aa6":["61d5f95d14e5b9b046998c51e16709a398c15226"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}