{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","commits":[{"id":"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6","date":1330290166,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"/dev/null","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      host = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8a9d31fcebe090a8792e9ec09634c3671ef6a847"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"/dev/null","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      host = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a396bec04b487ba533a30e6adc6f724f43017279","date":1353364708,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n    \tString hostaddress = InetAddress.getLocalHost().getHostAddress();\n    \t//Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts file is right.\n    \tif(\"127.0.0.1\".equals(hostaddress)){\n    \t\tEnumeration<NetworkInterface> netInterfaces = null;\n            try {\n                netInterfaces = NetworkInterface.getNetworkInterfaces();\n                while (netInterfaces.hasMoreElements()) {\n                    NetworkInterface ni = netInterfaces.nextElement();\n                    Enumeration<InetAddress> ips = ni.getInetAddresses();\n                    while (ips.hasMoreElements()) {\n                        InetAddress ip = ips.nextElement();\n                        if (ip.isSiteLocalAddress()) {\n                        \thostaddress = ip.getHostAddress();\n                        }\n                    }\n                }\n            } catch (Throwable e) {\n            \tSolrException.log(log, \"Error while looking for a better host name than 127.0.0.1\", e);\n            }\n    \t}\n    \thost = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      host = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6c576ca9eb0e2a5b5e45cc8a3165beea4337515","date":1353364925,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress = InetAddress.getLocalHost().getHostAddress();\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n    \tString hostaddress = InetAddress.getLocalHost().getHostAddress();\n    \t//Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts file is right.\n    \tif(\"127.0.0.1\".equals(hostaddress)){\n    \t\tEnumeration<NetworkInterface> netInterfaces = null;\n            try {\n                netInterfaces = NetworkInterface.getNetworkInterfaces();\n                while (netInterfaces.hasMoreElements()) {\n                    NetworkInterface ni = netInterfaces.nextElement();\n                    Enumeration<InetAddress> ips = ni.getInetAddresses();\n                    while (ips.hasMoreElements()) {\n                        InetAddress ip = ips.nextElement();\n                        if (ip.isSiteLocalAddress()) {\n                        \thostaddress = ip.getHostAddress();\n                        }\n                    }\n                }\n            } catch (Throwable e) {\n            \tSolrException.log(log, \"Error while looking for a better host name than 127.0.0.1\", e);\n            }\n    \t}\n    \thost = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","70be52aa23e04171e79e9918269c556d3e70ea2f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress = InetAddress.getLocalHost().getHostAddress();\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      host = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70be52aa23e04171e79e9918269c556d3e70ea2f","date":1356542326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress = InetAddress.getLocalHost().getHostAddress();\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":["c6c576ca9eb0e2a5b5e45cc8a3165beea4337515"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress = InetAddress.getLocalHost().getHostAddress();\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6082f533a84637c4757205c7410339c7afbc8d6d","date":1367003431,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9d31fcebe090a8792e9ec09634c3671ef6a847","date":1388069791,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (!m.matches()) {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        host = prefix + host;\n      } else {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (!m.matches()) {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Throwable e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (!m.matches()) {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":["c6c576ca9eb0e2a5b5e45cc8a3165beea4337515"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if(URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (!m.matches()) {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","70be52aa23e04171e79e9918269c556d3e70ea2f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"407687e67faf6e1f02a211ca078d8e3eed631027":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6","c6c576ca9eb0e2a5b5e45cc8a3165beea4337515"],"a396bec04b487ba533a30e6adc6f724f43017279":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6082f533a84637c4757205c7410339c7afbc8d6d":["70be52aa23e04171e79e9918269c556d3e70ea2f"],"70be52aa23e04171e79e9918269c556d3e70ea2f":["c6c576ca9eb0e2a5b5e45cc8a3165beea4337515"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"8a9d31fcebe090a8792e9ec09634c3671ef6a847":["6082f533a84637c4757205c7410339c7afbc8d6d"],"c6c576ca9eb0e2a5b5e45cc8a3165beea4337515":["a396bec04b487ba533a30e6adc6f724f43017279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["8a9d31fcebe090a8792e9ec09634c3671ef6a847"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","a396bec04b487ba533a30e6adc6f724f43017279"],"a396bec04b487ba533a30e6adc6f724f43017279":["c6c576ca9eb0e2a5b5e45cc8a3165beea4337515"],"70be52aa23e04171e79e9918269c556d3e70ea2f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6082f533a84637c4757205c7410339c7afbc8d6d"],"6082f533a84637c4757205c7410339c7afbc8d6d":["8a9d31fcebe090a8792e9ec09634c3671ef6a847"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a9d31fcebe090a8792e9ec09634c3671ef6a847":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"c6c576ca9eb0e2a5b5e45cc8a3165beea4337515":["407687e67faf6e1f02a211ca078d8e3eed631027","70be52aa23e04171e79e9918269c556d3e70ea2f"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}