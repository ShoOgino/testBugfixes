{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","pathOld":"/dev/null","sourceNew":"  /** Only called in the 1D case, to pull a partition back into heap once\n   *  the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength);\n       PointReader reader = source.writer.getReader(source.start);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","sourceNew":"  /** Only called in the 1D case, to pull a partition back into heap once\n   *  the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds);\n       PointReader reader = source.writer.getReader(source.start);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    }\n  }\n\n","sourceOld":"  /** Only called in the 1D case, to pull a partition back into heap once\n   *  the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength);\n       PointReader reader = source.writer.getReader(source.start);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds);\n       PointReader reader = source.writer.getReader(source.start, source.count);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Only called in the 1D case, to pull a partition back into heap once\n   *  the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds);\n       PointReader reader = source.writer.getReader(source.start);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc);\n       PointReader reader = source.writer.getReader(source.start, source.count);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds);\n       PointReader reader = source.writer.getReader(source.start, source.count);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source) throws IOException {\n    int count = Math.toIntExact(source.count);\n    try (\n       PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc);\n       PointReader reader = source.writer.getReader(source.start, source.count);\n       ) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n\n      // Dead code but javac disagrees:\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"]},"commit2Childs":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["950b7a6881d14da782b60444c11295e3ec50d41a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"950b7a6881d14da782b60444c11295e3ec50d41a":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}