{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testHangOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexes(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(5).setMergePolicy(lmp));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(lmp));\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}