{"path":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","commits":[{"id":"db318054409ed0abffd7a36b3f0ac61693f45684","date":1351009122,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      }\n      else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = 1; // TODO : derive score from query\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      }\n      else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = 1; // TODO : derive score from query\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8e3a945180659ef49c6b1e7eeb48083fb72c30","date":1351618892,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      } else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = classCounts.get(assignedClass) / k;\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","sourceOld":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      }\n      else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = 1; // TODO : derive score from query\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39b0cc5b5160a93dfce24d5a5c682058dd31c07c","date":1351618957,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      } else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = max / k;\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","sourceOld":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      } else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = classCounts.get(assignedClass) / k;\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea256c5290971ea9db5a3dab42c4b8d9662e513a","date":1354022529,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      } else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = max / k;\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs docs = indexSearcher.search(q, k);\n\n    // TODO : improve the nearest neighbor selection\n    Map<String, Integer> classCounts = new HashMap<String, Integer>();\n    for (ScoreDoc scoreDoc : docs.scoreDocs) {\n      String cl = indexSearcher.doc(scoreDoc.doc).getField(classFieldName).stringValue();\n      Integer count = classCounts.get(cl);\n      if (count != null) {\n        classCounts.put(cl, count + 1);\n      } else {\n        classCounts.put(cl, 1);\n      }\n    }\n    int max = 0;\n    String assignedClass = null;\n    for (String cl : classCounts.keySet()) {\n      Integer count = classCounts.get(cl);\n      if (count > max) {\n        max = count;\n        assignedClass = cl;\n      }\n    }\n    double score = max / k;\n    return new ClassificationResult(assignedClass, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d70dbb6b688e5d00fdf510da452291910f5efa4","date":1357228093,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6965197f9fe6d03eb332e2bd4e44e905f83f83d","date":1365412474,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train first\");\n    }\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train first\");\n    }\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q;\n    if (query != null) {\n      Query mltQuery = mlt.like(new StringReader(text), textFieldName);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(mltQuery, BooleanClause.Occur.MUST);\n      q = bq;\n    } else {\n      q = mlt.like(new StringReader(text), textFieldName);\n    }\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q = mlt.like(new StringReader(text), textFieldName);\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","date":1383406909,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q;\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(new StringReader(text), textFieldName), BooleanClause.Occur.SHOULD));\n    }\n    if (query != null) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(mltQuery, BooleanClause.Occur.MUST);\n      q = bq;\n    } else {\n      q = mltQuery;\n    }\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q;\n    if (query != null) {\n      Query mltQuery = mlt.like(new StringReader(text), textFieldName);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(mltQuery, BooleanClause.Occur.MUST);\n      q = bq;\n    } else {\n      q = mlt.like(new StringReader(text), textFieldName);\n    }\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec","date":1384175856,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(new StringReader(text), textFieldName), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs topDocs = indexSearcher.search(mltQuery, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Query q;\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(new StringReader(text), textFieldName), BooleanClause.Occur.SHOULD));\n    }\n    if (query != null) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(mltQuery, BooleanClause.Occur.MUST);\n      q = bq;\n    } else {\n      q = mltQuery;\n    }\n    TopDocs topDocs = indexSearcher.search(q, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","ea256c5290971ea9db5a3dab42c4b8d9662e513a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4c215b0bf13f9a31643569e356468a5f1aee809","date":1401781915,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs topDocs = indexSearcher.search(mltQuery, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(new StringReader(text), textFieldName), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs topDocs = indexSearcher.search(mltQuery, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7533828cbcc5f498a44cca5d9bce92692663778","date":1408525002,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs topDocs=knnSearcher(text);\n    List<ClassificationResult<BytesRef>> doclist=buildListFromTopDocs(topDocs);\n    ClassificationResult<BytesRef> retval=null;\n    double maxscore=-Double.MAX_VALUE;\n    for(ClassificationResult<BytesRef> element:doclist){\n      if(element.getScore()>maxscore){\n        retval=element;\n        maxscore=element.getScore();\n      }\n    }\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    TopDocs topDocs = indexSearcher.search(mltQuery, k);\n    return selectClassFromNeighbors(topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0","date":1415781602,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs topDocs = knnSearch(text);\n    List<ClassificationResult<BytesRef>> doclist = buildListFromTopDocs(topDocs);\n    ClassificationResult<BytesRef> retval = null;\n    double maxscore = -Double.MAX_VALUE;\n    for (ClassificationResult<BytesRef> element : doclist) {\n      if (element.getScore() > maxscore) {\n        retval = element;\n        maxscore = element.getScore();\n      }\n    }\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs topDocs=knnSearcher(text);\n    List<ClassificationResult<BytesRef>> doclist=buildListFromTopDocs(topDocs);\n    ClassificationResult<BytesRef> retval=null;\n    double maxscore=-Double.MAX_VALUE;\n    for(ClassificationResult<BytesRef> element:doclist){\n      if(element.getScore()>maxscore){\n        retval=element;\n        maxscore=element.getScore();\n      }\n    }\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8","date":1438605505,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs knnResults = knnSearch(text);\n    List<ClassificationResult<BytesRef>> assignedClasses = buildListFromTopDocs(knnResults);\n    ClassificationResult<BytesRef> assignedClass = null;\n    double maxscore = -Double.MAX_VALUE;\n    for (ClassificationResult<BytesRef> cl : assignedClasses) {\n      if (cl.getScore() > maxscore) {\n        assignedClass = cl;\n        maxscore = cl.getScore();\n      }\n    }\n    return assignedClass;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs topDocs = knnSearch(text);\n    List<ClassificationResult<BytesRef>> doclist = buildListFromTopDocs(topDocs);\n    ClassificationResult<BytesRef> retval = null;\n    double maxscore = -Double.MAX_VALUE;\n    for (ClassificationResult<BytesRef> element : doclist) {\n      if (element.getScore() > maxscore) {\n        retval = element;\n        maxscore = element.getScore();\n      }\n    }\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"337e2370afdc2749c6bffbcd57dd4d62fd63fe5d","date":1491900276,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs knnResults = knnSearch(text);\n    List<ClassificationResult<BytesRef>> assignedClasses = buildListFromTopDocs(knnResults);\n    ClassificationResult<BytesRef> assignedClass = null;\n    double maxscore = -Double.MAX_VALUE;\n    for (ClassificationResult<BytesRef> cl : assignedClasses) {\n      if (cl.getScore() > maxscore) {\n        assignedClass = cl;\n        maxscore = cl.getScore();\n      }\n    }\n    return assignedClass;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    TopDocs knnResults = knnSearch(text);\n    List<ClassificationResult<BytesRef>> assignedClasses = buildListFromTopDocs(knnResults);\n    ClassificationResult<BytesRef> assignedClass = null;\n    double maxscore = -Double.MAX_VALUE;\n    for (ClassificationResult<BytesRef> cl : assignedClasses) {\n      if (cl.getScore() > maxscore) {\n        assignedClass = cl;\n        maxscore = cl.getScore();\n      }\n    }\n    return assignedClass;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<BytesRef> assignClass(String text) throws IOException {\n    return classifyFromTopDocs(knnSearch(text));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","1d70dbb6b688e5d00fdf510da452291910f5efa4"],"b94236357aaa22b76c10629851fe4e376e0cea82":["337e2370afdc2749c6bffbcd57dd4d62fd63fe5d","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"ea256c5290971ea9db5a3dab42c4b8d9662e513a":["39b0cc5b5160a93dfce24d5a5c682058dd31c07c"],"39b0cc5b5160a93dfce24d5a5c682058dd31c07c":["9c8e3a945180659ef49c6b1e7eeb48083fb72c30"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["337e2370afdc2749c6bffbcd57dd4d62fd63fe5d"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["c3b2d9bc464ed9ae5113f93c943d3954ee6078e0"],"407687e67faf6e1f02a211ca078d8e3eed631027":["39b0cc5b5160a93dfce24d5a5c682058dd31c07c","ea256c5290971ea9db5a3dab42c4b8d9662e513a"],"db318054409ed0abffd7a36b3f0ac61693f45684":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["45ae8f6354b0826d27014deff71fe330604a9783"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"45ae8f6354b0826d27014deff71fe330604a9783":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["1d70dbb6b688e5d00fdf510da452291910f5efa4"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db318054409ed0abffd7a36b3f0ac61693f45684"],"e7533828cbcc5f498a44cca5d9bce92692663778":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"337e2370afdc2749c6bffbcd57dd4d62fd63fe5d":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"1d70dbb6b688e5d00fdf510da452291910f5efa4":["ea256c5290971ea9db5a3dab42c4b8d9662e513a"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"9c8e3a945180659ef49c6b1e7eeb48083fb72c30":["db318054409ed0abffd7a36b3f0ac61693f45684"],"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0":["e7533828cbcc5f498a44cca5d9bce92692663778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea256c5290971ea9db5a3dab42c4b8d9662e513a":["407687e67faf6e1f02a211ca078d8e3eed631027","1d70dbb6b688e5d00fdf510da452291910f5efa4"],"39b0cc5b5160a93dfce24d5a5c682058dd31c07c":["ea256c5290971ea9db5a3dab42c4b8d9662e513a","407687e67faf6e1f02a211ca078d8e3eed631027"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","337e2370afdc2749c6bffbcd57dd4d62fd63fe5d"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"db318054409ed0abffd7a36b3f0ac61693f45684":["62e52115b56781006682fd92c6938efaf174304d","9c8e3a945180659ef49c6b1e7eeb48083fb72c30"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"45ae8f6354b0826d27014deff71fe330604a9783":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["45ae8f6354b0826d27014deff71fe330604a9783"],"62e52115b56781006682fd92c6938efaf174304d":[],"e7533828cbcc5f498a44cca5d9bce92692663778":["c3b2d9bc464ed9ae5113f93c943d3954ee6078e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db318054409ed0abffd7a36b3f0ac61693f45684","62e52115b56781006682fd92c6938efaf174304d"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["e7533828cbcc5f498a44cca5d9bce92692663778"],"337e2370afdc2749c6bffbcd57dd4d62fd63fe5d":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"1d70dbb6b688e5d00fdf510da452291910f5efa4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"9c8e3a945180659ef49c6b1e7eeb48083fb72c30":["39b0cc5b5160a93dfce24d5a5c682058dd31c07c"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}