{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene410DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (type == Lucene410DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene410DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene410DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene410DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        numerics.put(info.name, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene410DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (type == Lucene410DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene410DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene410DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene410DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        numerics.put(info.name, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene410DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (type == Lucene410DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene410DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene410DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene410DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        numerics.put(info.name, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene410DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (type == Lucene410DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene410DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene410DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene410DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        numerics.put(info.name, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene410DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(meta));\n      } else if (type == Lucene410DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene410DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene410DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene410DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        numerics.put(info.name, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}