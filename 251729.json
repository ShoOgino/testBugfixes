{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","commits":[{"id":"96f6862293dd05eceeb03760bbb8ffcb604c6e80","date":1379186543,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b89f9365dec76fdc0fc53acb3664f3502497a07","date":1379201945,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, Type.DOUBLE_TYPE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, Type.DOUBLE_TYPE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      ParseTree parseTree = getAntlrParseTree();\n\n      beginCompile();\n      internalCompile(parseTree);\n      endCompile();\n      \n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, Type.DOUBLE_TYPE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c46fed43ef19dd63a005bf3a81d5e0d0f884268","date":1439122230,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    final Map<String, Integer> externalsMap = new LinkedHashMap<>();\n    final ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n    \n    generateClass(getAntlrParseTree(), classWriter, externalsMap);\n    \n    try {\n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (ReflectiveOperationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      ParseTree parseTree = getAntlrParseTree();\n\n      beginCompile();\n      internalCompile(parseTree);\n      endCompile();\n      \n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d","date":1495118387,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    final Map<String, Integer> externalsMap = new LinkedHashMap<>();\n    final ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n\n    try {\n      generateClass(getAntlrParseTree(), classWriter, externalsMap);\n\n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (RuntimeException re) {\n      if (re.getCause() instanceof ParseException) {\n        throw (ParseException)re.getCause();\n      }\n      throw re;\n    } catch (ReflectiveOperationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    final Map<String, Integer> externalsMap = new LinkedHashMap<>();\n    final ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n    \n    generateClass(getAntlrParseTree(), classWriter, externalsMap);\n    \n    try {\n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (ReflectiveOperationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    final Map<String, Integer> externalsMap = new LinkedHashMap<>();\n    final ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n\n    try {\n      generateClass(getAntlrParseTree(), classWriter, externalsMap);\n\n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (RuntimeException re) {\n      if (re.getCause() instanceof ParseException) {\n        throw (ParseException)re.getCause();\n      }\n      throw re;\n    } catch (ReflectiveOperationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    final Map<String, Integer> externalsMap = new LinkedHashMap<>();\n    final ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n    \n    generateClass(getAntlrParseTree(), classWriter, externalsMap);\n    \n    try {\n      final Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      final Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (ReflectiveOperationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2c46fed43ef19dd63a005bf3a81d5e0d0f884268","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"d23d4828afa583ebf35b4a541763af6206133458":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c46fed43ef19dd63a005bf3a81d5e0d0f884268":["d23d4828afa583ebf35b4a541763af6206133458"],"3b89f9365dec76fdc0fc53acb3664f3502497a07":["96f6862293dd05eceeb03760bbb8ffcb604c6e80"],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["2c46fed43ef19dd63a005bf3a81d5e0d0f884268"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b89f9365dec76fdc0fc53acb3664f3502497a07"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d23d4828afa583ebf35b4a541763af6206133458":["2c46fed43ef19dd63a005bf3a81d5e0d0f884268"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96f6862293dd05eceeb03760bbb8ffcb604c6e80","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["3b89f9365dec76fdc0fc53acb3664f3502497a07"],"2c46fed43ef19dd63a005bf3a81d5e0d0f884268":["e9017cf144952056066919f1ebc7897ff9bd71b1","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"3b89f9365dec76fdc0fc53acb3664f3502497a07":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}