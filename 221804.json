{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(state.getBoost(), numTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(state.getBoost(), numTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(numTerms);\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(state.getBoost(), numTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    int indexCreatedVersionMajor = state.getIndexCreatedVersionMajor();\n    if (indexCreatedVersionMajor >= 7) {\n      return SmallFloat.intToByte4(numTerms);\n    } else {\n      return SmallFloat.floatToByte315((float) (1 / Math.sqrt(numTerms)));\n    }\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(numTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    int indexCreatedVersionMajor = state.getIndexCreatedVersionMajor();\n    if (indexCreatedVersionMajor >= 7) {\n      return SmallFloat.intToByte4(numTerms);\n    } else {\n      return SmallFloat.floatToByte315((float) (1 / Math.sqrt(numTerms)));\n    }\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return encodeNormValue(numTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return SmallFloat.intToByte4(numTerms);\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    int indexCreatedVersionMajor = state.getIndexCreatedVersionMajor();\n    if (indexCreatedVersionMajor >= 7) {\n      return SmallFloat.intToByte4(numTerms);\n    } else {\n      return SmallFloat.floatToByte315((float) (1 / Math.sqrt(numTerms)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return SmallFloat.intToByte4(numTerms);\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    int indexCreatedVersionMajor = state.getIndexCreatedVersionMajor();\n    if (indexCreatedVersionMajor >= 7) {\n      return SmallFloat.intToByte4(numTerms);\n    } else {\n      return SmallFloat.floatToByte315((float) (1 / Math.sqrt(numTerms)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return SmallFloat.intToByte4(numTerms);\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    int indexCreatedVersionMajor = state.getIndexCreatedVersionMajor();\n    if (indexCreatedVersionMajor >= 7) {\n      return SmallFloat.intToByte4(numTerms);\n    } else {\n      return SmallFloat.floatToByte315((float) (1 / Math.sqrt(numTerms)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms;\n    if (state.getIndexOptions() == IndexOptions.DOCS && state.getIndexCreatedVersionMajor() >= 8) {\n      numTerms = state.getUniqueTermCount();\n    } else if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return SmallFloat.intToByte4(numTerms);\n  }\n\n","sourceOld":"  @Override\n  public final long computeNorm(FieldInvertState state) {\n    final int numTerms = discountOverlaps ? state.getLength() - state.getNumOverlap() : state.getLength();\n    return SmallFloat.intToByte4(numTerms);\n  }\n\n","bugFix":["0837ab0472feecb3a54260729d845f839e1cbd72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0837ab0472feecb3a54260729d845f839e1cbd72"],"5a4bb2b5569a925d9d26743041864893512a7958":["cc018b79379c67835b40b1259cd3dc931df60944"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["615370d2b876c3435773b5174df2e2242ad7981a","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944"],"acd9883560fd89e6448b2b447302fe543040cd4f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a4bb2b5569a925d9d26743041864893512a7958"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"5a4bb2b5569a925d9d26743041864893512a7958":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc018b79379c67835b40b1259cd3dc931df60944":["5a4bb2b5569a925d9d26743041864893512a7958","30c8e5574b55d57947e989443dfde611646530ee"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"30c8e5574b55d57947e989443dfde611646530ee":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}