{"path":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"/dev/null","sourceNew":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97358022f8fb21ca48fc5f2eb205c98a484e2174","date":1255525101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field, docFields[i], Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    // Make big index\n    dir2 = new MockRAMDirectory(directory);\n\n    // First multiply small test index:\n    mulFactor = 1;\n    int docCount = 0;\n    do {\n      final Directory copy = new RAMDirectory(dir2);\n      IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.addIndexesNoOptimize(new Directory[] {copy});\n      docCount = w.maxDoc();\n      w.close();\n      mulFactor *= 2;\n    } while(docCount < 3000);\n\n    IndexWriter w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field2\", \"xxx\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    doc = new Document();\n    doc.add(new Field(\"field2\", \"big bad bug\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<NUM_EXTRA_DOCS/2;i++) {\n      w.addDocument(doc);\n    }\n    // optimize to 1 segment\n    w.optimize();\n    reader = w.getReader();\n    w.close();\n    bigSearcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"97358022f8fb21ca48fc5f2eb205c98a484e2174":["0a046c0c310bc77931fc8441bd920053b607dd14"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"97358022f8fb21ca48fc5f2eb205c98a484e2174":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}