{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimple() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), false);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), false);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), false);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745","6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimple() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), false);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), false);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), false);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimple() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), false);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), false);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), false);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, 0, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testSimple().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimple() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), false);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), false);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), false);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    Assert.assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimple() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), false);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), false);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), false);\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \"xml$\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath());\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), null, Context.FULL_DUMP, Collections.EMPTY_LIST, attrs);\n    FileListEntityProcessor fileListEntityProcessor = new FileListEntityProcessor();\n    fileListEntityProcessor.init(c);\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = fileListEntityProcessor.nextRow();\n      if (f == null)\n        break;\n      fList.add((String) f.get(FileListEntityProcessor.ABSOLUTE_FILE));\n    }\n    Assert.assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}