{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int).mjava","sourceNew":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @return a mutable packed integer array.\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(\n         int valueCount, int bitsPerValue) {\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(valueCount);\n    case 16:\n      return new Direct16(valueCount);\n    case 32:\n      return new Direct32(valueCount);\n    case 64:\n      return new Direct64(valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(valueCount, bitsPerValue);\n      } else {\n        return new Packed32(valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @return a mutable packed integer array.\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(\n         int valueCount, int bitsPerValue) {\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(valueCount);\n    case 16:\n      return new Direct16(valueCount);\n    case 32:\n      return new Direct32(valueCount);\n    case 64:\n      return new Direct64(valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(valueCount, bitsPerValue);\n      } else {\n        return new Packed32(valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a packed integer array with the given amount of values initialized\n   * to 0. the valueCount and the bitsPerValue cannot be changed after creation.\n   * All Mutables known by this factory are kept fully in RAM.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @return a mutable packed integer array.\n   * @throws java.io.IOException if the Mutable could not be created. With the\n   *         current implementations, this never happens, but the method\n   *         signature allows for future persistence-backed Mutables.\n   * @lucene.internal\n   */\n  public static Mutable getMutable(\n         int valueCount, int bitsPerValue) {\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(valueCount);\n    case 16:\n      return new Direct16(valueCount);\n    case 32:\n      return new Direct32(valueCount);\n    case 64:\n      return new Direct64(valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(valueCount, bitsPerValue);\n      } else {\n        return new Packed32(valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}