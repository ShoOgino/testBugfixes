{"path":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":null,"sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"785874eb2974c69e70dcb66012e5890c297d2e2f","date":1293238754,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":null,"sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":null,"sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_05_buildDictionary().mjava","sourceNew":null,"sourceOld":"  public void testSpellCheck_05_buildDictionary() {\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertU(\"Add some words to the Spell Check Index:\",\n      adoc(\"id\",  \"100\",\n             \"spell\", \"solr cat cart\"));\n    assertU(adoc(\"id\",  \"101\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"102\",\n                   \"spell\", \"cat cart\"));\n    assertU(adoc(\"id\",  \"103\",\n                   \"spell\", \"cat cart carp\"));\n    assertU(adoc(\"id\",  \"104\",\n                   \"spell\", \"cat car cant\"));\n    assertU(adoc(\"id\",  \"105\",\n                   \"spell\", \"cat catnip\"));\n    assertU(adoc(\"id\",  \"106\",\n                   \"spell\", \"cat cattails\"));\n    assertU(adoc(\"id\",  \"107\",\n                   \"spell\", \"cat cod\"));\n    assertU(adoc(\"id\",  \"108\",\n                   \"spell\", \"cat corn\"));\n    assertU(adoc(\"id\",  \"109\",\n                   \"spell\", \"cat cot\"));\n    assertU(commit());\n    assertU(optimize());\n\n    lrf.args.put(\"sp.dictionary.threshold\", \"0.20\");\n    lrf.args.put(\"cmd\",\"rebuild\");\n    assertQ(\"Need to first build the index:\",\n            req(\"cat\")\n            ,\"//str[@name='cmdExecuted'][.='rebuild']\"\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.clear();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cart\")\n            ,\"//str[@name='words'][.='cart']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"cod\")\n            ,\"//str[@name='words'][.='cod']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    assertQ(\"Confirm index contains only words above threshold\",\n            req(\"corn\")\n            ,\"//str[@name='words'][.='corn']\"\n            ,\"//str[@name='exist'][.='false']\"\n            );\n\n    lrf.args.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","785874eb2974c69e70dcb66012e5890c297d2e2f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","785874eb2974c69e70dcb66012e5890c297d2e2f"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"785874eb2974c69e70dcb66012e5890c297d2e2f":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["785874eb2974c69e70dcb66012e5890c297d2e2f"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","785874eb2974c69e70dcb66012e5890c297d2e2f"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"785874eb2974c69e70dcb66012e5890c297d2e2f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}