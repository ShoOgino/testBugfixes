{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder multiWordExpandedBqBuilder = new BooleanQuery.Builder();\n    Query multiWordSynonymQuery = new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\"));\n    multiWordExpandedBqBuilder.add(multiWordSynonymQuery, BooleanClause.Occur.SHOULD);\n    multiWordExpandedBqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    Query multiWordExpandedBq = multiWordExpandedBqBuilder.build();\n    assertEquals(multiWordExpandedBq, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a multiphrase query.\n    // When the number of expanded term(s) is different from that of the original term(s), this is not good.\n    MultiPhraseQuery.Builder multiWordExpandedMpqBuilder = new MultiPhraseQuery.Builder();\n    multiWordExpandedMpqBuilder.add(new Term[]{new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")});\n    multiWordExpandedMpqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordExpandedMPQ = multiWordExpandedMpqBuilder.build();\n    assertEquals(multiWordExpandedMPQ, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    assertEquals(multiWordExpandedBq, smart.parse(\"guinea pig\"));\n\n    PhraseQuery.Builder multiWordUnexpandedPqBuilder = new PhraseQuery.Builder();\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"guinea\"));\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordUnexpandedPq = multiWordUnexpandedPqBuilder.build();\n    assertEquals(multiWordUnexpandedPq, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder multiWordExpandedBqBuilder = new BooleanQuery.Builder();\n    Query multiWordSynonymQuery = new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\"));\n    multiWordExpandedBqBuilder.add(multiWordSynonymQuery, BooleanClause.Occur.SHOULD);\n    multiWordExpandedBqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    Query multiWordExpandedBq = multiWordExpandedBqBuilder.build();\n    assertEquals(multiWordExpandedBq, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a multiphrase query.\n    // When the number of expanded term(s) is different from that of the original term(s), this is not good.\n    MultiPhraseQuery.Builder multiWordExpandedMpqBuilder = new MultiPhraseQuery.Builder();\n    multiWordExpandedMpqBuilder.add(new Term[]{new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")});\n    multiWordExpandedMpqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordExpandedMPQ = multiWordExpandedMpqBuilder.build();\n    assertEquals(multiWordExpandedMPQ, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    assertEquals(multiWordExpandedBq, smart.parse(\"guinea pig\"));\n\n    PhraseQuery.Builder multiWordUnexpandedPqBuilder = new PhraseQuery.Builder();\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"guinea\"));\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordUnexpandedPq = multiWordUnexpandedPqBuilder.build();\n    assertEquals(multiWordUnexpandedPq, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.\n    PhraseQuery.Builder phraseSynonym = new PhraseQuery.Builder();\n    phraseSynonym.add(new Term(\"field\", \"guinea\"));\n    phraseSynonym.add(new Term(\"field\", \"pig\"));\n    PhraseQuery guineaPigPhrase = phraseSynonym.build();\n\n    graphQuery = new GraphQuery(guineaPigPhrase, cavy);\n    assertEquals(graphQuery, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(guineaPigPhrase, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder multiWordExpandedBqBuilder = new BooleanQuery.Builder();\n    Query multiWordSynonymQuery = new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\"));\n    multiWordExpandedBqBuilder.add(multiWordSynonymQuery, BooleanClause.Occur.SHOULD);\n    multiWordExpandedBqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    Query multiWordExpandedBq = multiWordExpandedBqBuilder.build();\n    assertEquals(multiWordExpandedBq, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a multiphrase query.\n    // When the number of expanded term(s) is different from that of the original term(s), this is not good.\n    MultiPhraseQuery.Builder multiWordExpandedMpqBuilder = new MultiPhraseQuery.Builder();\n    multiWordExpandedMpqBuilder.add(new Term[]{new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")});\n    multiWordExpandedMpqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordExpandedMPQ = multiWordExpandedMpqBuilder.build();\n    assertEquals(multiWordExpandedMPQ, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    assertEquals(multiWordExpandedBq, smart.parse(\"guinea pig\"));\n\n    PhraseQuery.Builder multiWordUnexpandedPqBuilder = new PhraseQuery.Builder();\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"guinea\"));\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordUnexpandedPq = multiWordUnexpandedPqBuilder.build();\n    assertEquals(multiWordUnexpandedPq, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.\n    PhraseQuery.Builder phraseSynonym = new PhraseQuery.Builder();\n    phraseSynonym.add(new Term(\"field\", \"guinea\"));\n    phraseSynonym.add(new Term(\"field\", \"pig\"));\n    PhraseQuery guineaPigPhrase = phraseSynonym.build();\n\n    graphQuery = new GraphQuery(guineaPigPhrase, cavy);\n    assertEquals(graphQuery, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(guineaPigPhrase, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    // A multi-word synonym source will form a synonym query for the same-starting-position tokens\n    BooleanQuery.Builder multiWordExpandedBqBuilder = new BooleanQuery.Builder();\n    Query multiWordSynonymQuery = new SynonymQuery(new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\"));\n    multiWordExpandedBqBuilder.add(multiWordSynonymQuery, BooleanClause.Occur.SHOULD);\n    multiWordExpandedBqBuilder.add(new TermQuery(new Term(\"field\", \"pig\")), BooleanClause.Occur.SHOULD);\n    Query multiWordExpandedBq = multiWordExpandedBqBuilder.build();\n    assertEquals(multiWordExpandedBq, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a multiphrase query.\n    // When the number of expanded term(s) is different from that of the original term(s), this is not good.\n    MultiPhraseQuery.Builder multiWordExpandedMpqBuilder = new MultiPhraseQuery.Builder();\n    multiWordExpandedMpqBuilder.add(new Term[]{new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\")});\n    multiWordExpandedMpqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordExpandedMPQ = multiWordExpandedMpqBuilder.build();\n    assertEquals(multiWordExpandedMPQ, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    assertEquals(multiWordExpandedBq, smart.parse(\"guinea pig\"));\n\n    PhraseQuery.Builder multiWordUnexpandedPqBuilder = new PhraseQuery.Builder();\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"guinea\"));\n    multiWordUnexpandedPqBuilder.add(new Term(\"field\", \"pig\"));\n    Query multiWordUnexpandedPq = multiWordUnexpandedPqBuilder.build();\n    assertEquals(multiWordUnexpandedPq, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.\n    PhraseQuery.Builder phraseSynonym = new PhraseQuery.Builder();\n    phraseSynonym.add(new Term(\"field\", \"guinea\"));\n    phraseSynonym.add(new Term(\"field\", \"pig\"));\n    PhraseQuery guineaPigPhrase = phraseSynonym.build();\n\n    graphQuery = new GraphQuery(guineaPigPhrase, cavy);\n    assertEquals(graphQuery, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(guineaPigPhrase, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.SHOULD);\n    synonym.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.\n    PhraseQuery.Builder phraseSynonym = new PhraseQuery.Builder();\n    phraseSynonym.add(new Term(\"field\", \"guinea\"));\n    phraseSynonym.add(new Term(\"field\", \"pig\"));\n    PhraseQuery guineaPigPhrase = phraseSynonym.build();\n\n    graphQuery = new GraphQuery(guineaPigPhrase, cavy);\n    assertEquals(graphQuery, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(guineaPigPhrase, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79fd791e91f49ce8026885d7b8ac62bee4c8126","date":1487768721,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.\n    PhraseQuery.Builder phraseSynonym = new PhraseQuery.Builder();\n    phraseSynonym.add(new Term(\"field\", \"guinea\"));\n    phraseSynonym.add(new Term(\"field\", \"pig\"));\n    PhraseQuery guineaPigPhrase = phraseSynonym.build();\n\n    graphQuery = new GraphQuery(guineaPigPhrase, cavy);\n    assertEquals(graphQuery, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(guineaPigPhrase, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4408f3223cc4586cae91dc945fefb692e411d6d","date":1487771345,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    GraphQuery graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new GraphQuery(guineaPig, cavy);\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d5f9da379ac10a8ebcbf30e00314c561652932b","date":1497616966,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n\n    // with the AND operator\n    dumb.setDefaultOperator(Operator.AND);\n    BooleanQuery graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig\"));\n\n    graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .add(cavy, BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig cavy\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n\n    // with the AND operator\n    dumb.setDefaultOperator(Operator.AND);\n    BooleanQuery graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig\"));\n\n    graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .add(cavy, BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig cavy\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n\n    // with the AND operator\n    dumb.setDefaultOperator(Operator.AND);\n    BooleanQuery graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig\"));\n\n    graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .add(cavy, BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig cavy\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(guineaPig, BooleanClause.Occur.SHOULD)\n        .add(cavy, BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testMultiWordSynonyms().mjava","sourceNew":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    Query synonyms = new BooleanQuery.Builder()\n        .add(new PhraseQuery(\"field\", \"guinea\", \"pig\"), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(synonyms, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n\n    // with the AND operator\n    dumb.setDefaultOperator(Operator.AND);\n    BooleanQuery graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig\"));\n\n    graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .add(cavy, BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig cavy\"));\n  }\n\n","sourceOld":"  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability\n  public void testMultiWordSynonyms() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n\n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will form a graph query for synonyms that formed the graph token stream\n    BooleanQuery.Builder synonym = new BooleanQuery.Builder();\n    synonym.add(guinea, BooleanClause.Occur.MUST);\n    synonym.add(pig, BooleanClause.Occur.MUST);\n    BooleanQuery guineaPig = synonym.build();\n\n    PhraseQuery phraseGuineaPig = new PhraseQuery.Builder()\n        .add(new Term(\"field\", \"guinea\"))\n        .add(new Term(\"field\", \"pig\"))\n        .build();\n\n    BooleanQuery graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, dumb.parse(\"guinea pig\"));\n\n    // With the phrase operator, a multi-word synonym source will form span near queries.\n    SpanNearQuery spanGuineaPig = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n    SpanTermQuery spanCavy = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n    SpanOrQuery spanPhrase = new SpanOrQuery(new SpanQuery[]{spanGuineaPig, spanCavy});\n    assertEquals(spanPhrase, dumb.parse(\"\\\"guinea pig\\\"\"));\n\n    // custom behavior, the synonyms are expanded, unless you use quote operator\n    QueryParser smart = new SmartQueryParser();\n    smart.setSplitOnWhitespace(false);\n    graphQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    assertEquals(graphQuery, smart.parse(\"guinea pig\"));\n    assertEquals(phraseGuineaPig, smart.parse(\"\\\"guinea pig\\\"\"));\n\n    // with the AND operator\n    dumb.setDefaultOperator(Operator.AND);\n    BooleanQuery graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig\"));\n\n    graphAndQuery = new BooleanQuery.Builder()\n        .add(new BooleanQuery.Builder()\n            .add(guineaPig, BooleanClause.Occur.SHOULD)\n            .add(cavy, BooleanClause.Occur.SHOULD)\n            .build(), BooleanClause.Occur.MUST)\n        .add(cavy, BooleanClause.Occur.MUST)\n        .build();\n    assertEquals(graphAndQuery, dumb.parse(\"guinea pig cavy\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["28288370235ed02234a64753cdbf0c6ec096304a"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c30617998e1bc2a946cc226f52e9b35162b1e"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4408f3223cc4586cae91dc945fefb692e411d6d":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"]},"commit2Childs":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["e52c30617998e1bc2a946cc226f52e9b35162b1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b4408f3223cc4586cae91dc945fefb692e411d6d":["28288370235ed02234a64753cdbf0c6ec096304a","8d5f9da379ac10a8ebcbf30e00314c561652932b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}