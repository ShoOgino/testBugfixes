{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2bb63895ca073f3dd391391e8d92389e0e410c","date":1353023762,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, flags);\n      writeBoost = false; // we don't use the boost on wrapped queries\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, flags);\n      writeBoost = false; // we don't use the boost on wrapped queries\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    float boost = 1f;\n    if (query instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) query;\n      query = bq.getQuery();\n      boost = bq.getBoost();\n    }\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, flags);\n      writeBoost = false; // we don't use the boost on wrapped queries\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && boost != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(boost));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getBoost() != 1.0 || q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, flags);\n      writeBoost = false; // we don't use the boost on wrapped queries\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && query.getBoost() != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(query.getBoost()));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f1a7c29a86edadf3c447b90ebe9dba6de002447","date":1445455635,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    boolean writeBoost = true;\n\n    float boost = 1f;\n    if (query instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) query;\n      query = bq.getQuery();\n      boost = bq.getBoost();\n    }\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled()) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, flags);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n      writeBoost = false;\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, flags);\n      writeBoost = false; // we don't use the boost on wrapped queries\n    } else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n      writeBoost = false;\n    }\n\n    if (writeBoost && boost != 1.0f) {\n      out.append(\"^\");\n      out.append(Float.toString(boost));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f84d51c90072fcb78a446a4dad288060aca5f94","date":1445549611,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n        boolean wrapQuery = false;\n\n        // TODO: may need to put parens around other types\n        // of queries too, depending on future syntax.\n        if (subQuery instanceof BooleanQuery) {\n          wrapQuery = true;\n        }\n\n        if (wrapQuery) {\n          out.append('(');\n        }\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n        if (wrapQuery) {\n          out.append(')');\n        }\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","bugFix":["32ef722831135736529762b4b97a13dd58b06f66","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof NumericRangeQuery) {\n      NumericRangeQuery q = (NumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || q.isCoordDisabled() || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n      if (q.isCoordDisabled()) {\n        out.append(\"/no_coord\");\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append('^');\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()).append('(').append(query.toString()).append(')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append(\"^\");\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()\n              + '(' + query.toString() + ')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema,Appendable,int).mjava","sourceNew":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      @SuppressWarnings({\"rawtypes\"})\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append('^');\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()).append('(').append(query.toString()).append(')');\n    }\n  }\n\n","sourceOld":"  /**\n   * @see #toString(Query,IndexSchema)\n   */\n  public static void toString(Query query, IndexSchema schema, Appendable out, int flags) throws IOException {\n    int subflag = flags & ~(FLAG_BOOSTED|FLAG_IS_CLAUSE);  // clear the boosted / is clause flags for recursion\n\n    if (query instanceof TermQuery) {\n      TermQuery q = (TermQuery) query;\n      Term t = q.getTerm();\n      FieldType ft = writeFieldName(t.field(), schema, out, flags);\n      writeFieldVal(t.bytes(), ft, out, flags);\n    } else if (query instanceof TermRangeQuery) {\n      TermRangeQuery q = (TermRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesLower() ? '[' : '{');\n      BytesRef lt = q.getLowerTerm();\n      BytesRef ut = q.getUpperTerm();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(lt, ft, out, flags);\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        writeFieldVal(ut, ft, out, flags);\n      }\n\n      out.append(q.includesUpper() ? ']' : '}');\n    } else if (query instanceof LegacyNumericRangeQuery) {\n      LegacyNumericRangeQuery q = (LegacyNumericRangeQuery) query;\n      String fname = q.getField();\n      FieldType ft = writeFieldName(fname, schema, out, flags);\n      out.append(q.includesMin() ? '[' : '{');\n      Number lt = q.getMin();\n      Number ut = q.getMax();\n      if (lt == null) {\n        out.append('*');\n      } else {\n        out.append(lt.toString());\n      }\n\n      out.append(\" TO \");\n\n      if (ut == null) {\n        out.append('*');\n      } else {\n        out.append(ut.toString());\n      }\n\n      out.append(q.includesMax() ? ']' : '}');\n    } else if (query instanceof BooleanQuery) {\n      BooleanQuery q = (BooleanQuery) query;\n      boolean needParens = false;\n\n      if (q.getMinimumNumberShouldMatch() != 0 || (flags & (FLAG_IS_CLAUSE | FLAG_BOOSTED)) != 0 ) {\n        needParens = true;\n      }\n      if (needParens) {\n        out.append('(');\n      }\n      boolean first = true;\n      for (BooleanClause c : q.clauses()) {\n        if (!first) {\n          out.append(' ');\n        } else {\n          first = false;\n        }\n\n        if (c.isProhibited()) {\n          out.append('-');\n        } else if (c.isRequired()) {\n          out.append('+');\n        }\n        Query subQuery = c.getQuery();\n\n        toString(subQuery, schema, out, subflag | FLAG_IS_CLAUSE);\n\n      }\n\n      if (needParens) {\n        out.append(')');\n      }\n      if (q.getMinimumNumberShouldMatch() > 0) {\n        out.append('~');\n        out.append(Integer.toString(q.getMinimumNumberShouldMatch()));\n      }\n\n    } else if (query instanceof PrefixQuery) {\n      PrefixQuery q = (PrefixQuery) query;\n      Term prefix = q.getPrefix();\n      FieldType ft = writeFieldName(prefix.field(), schema, out, flags);\n      out.append(prefix.text());\n      out.append('*');\n    } else if (query instanceof WildcardQuery) {\n      out.append(query.toString());\n    } else if (query instanceof FuzzyQuery) {\n      out.append(query.toString());\n    } else if (query instanceof ConstantScoreQuery) {\n      out.append(query.toString());\n    } else if (query instanceof WrappedQuery) {\n      WrappedQuery q = (WrappedQuery)query;\n      out.append(q.getOptions());\n      toString(q.getWrappedQuery(), schema, out, subflag);\n    } else if (query instanceof BoostQuery) {\n      BoostQuery q = (BoostQuery)query;\n      toString(q.getQuery(), schema, out, subflag | FLAG_BOOSTED);\n      out.append('^');\n      out.append(Float.toString(q.getBoost()));\n    }\n    else {\n      out.append(query.getClass().getSimpleName()).append('(').append(query.toString()).append(')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["c8a0e442f7b61f811680273b25da95994a724466"],"3f1a7c29a86edadf3c447b90ebe9dba6de002447":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"7f2bb63895ca073f3dd391391e8d92389e0e410c":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7f2bb63895ca073f3dd391391e8d92389e0e410c"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["7f2bb63895ca073f3dd391391e8d92389e0e410c"],"770342641f7b505eaa8dccdc666158bff2419109":["7f84d51c90072fcb78a446a4dad288060aca5f94"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","c8a0e442f7b61f811680273b25da95994a724466"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["2ffe681f212e5073c69955b4ad22946794c84940"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["770342641f7b505eaa8dccdc666158bff2419109"],"7f84d51c90072fcb78a446a4dad288060aca5f94":["3f1a7c29a86edadf3c447b90ebe9dba6de002447"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"3f1a7c29a86edadf3c447b90ebe9dba6de002447":["7f84d51c90072fcb78a446a4dad288060aca5f94"],"7f2bb63895ca073f3dd391391e8d92389e0e410c":["407687e67faf6e1f02a211ca078d8e3eed631027","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c26f00b574427b55127e869b935845554afde1fa":["7f2bb63895ca073f3dd391391e8d92389e0e410c","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f1a7c29a86edadf3c447b90ebe9dba6de002447"],"770342641f7b505eaa8dccdc666158bff2419109":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c8a0e442f7b61f811680273b25da95994a724466":["2ffe681f212e5073c69955b4ad22946794c84940","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7f84d51c90072fcb78a446a4dad288060aca5f94":["770342641f7b505eaa8dccdc666158bff2419109"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}