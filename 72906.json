{"path":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  @Deprecated\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  @Deprecated\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"185fc1b7a4272e4ec90c0c3020fa4719fc6115da","date":1293367335,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  @Deprecated\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  @Deprecated\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  @Deprecated\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","185fc1b7a4272e4ec90c0c3020fa4719fc6115da"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","185fc1b7a4272e4ec90c0c3020fa4719fc6115da"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"185fc1b7a4272e4ec90c0c3020fa4719fc6115da":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["185fc1b7a4272e4ec90c0c3020fa4719fc6115da"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","185fc1b7a4272e4ec90c0c3020fa4719fc6115da"],"1da8d55113b689b06716246649de6f62430f15c0":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"185fc1b7a4272e4ec90c0c3020fa4719fc6115da":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}