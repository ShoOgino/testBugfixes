{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(F_WORD_TERM.createTerm(word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      // TODO: we should use ReaderUtil+seekExact, we dont care about the docFreq\n      // this is just an existence check\n      return indexSearcher.getIndexReader().docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      return indexSearcher.docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#exist(String).mjava","sourceNew":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      // TODO: we should use ReaderUtil+seekExact, we dont care about the docFreq\n      // this is just an existence check\n      return indexSearcher.getIndexReader().docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether the word exists in the index.\n   * @param word\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return true if the word exists in the index\n   */\n  public boolean exist(String word) throws IOException {\n    // obtainSearcher calls ensureOpen\n    final IndexSearcher indexSearcher = obtainSearcher();\n    try{\n      // TODO: we should use ReaderUtil+seekExact, we dont care about the docFreq\n      // this is just an existence check\n      return indexSearcher.getIndexReader().docFreq(new Term(F_WORD, word)) > 0;\n    } finally {\n      releaseSearcher(indexSearcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e230a61047bc041516c811baa08a7174d6f8322a","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","d083e83f225b11e5fdd900e83d26ddb385b6955c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}