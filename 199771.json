{"path":"solr/solrj/src/java/org/apache/solr/common/params/ShardParams#getShardsTolerantAsBool(SolrParams).mjava","commits":[{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/ShardParams#getShardsTolerantAsBool(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the {@value #SHARDS_TOLERANT} param from <code>params</code> as a boolean;\n   * accepts {@value #REQUIRE_ZK_CONNECTED} as a valid value indicating <code>false</code>.\n   * \n   * By default, returns <code>false</code> when {@value #SHARDS_TOLERANT} is not set\n   * in <code>params</code>.\n   */\n  static boolean getShardsTolerantAsBool(SolrParams params) {\n    String shardsTolerantValue = params.get(SHARDS_TOLERANT);\n    if (null == shardsTolerantValue || shardsTolerantValue.equals(REQUIRE_ZK_CONNECTED)) {\n      return false;\n    } else {\n      return StrUtils.parseBool(shardsTolerantValue); // throw an exception if non-boolean\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd22dcd3ba035a1626face7319c94be45ae07172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd22dcd3ba035a1626face7319c94be45ae07172"]},"commit2Childs":{"bd22dcd3ba035a1626face7319c94be45ae07172":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd22dcd3ba035a1626face7319c94be45ae07172"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}