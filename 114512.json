{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#mapToProperties(Map[String,Object]).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#mapToProperties(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link DocBuilder} sends the date as an Object because \n   * this class knows how to convert it to a String\n   */\n  protected Properties mapToProperties(Map<String,Object> propObjs) {\n    Properties p = new Properties();\n    for(Map.Entry<String,Object> entry : propObjs.entrySet()) {\n      String key = entry.getKey();\n      String val = null;\n      String lastKeyPart = key;\n      int lastDotPos = key.lastIndexOf('.');\n      if(lastDotPos!=-1 && key.length() > lastDotPos+1) {\n        lastKeyPart = key.substring(lastDotPos + 1);\n      }\n      if(LAST_INDEX_KEY.equals(lastKeyPart) && entry.getValue() instanceof Date) {\n        val = convertDateToString((Date) entry.getValue());\n      } else {\n        val = entry.getValue().toString();\n      }\n      p.put(key, val);\n    }\n    return p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#mapToProperties(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link DocBuilder} sends the date as an Object because \n   * this class knows how to convert it to a String\n   */\n  protected Properties mapToProperties(Map<String,Object> propObjs) {\n    Properties p = new Properties();\n    for(Map.Entry<String,Object> entry : propObjs.entrySet()) {\n      String key = entry.getKey();\n      String val = null;\n      String lastKeyPart = key;\n      int lastDotPos = key.lastIndexOf('.');\n      if(lastDotPos!=-1 && key.length() > lastDotPos+1) {\n        lastKeyPart = key.substring(lastDotPos + 1);\n      }\n      if(LAST_INDEX_KEY.equals(lastKeyPart) && entry.getValue() instanceof Date) {\n        val = convertDateToString((Date) entry.getValue());\n      } else {\n        val = entry.getValue().toString();\n      }\n      p.put(key, val);\n    }\n    return p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter#mapToProperties(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@link DocBuilder} sends the date as an Object because \n   * this class knows how to convert it to a String\n   */\n  protected Properties mapToProperties(Map<String,Object> propObjs) {\n    Properties p = new Properties();\n    for(Map.Entry<String,Object> entry : propObjs.entrySet()) {\n      String key = entry.getKey();\n      String val = null;\n      String lastKeyPart = key;\n      int lastDotPos = key.lastIndexOf('.');\n      if(lastDotPos!=-1 && key.length() > lastDotPos+1) {\n        lastKeyPart = key.substring(lastDotPos + 1);\n      }\n      if(LAST_INDEX_KEY.equals(lastKeyPart) && entry.getValue() instanceof Date) {\n        val = convertDateToString((Date) entry.getValue());\n      } else {\n        val = entry.getValue().toString();\n      }\n      p.put(key, val);\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}