{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n\n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo\", qp.parse(\"\\\"foo\\\"\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n    assertEquals(\"\\\"foo foobar\\\"\", qp.parse(\"\\\"foo foobar\\\"\").toString());\n    assertEquals(\"\\\"foo foobar blah\\\"\", qp.parse(\"\\\"foo foobar blah\\\"\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"Synonym(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo Synonym(multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"Synonym(multi multi2) Synonym(multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) +(bar Synonym(multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo Synonym(multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"Synonym(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"Synonym(multi2 multi3 triplemulti)\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo Synonym(multi2 multi3 triplemulti) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"(\\\"(multi multi2) foo\\\")^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // phrase after changing default slop\n    qp.setPhraseSlop(99);\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 \\\"foo bar\\\"~2\",\n                 qp.parse(\"\\\"multi foo\\\" \\\"foo bar\\\"~2\").toString());\n    qp.setPhraseSlop(0);\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    assertEquals(\"+Synonym(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0cdf628dda21ad509f09608c835dc27541d1ca3","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}