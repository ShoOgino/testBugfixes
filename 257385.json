{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","commits":[{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0883328ff2cc09b5c999d05c04e16530d819c627"],"c26f00b574427b55127e869b935845554afde1fa":["0883328ff2cc09b5c999d05c04e16530d819c627","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0883328ff2cc09b5c999d05c04e16530d819c627"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}