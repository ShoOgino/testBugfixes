{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#checkRandomReplay(int,int).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#checkRandomReplay(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #checkReplay \n   * @see RandomUpdate\n   */\n  public void checkRandomReplay(final int maxDocId, final int numCmds) throws Exception {\n    \n    final String not_inplaceField = \"regular_l\";\n    final String inplaceField = \"inplace_l_dvo\"; \n\n    final Object[] cmds = new Object[numCmds];\n    for (int iter = 0; iter < numCmds; iter++) {\n      final int id = TestUtil.nextInt(random(), 1, maxDocId);\n      final RandomUpdate update = RandomUpdate.pick(random());\n\n      switch (update) {\n        \n      case HARD_COMMIT:\n        cmds[iter] = HARDCOMMIT;\n        break;\n        \n      case SOFT_COMMIT:\n        cmds[iter] = SOFTCOMMIT;\n        break;\n\n      case ATOMIC_NOT_INPLACE:\n        // atomic update on non_inplaceField, w/o any value specified for inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          not_inplaceField, map(\"inc\", random().nextInt()));\n        break;\n        \n      case ATOMIC_INPLACE_AND_NOT_INPLACE:\n        // atomic update of a doc w/ inc on both inplaceField and not_inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"inc\", random().nextInt()),\n                          not_inplaceField, map(\"inc\", random().nextInt()));\n        break;\n\n      case ATOMIC_INPLACE_SET:\n        // atomic update of a doc w/ set inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"set\", random().nextLong()));\n        break;\n\n      case ATOMIC_INPLACE_INC:\n        // atomic update of a doc w/ inc inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"inc\", random().nextInt()));\n        break;\n\n      case ADD_NO_INPLACE_VALUE:\n        // regular add of doc w/o the inplaceField, but does include non_inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          not_inplaceField, random().nextLong());\n        break;\n\n      case ADD_INPLACE_VALUE:\n        // a non atomic update of a doc w/ new inplaceField value\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, random().nextLong(),\n                          not_inplaceField, random().nextLong());\n        break;\n        \n      default:\n        fail(\"WTF is this? ... \" + update);\n      }\n      \n      assertNotNull(cmds[iter]); // sanity check switch\n    }\n\n    checkReplay(inplaceField, cmds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#checkRandomReplay(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #checkReplay \n   * @see RandomUpdate\n   */\n  public void checkRandomReplay(final int maxDocId, final int numCmds) throws Exception {\n    \n    final String not_inplaceField = \"regular_l\";\n    final String inplaceField = \"inplace_l_dvo\"; \n\n    final Object[] cmds = new Object[numCmds];\n    for (int iter = 0; iter < numCmds; iter++) {\n      final int id = TestUtil.nextInt(random(), 1, maxDocId);\n      final RandomUpdate update = RandomUpdate.pick(random());\n\n      switch (update) {\n        \n      case HARD_COMMIT:\n        cmds[iter] = HARDCOMMIT;\n        break;\n        \n      case SOFT_COMMIT:\n        cmds[iter] = SOFTCOMMIT;\n        break;\n\n      case ATOMIC_NOT_INPLACE:\n        // atomic update on non_inplaceField, w/o any value specified for inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          not_inplaceField, map(\"inc\", random().nextInt()));\n        break;\n        \n      case ATOMIC_INPLACE_AND_NOT_INPLACE:\n        // atomic update of a doc w/ inc on both inplaceField and not_inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"inc\", random().nextInt()),\n                          not_inplaceField, map(\"inc\", random().nextInt()));\n        break;\n\n      case ATOMIC_INPLACE_SET:\n        // atomic update of a doc w/ set inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"set\", random().nextLong()));\n        break;\n\n      case ATOMIC_INPLACE_INC:\n        // atomic update of a doc w/ inc inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, map(\"inc\", random().nextInt()));\n        break;\n\n      case ADD_NO_INPLACE_VALUE:\n        // regular add of doc w/o the inplaceField, but does include non_inplaceField\n        cmds[iter] = sdoc(\"id\", id,\n                          not_inplaceField, random().nextLong());\n        break;\n\n      case ADD_INPLACE_VALUE:\n        // a non atomic update of a doc w/ new inplaceField value\n        cmds[iter] = sdoc(\"id\", id,\n                          inplaceField, random().nextLong(),\n                          not_inplaceField, random().nextLong());\n        break;\n        \n      default:\n        fail(\"WTF is this? ... \" + update);\n      }\n      \n      assertNotNull(cmds[iter]); // sanity check switch\n    }\n\n    checkReplay(inplaceField, cmds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}