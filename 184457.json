{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      PointWriter copy = copyPoints(dir, points, packedLength);\n      PointWriter leftPointWriter = getRandomPointWriter(dir, middle - start, packedLength);\n      PointWriter rightPointWriter = getRandomPointWriter(dir, end - middle, packedLength);\n      BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n      byte[] partitionPoint = radixSelector.select(copy, leftPointWriter, rightPointWriter, start, end, middle, splitDim);\n      leftPointWriter.close();\n      rightPointWriter.close();\n      byte[] max = getMax(leftPointWriter, middle - start, bytesPerDimensions, splitDim);\n      byte[] min = getMin(rightPointWriter, end - middle, bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(leftPointWriter, middle - start, bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(rightPointWriter, end - middle, bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      leftPointWriter.destroy();\n      rightPointWriter.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      PointWriter copy = copyPoints(dir, points, packedLength);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n      BKDRadixSelector.PathSlice copySlice = new BKDRadixSelector.PathSlice(copy, 0, copy.count());\n      byte[] pointsMax = getMax(copySlice, bytesPerDimensions, splitDim);\n      byte[] pointsMin = getMin(copySlice, bytesPerDimensions, splitDim);\n      int commonPrefixLength = FutureArrays.mismatch(pointsMin, 0, bytesPerDimensions, pointsMax, 0, bytesPerDimensions);\n      if (commonPrefixLength == -1) {\n        commonPrefixLength = bytesPerDimensions;\n      }\n      int commonPrefixLengthInput = (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n      byte[] partitionPoint = radixSelector.select(copySlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      PointWriter copy = copyPoints(dir, points, packedLength);\n      PointWriter leftPointWriter = getRandomPointWriter(dir, middle - start, packedLength);\n      PointWriter rightPointWriter = getRandomPointWriter(dir, end - middle, packedLength);\n      BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n      byte[] partitionPoint = radixSelector.select(copy, leftPointWriter, rightPointWriter, start, end, middle, splitDim);\n      leftPointWriter.close();\n      rightPointWriter.close();\n      byte[] max = getMax(leftPointWriter, middle - start, bytesPerDimensions, splitDim);\n      byte[] min = getMin(rightPointWriter, end - middle, bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(leftPointWriter, middle - start, bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(rightPointWriter, end - middle, bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      leftPointWriter.destroy();\n      rightPointWriter.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we check for each dimension\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      PointWriter copy = copyPoints(dir, points, packedLength);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n      BKDRadixSelector.PathSlice copySlice = new BKDRadixSelector.PathSlice(copy, 0, copy.count());\n      byte[] pointsMax = getMax(copySlice, bytesPerDimensions, splitDim);\n      byte[] pointsMin = getMin(copySlice, bytesPerDimensions, splitDim);\n      int commonPrefixLength = FutureArrays.mismatch(pointsMin, 0, bytesPerDimensions, pointsMax, 0, bytesPerDimensions);\n      if (commonPrefixLength == -1) {\n        commonPrefixLength = bytesPerDimensions;\n      }\n      int commonPrefixLengthInput = (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n      byte[] partitionPoint = radixSelector.select(copySlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we check for each dimension\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we check for each dimension\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"619d6ef89bb642f6258a8369ba5a7a330580e97f","date":1561535144,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dataDimensions, int indexDimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < indexDimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we check for each dimension\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"619d6ef89bb642f6258a8369ba5a7a330580e97f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["619d6ef89bb642f6258a8369ba5a7a330580e97f"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"619d6ef89bb642f6258a8369ba5a7a330580e97f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}