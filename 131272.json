{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","commits":[{"id":"b76f497be58114d897182bb3ac8d503e7b3dcd1d","date":1204926435,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.TOKENIZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit exxpected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":["878eedeaae8b281cc57edbb48be7876469cec585","878eedeaae8b281cc57edbb48be7876469cec585","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"878eedeaae8b281cc57edbb48be7876469cec585","date":1205050740,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.TOKENIZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.TOKENIZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit exxpected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":["b76f497be58114d897182bb3ac8d503e7b3dcd1d"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.TOKENIZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void xxxtestExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void xxxtestExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["878eedeaae8b281cc57edbb48be7876469cec585"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["09c482d1e63332617181729a225b215c452d8a79"],"878eedeaae8b281cc57edbb48be7876469cec585":["b76f497be58114d897182bb3ac8d503e7b3dcd1d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b76f497be58114d897182bb3ac8d503e7b3dcd1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"878eedeaae8b281cc57edbb48be7876469cec585":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b76f497be58114d897182bb3ac8d503e7b3dcd1d"],"b76f497be58114d897182bb3ac8d503e7b3dcd1d":["878eedeaae8b281cc57edbb48be7876469cec585"],"09c482d1e63332617181729a225b215c452d8a79":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}