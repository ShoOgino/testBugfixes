{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ece4a78db13b370d8c89da1a285b45e0107389a2","date":1336411482,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n    try {\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n    try {\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd8c2bbdce779dec39cf35a6d9af9a0e15826081","date":1487492397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    // in JDK9, Class.forName will throw exception for mock classes\n    if (Constants.JRE_IS_MINIMUM_JAVA9) return;\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2b0ec30ed49a44b594c829b26d8a11ec3596381","date":1487503256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    assumeFalse(\"In Java 9, Class.forName() does not work for mock classes\", Constants.JRE_IS_MINIMUM_JAVA9);\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    // in JDK9, Class.forName will throw exception for mock classes\n    if (Constants.JRE_IS_MINIMUM_JAVA9) return;\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dab7fad95a11edf2d49b244cde75a8cad08553c1","date":1488909675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    // we're not (directly) using a Mockito based mock class here because it won't have a consistent class name\n    // that will work with DriverManager's class bindings\n    MockDriver mockDriver = new MockDriver(connection);\n    DriverManager.registerDriver(mockDriver);\n    try {\n      props.put(JdbcDataSource.DRIVER, MockDriver.class.getName());\n      props.put(JdbcDataSource.URL, MockDriver.MY_JDBC_URL);\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props).call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(mockDriver);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    assumeFalse(\"In Java 9, Class.forName() does not work for mock classes\", Constants.JRE_IS_MINIMUM_JAVA9);\n    DriverManager.registerDriver(driver);\n    try {\n      when(driver.connect(notNull(),notNull())).thenReturn(connection);\n\n      props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n      props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n              .call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(driver);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromDriverManager().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRetrieveFromDriverManager() throws Exception {\n    // we're not (directly) using a Mockito based mock class here because it won't have a consistent class name\n    // that will work with DriverManager's class bindings\n    MockDriver mockDriver = new MockDriver(connection);\n    DriverManager.registerDriver(mockDriver);\n    try {\n      props.put(JdbcDataSource.DRIVER, MockDriver.class.getName());\n      props.put(JdbcDataSource.URL, MockDriver.MY_JDBC_URL);\n      props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n\n      Connection conn = jdbcDataSource.createConnectionFactory(context, props).call();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).setHoldability(1);\n\n      assertSame(\"connection\", conn, connection);\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      DriverManager.deregisterDriver(mockDriver);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["dab7fad95a11edf2d49b244cde75a8cad08553c1"],"b2b0ec30ed49a44b594c829b26d8a11ec3596381":["fd8c2bbdce779dec39cf35a6d9af9a0e15826081"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"fd8c2bbdce779dec39cf35a6d9af9a0e15826081":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["ece4a78db13b370d8c89da1a285b45e0107389a2"],"dab7fad95a11edf2d49b244cde75a8cad08553c1":["b2b0ec30ed49a44b594c829b26d8a11ec3596381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"ece4a78db13b370d8c89da1a285b45e0107389a2":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2b0ec30ed49a44b594c829b26d8a11ec3596381":["dab7fad95a11edf2d49b244cde75a8cad08553c1"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ece4a78db13b370d8c89da1a285b45e0107389a2"],"fd8c2bbdce779dec39cf35a6d9af9a0e15826081":["b2b0ec30ed49a44b594c829b26d8a11ec3596381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["fd8c2bbdce779dec39cf35a6d9af9a0e15826081"],"dab7fad95a11edf2d49b244cde75a8cad08553c1":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"ece4a78db13b370d8c89da1a285b45e0107389a2":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}