{"path":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf3a2fba763e7be9530194061e47182fc8675738","date":1340968019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","date":1341478157,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(\"UTF-8\"));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(\"UTF-8\"));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertNull(binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertNull(binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertEquals(IndexOptions.NO, binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertNull(binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertEquals(IndexOptions.NONE, binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    Field stringFld = new Field(\"string\", binaryVal, ft);\n    StoredField binaryFld = new StoredField(\"binary\", binaryVal.getBytes(StandardCharsets.UTF_8));\n    StoredField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes(StandardCharsets.UTF_8));\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertEquals(IndexOptions.NO, binaryFld.fieldType().indexOptions());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1d028314cced5858683a1bb4741423d0f934257b","7d89d7e4e5101347833eea558851bf4209218619"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"bf3a2fba763e7be9530194061e47182fc8675738":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"7d89d7e4e5101347833eea558851bf4209218619":["1d028314cced5858683a1bb4741423d0f934257b"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["7d89d7e4e5101347833eea558851bf4209218619"],"1d028314cced5858683a1bb4741423d0f934257b":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["7d89d7e4e5101347833eea558851bf4209218619","3184874f7f3aca850248483485b4995343066875"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["bf3a2fba763e7be9530194061e47182fc8675738"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"bf3a2fba763e7be9530194061e47182fc8675738":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bf3a2fba763e7be9530194061e47182fc8675738","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d028314cced5858683a1bb4741423d0f934257b":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","0a22eafe3f72a4c2945eaad9547e6c78816978f4","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}