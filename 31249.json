{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","commits":[{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn, Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead) throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \" + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","sourceNew":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n\n    }\n\n","sourceOld":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn, Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead) throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \" + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n      this.type = type;\n\n    }\n\n","sourceOld":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d84736c4614acce6720851cbd2c823d7cd516e4"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","85eb75e0c0203e44dcf686f35876cf6080f3a671"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}