{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","commits":[{"id":"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b","date":1462462220,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e57d6939d70cf945c83fcfa6e386b9e3f9b791ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e","date":1462474069,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3e78c78ecc725ea451ed21fc7a58e2237ad7bd1","date":1462481831,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2233462ade0e629affa69a6f1e8d0205e4d6e596","date":1462534852,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  //Commented out 24-Feb 2018. JIRA marked as fixed.\n  // Still fails 26-Feb on master.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":["e57d6939d70cf945c83fcfa6e386b9e3f9b791ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b98c8cf4c8596d91ecdc7074948acdb7107e2d6c","date":1521060745,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  //Commented out 24-Feb 2018. JIRA marked as fixed.\n  // Still fails 26-Feb on master.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  //Commented out 24-Feb 2018. JIRA marked as fixed.\n  // Still fails 26-Feb on master.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e57d6939d70cf945c83fcfa6e386b9e3f9b791ba","date":1523412931,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      int timesReplicated = Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\"));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      if (null == timesFailed) {\n        timesFailed = \"0\";\n      }\n      int previousTimesFailed = Integer.parseInt(timesFailed);\n      // Sometimes replication will fail because master's core is still loading; make sure there was one success\n      assertEquals(1, timesReplicated - previousTimesFailed);\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > previousTimesFailed);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  //Commented out 24-Feb 2018. JIRA marked as fixed.\n  // Still fails 26-Feb on master.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":["321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b","ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82a6d970d2393ba4fa3666034b2ec311b774554","date":1523429643,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      int timesReplicated = Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\"));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      if (null == timesFailed) {\n        timesFailed = \"0\";\n      }\n      int previousTimesFailed = Integer.parseInt(timesFailed);\n      // Sometimes replication will fail because master's core is still loading; make sure there was one success\n      assertEquals(1, timesReplicated - previousTimesFailed);\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > previousTimesFailed);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  //Commented out 24-Feb 2018. JIRA marked as fixed.\n  // Still fails 26-Feb on master.\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-9036\")\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      assertEquals(0, Integer.parseInt(timesFailed != null ?  timesFailed : \"0\"));\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > 0);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a5d81e34f0afb8b9b96e804c08992c07a25ea53","date":1544417725,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      if (previousTimesFailed != null) {\n        assertTrue(failed > previousTimesFailed);\n      }\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      int timesReplicated = Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\"));\n      String timesFailed = getSlaveDetails(\"timesFailed\");\n      if (null == timesFailed) {\n        timesFailed = \"0\";\n      }\n      int previousTimesFailed = Integer.parseInt(timesFailed);\n      // Sometimes replication will fail because master's core is still loading; make sure there was one success\n      assertEquals(1, timesReplicated - previousTimesFailed);\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      assertTrue(failed > previousTimesFailed);\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2e2dec2a02bb8bee754e9825b049ed15284cdf","date":1561547782,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      for(int retries=0; ;retries++) { \n        Thread.sleep(2000);\n        try {\n          int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (retries>9) {\n            throw notYet;\n          } \n        }\n      }\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n      if (previousTimesFailed != null) {\n        assertTrue(failed > previousTimesFailed);\n      }\n      assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a618f7271eff76d8533bc5d783d2e8e6ba9e896","date":1561732128,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          log.info((retries+1)+\"th attempt failure on \" + notYet+\" details are \"+slaveDetails);\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n\n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      for(int retries=0; ;retries++) { \n        Thread.sleep(2000);\n        try {\n          int failed = Integer.parseInt(getSlaveDetails(\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getSlaveDetails(\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (retries>9) {\n            throw notYet;\n          } \n        }\n      }\n\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5d3f5872589251a26ab09ac124626e42f1d96e","date":1561877135,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          log.info((retries+1)+\"th attempt failure on \" + notYet+\" details are \"+slaveDetails);\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          log.info((retries+1)+\"th attempt failure on \" + notYet+\" details are \"+slaveDetails);\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{}th attempt failure on {} details are {}\", retries + 1, notYet, slaveDetails); // logOk\n          }\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          log.info((retries+1)+\"th attempt failure on \" + notYet+\" details are \"+slaveDetails);\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{}th attempt failure on {} details are {}\", retries + 1, notYet, slaveDetails); // logOk\n          }\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{}th attempt failure on {} details are {}\", retries + 1, notYet, slaveDetails); // logOk\n          }\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":5,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnLeaderRestart().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchOnMasterRestart().mjava","sourceNew":"  /**\n   * We assert that if leader is down for more than poll interval,\n   * the follower doesn't re-fetch the whole index from leader again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnLeaderRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on leader\n      leader.copyConfigFile(CONF_DIR + \"solrconfig-leader2.xml\",\n          \"solrconfig.xml\");\n\n      leaderJetty.stop();\n      leaderJetty.start();\n\n      // close and re-create leader client because its connection pool has stale connections\n      leaderClient.close();\n      leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n      leaderClient.commit();\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList leaderQueryRsp = rQuery(nDocs, \"*:*\", leaderClient);\n      SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(leaderQueryRsp));\n\n      //get docs from follower and check if number is equal to leader\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n      SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(followerQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getFollowerDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getFollowerDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because leader's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      leaderJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> leaderJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on follower is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> followerDetails=null;\n        try {\n          followerDetails = getFollowerDetails();\n          int failed = Integer.parseInt(getStringOrNull(followerDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(followerDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{}th attempt failure on {} details are {}\", retries + 1, notYet, followerDetails); // logOk\n          }\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      leaderJetty.start();\n\n      // poll interval on follower is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from follower and assert that they are still the same as before\n      followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n      followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(followerQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","sourceOld":"  /**\n   * We assert that if master is down for more than poll interval,\n   * the slave doesn't re-fetch the whole index from master again if\n   * the index hasn't changed. See SOLR-9036\n   */\n  @Test\n  public void doTestIndexFetchOnMasterRestart() throws Exception  {\n    useFactory(null);\n    try {\n      clearIndexWithReplication();\n      // change solrconfig having 'replicateAfter startup' option on master\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n          \"solrconfig.xml\");\n\n      masterJetty.stop();\n      masterJetty.start();\n\n      // close and re-create master client because its connection pool has stale connections\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n      nDocs--;\n      for (int i = 0; i < nDocs; i++)\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n      masterClient.commit();\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(masterQueryRsp));\n\n      //get docs from slave and check if number is equal to master\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n      //compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n\n      String timesReplicatedString = getSlaveDetails(\"timesIndexReplicated\");\n      String timesFailed;\n      Integer previousTimesFailed = null;\n      if (timesReplicatedString == null) {\n        timesFailed = \"0\";\n      } else {\n        int timesReplicated = Integer.parseInt(timesReplicatedString);\n        timesFailed = getSlaveDetails(\"timesFailed\");\n        if (null == timesFailed) {\n          timesFailed = \"0\";\n        }\n\n        previousTimesFailed = Integer.parseInt(timesFailed);\n        // Sometimes replication will fail because master's core is still loading; make sure there was one success\n        assertEquals(1, timesReplicated - previousTimesFailed);\n\n      }\n\n      masterJetty.stop();\n\n      final TimeOut waitForLeaderToShutdown = new TimeOut(300, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      waitForLeaderToShutdown.waitFor\n        (\"Gave up after waiting an obscene amount of time for leader to shut down\",\n         () -> masterJetty.isStopped() );\n        \n      for(int retries=0; ;retries++) { \n\n        Thread.yield(); // might not be necessary at all\n        // poll interval on slave is 1 second, so we just sleep for a few seconds\n        Thread.sleep(2000);\n        \n        NamedList<Object> slaveDetails=null;\n        try {\n          slaveDetails = getSlaveDetails();\n          int failed = Integer.parseInt(getStringOrNull(slaveDetails,\"timesFailed\"));\n          if (previousTimesFailed != null) {\n            assertTrue(failed > previousTimesFailed);\n          }\n          assertEquals(1, Integer.parseInt(getStringOrNull(slaveDetails,\"timesIndexReplicated\")) - failed);\n          break;\n        } catch (NumberFormatException | AssertionError notYet) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{}th attempt failure on {} details are {}\", retries + 1, notYet, slaveDetails); // logOk\n          }\n          if (retries>9) {\n            log.error(\"giving up: \", notYet);\n            throw notYet;\n          } \n        }\n      }\n      \n      masterJetty.start();\n\n      // poll interval on slave is 1 second, so we just sleep for a few seconds\n      Thread.sleep(2000);\n      //get docs from slave and assert that they are still the same as before\n      slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n      slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n      assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    } finally {\n      resetFactory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a618f7271eff76d8533bc5d783d2e8e6ba9e896":["6d2e2dec2a02bb8bee754e9825b049ed15284cdf"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["b98c8cf4c8596d91ecdc7074948acdb7107e2d6c","e57d6939d70cf945c83fcfa6e386b9e3f9b791ba"],"6d2e2dec2a02bb8bee754e9825b049ed15284cdf":["5a5d81e34f0afb8b9b96e804c08992c07a25ea53"],"b98c8cf4c8596d91ecdc7074948acdb7107e2d6c":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["8a5d3f5872589251a26ab09ac124626e42f1d96e"],"5a5d81e34f0afb8b9b96e804c08992c07a25ea53":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e","d3e78c78ecc725ea451ed21fc7a58e2237ad7bd1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3e78c78ecc725ea451ed21fc7a58e2237ad7bd1":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"e57d6939d70cf945c83fcfa6e386b9e3f9b791ba":["b98c8cf4c8596d91ecdc7074948acdb7107e2d6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"8a5d3f5872589251a26ab09ac124626e42f1d96e":["0a618f7271eff76d8533bc5d783d2e8e6ba9e896"],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b"]},"commit2Childs":{"0a618f7271eff76d8533bc5d783d2e8e6ba9e896":["8a5d3f5872589251a26ab09ac124626e42f1d96e"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["b98c8cf4c8596d91ecdc7074948acdb7107e2d6c"],"e82a6d970d2393ba4fa3666034b2ec311b774554":["5a5d81e34f0afb8b9b96e804c08992c07a25ea53"],"6d2e2dec2a02bb8bee754e9825b049ed15284cdf":["0a618f7271eff76d8533bc5d783d2e8e6ba9e896"],"b98c8cf4c8596d91ecdc7074948acdb7107e2d6c":["e82a6d970d2393ba4fa3666034b2ec311b774554","e57d6939d70cf945c83fcfa6e386b9e3f9b791ba"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"5a5d81e34f0afb8b9b96e804c08992c07a25ea53":["6d2e2dec2a02bb8bee754e9825b049ed15284cdf"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","321fb13cb86fbd0c2424ee0ddf7d9d6ed392d54b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"d3e78c78ecc725ea451ed21fc7a58e2237ad7bd1":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"e57d6939d70cf945c83fcfa6e386b9e3f9b791ba":["e82a6d970d2393ba4fa3666034b2ec311b774554"],"8a5d3f5872589251a26ab09ac124626e42f1d96e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["2233462ade0e629affa69a6f1e8d0205e4d6e596","d3e78c78ecc725ea451ed21fc7a58e2237ad7bd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}