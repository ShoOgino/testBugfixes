{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param ord the elements ordinal to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int ord) {\n    if (lastElement > ord) {\n      int offset = offsets[ord];\n      int length = ord == lastElement - 1 ? currentOffset - offset\n          : offsets[ord + 1] - offset;\n      pool.copyFrom(spare, offset, length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + ord\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefList}\n   * @param spare a spare {@link BytesRef} instance\n   * @param ord the elements ordinal to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefList}\n   */\n  public BytesRef get(BytesRef spare, int ord) {\n    if (lastElement > ord) {\n      int offset = offsets[ord];\n      int length = ord == lastElement - 1 ? currentOffset - offset\n          : offsets[ord + 1] - offset;\n      pool.copyFrom(spare, offset, length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + ord\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#get(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param ord the elements ordinal to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int ord) {\n    if (lastElement > ord) {\n      int offset = offsets[ord];\n      int length = ord == lastElement - 1 ? currentOffset - offset\n          : offsets[ord + 1] - offset;\n      pool.copyFrom(spare, offset, length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + ord\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param ord the elements ordinal to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int ord) {\n    if (lastElement > ord) {\n      int offset = offsets[ord];\n      int length = ord == lastElement - 1 ? currentOffset - offset\n          : offsets[ord + 1] - offset;\n      pool.copyFrom(spare, offset, length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + ord\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      spare.grow(length);\n      spare.setLength(length);\n      pool.readBytes(offset, spare.bytes(), 0, spare.length());\n      return spare.get();\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["847d1294c8ff2f0172af20892ef98a1c6a952e09","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}