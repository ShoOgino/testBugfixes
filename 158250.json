{"path":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#testDefaultBuildOnStartupStoredDict().mjava","commits":[{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#testDefaultBuildOnStartupStoredDict().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultBuildOnStartupStoredDict() throws Exception {\n    \n    final String suggester = \"suggest_doc_default_startup\";\n    \n    // validate that this suggester is storing the lookup\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='name']\", false));\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='storeDir']\", false));\n    \n    // validate that this suggester only builds manually and has not buildOnStartup parameter\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnCommit']\", true));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnStartup']\", false));\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    reloadCore(random().nextBoolean());\n    \n    // Validate that the suggester was loaded on new/reload core\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // add one more doc, this should not be seen after a core reload (not until the suggester is manually rebuilt)\n    assertU(adoc(\"id\", \"10\", \"cat\", \"example data extra \", \"price\", \"40\", \"weight\", \"35\"));\n    assertU((commit()));\n    \n    reloadCore(random().nextBoolean());\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"3\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"3\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='3']\"\n        );\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#testDefaultBuildOnStartupStoredDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#testDefaultBuildOnStartupStoredDict().mjava","sourceNew":"  @Test\n  public void testDefaultBuildOnStartupStoredDict() throws Exception {\n    \n    final String suggester = \"suggest_doc_default_startup\";\n    \n    // validate that this suggester is storing the lookup\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='name']\", false));\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='storeDir']\", false));\n    \n    // validate that this suggester only builds manually and has not buildOnStartup parameter\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnCommit']\", true));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnStartup']\", false));\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    reloadCore(random().nextBoolean());\n    \n    // Validate that the suggester was loaded on new/reload core\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // add one more doc, this should not be seen after a core reload (not until the suggester is manually rebuilt)\n    assertU(adoc(\"id\", \"10\", \"cat\", \"example data extra \", \"price\", \"40\", \"weight\", \"35\"));\n    assertU((commit()));\n    \n    waitForWarming();\n    // buildOnCommit=false, this doc should not be in the suggester yet\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    reloadCore(random().nextBoolean());\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='3']\"\n        );\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDefaultBuildOnStartupStoredDict() throws Exception {\n    \n    final String suggester = \"suggest_doc_default_startup\";\n    \n    // validate that this suggester is storing the lookup\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='name']\", false));\n    assertEquals(suggester, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='storeDir']\", false));\n    \n    // validate that this suggester only builds manually and has not buildOnStartup parameter\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnCommit']\", true));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnStartup']\", false));\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    reloadCore(random().nextBoolean());\n    \n    // Validate that the suggester was loaded on new/reload core\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // add one more doc, this should not be seen after a core reload (not until the suggester is manually rebuilt)\n    assertU(adoc(\"id\", \"10\", \"cat\", \"example data extra \", \"price\", \"40\", \"weight\", \"35\"));\n    assertU((commit()));\n    \n    reloadCore(random().nextBoolean());\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"3\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='2']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggester,\n        SuggesterParams.SUGGEST_Q, \"example\",\n        SuggesterParams.SUGGEST_COUNT, \"3\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggester + \"']/lst[@name='example']/int[@name='numFound'][.='3']\"\n        );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}