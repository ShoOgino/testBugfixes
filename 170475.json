{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","commits":[{"id":"3fb0c241e2a5e80dcaf41e354c7003520fcb777d","date":1324562351,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='6']\"\n          , \"//result/doc[3]/str[@name='id'][.='1']\"\n          , \"//result/doc[4]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='false']\"\n      );\n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a","date":1347574644,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \"QQQQ\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \"QQQQ QQQQ\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ QQQQ\", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='8']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='10']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='8']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='10']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='true']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='6']\"\n          , \"//result/doc[3]/str[@name='id'][.='1']\"\n          , \"//result/doc[4]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='false']\"\n      );\n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \"QQQQ\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \"QQQQ QQQQ\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ QQQQ\", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='8']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='10']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='8']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='10']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='true']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n\n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n\n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n\n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n\n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n\n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n\n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarkExcludes().mjava","sourceNew":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n\n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n\n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n\n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarkExcludes() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      \n      assertU(adoc(\"id\", \"8\", \"title\", \" QQQQ trash trash\", \"str_s1\", \"q\"));\n      assertU(adoc(\"id\", \"9\", \"title\", \" QQQQ QQQQ  trash\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"10\", \"title\", \"QQQQ QQQQ  QQQQ \", \"str_s1\", \"s\"));\n      \n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[4]/bool[@name='[excluded]'][.='true']\"\n      );\n      \n      //ask for excluded as a field, but don't actually request the MARK_EXCLUDES\n      //thus, number 6 should not be returned, b/c it is excluded\n      assertQ(\"\", req(CommonParams.Q, \"XXXX XXXX\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"false\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='5']\"\n          , \"//result/doc[2]/str[@name='id'][.='1']\"\n          , \"//result/doc[3]/str[@name='id'][.='4']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n      \n      // test that excluded results are on the same positions in the result list\n      // as when elevation component is disabled\n      // (i.e. test that elevation component with MARK_EXCLUDES does not boost\n      // excluded results)\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.ENABLE, \"false\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\"\n      );\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ\", CommonParams.QT, \"/elevate\",\n          QueryElevationParams.MARK_EXCLUDES, \"true\",\n          \"indent\", \"true\",\n          CommonParams.FL, \"id, score, [excluded]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='10']\"\n          , \"//result/doc[2]/str[@name='id'][.='9']\"\n          , \"//result/doc[3]/str[@name='id'][.='8']\",\n          \"//result/doc[1]/bool[@name='[excluded]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[excluded]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[excluded]'][.='false']\"\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["49dd2950028d6b59839f54d3801d77f769fa22ef","2ad458affd82a1d762eb506003907d9363a333cb"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["49dd2950028d6b59839f54d3801d77f769fa22ef","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}