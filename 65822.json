{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","commits":[{"id":"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9","date":1515033099,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    List<Number> listA = (List<Number>) value1;\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"G-statistic\", g);\n    m.put(\"p-value\", p);\n    return new Tuple(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    List<Number> listA = (List<Number>) value1;\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"G-statistic\", g);\n    m.put(\"p-value\", p);\n    return new Tuple(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listA = (List<Number>) value1;\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"G-statistic\", g);\n    m.put(\"p-value\", p);\n    return new Tuple(m);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    List<Number> listA = (List<Number>) value1;\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"G-statistic\", g);\n    m.put(\"p-value\", p);\n    return new Tuple(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GTestDataSetEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listA = (List<Number>) value1;\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n   Tuple tuple = new Tuple();\n    tuple.put(\"G-statistic\", g);\n    tuple.put(StreamParams.P_VALUE, p);\n    return tuple;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listA = (List<Number>) value1;\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> listB = (List<Number>) value2;\n\n    long[] sampleA = new long[listA.size()];\n    long[] sampleB = new long[listB.size()];\n\n    for(int i=0; i<sampleA.length; i++) {\n      sampleA[i] = listA.get(i).longValue();\n    }\n\n    for(int i=0; i<sampleB.length; i++) {\n      sampleB[i] = listB.get(i).longValue();\n    }\n\n    GTest gTest = new GTest();\n    double g = gTest.gDataSetsComparison(sampleA, sampleB);\n    double p = gTest.gTestDataSetsComparison(sampleA, sampleB);\n\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"G-statistic\", g);\n    m.put(\"p-value\", p);\n    return new Tuple(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d7d88a10b8b3fb9de31a38cbcdc2015432739b9"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","8d7d88a10b8b3fb9de31a38cbcdc2015432739b9"],"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}