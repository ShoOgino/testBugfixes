{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getBaseForm(int,char[],int,int).mjava","commits":[{"id":"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e","date":1326766347,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getBaseForm(int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String getBaseForm(int wordId, char surfaceForm[], int off, int len) {\n    if (hasBaseFormData(wordId)) {\n      int offset = baseFormOffset(wordId);\n      int data = buffer.get(offset++) & 0xff;\n      int prefix = data >>> 4;\n      int suffix = data & 0xF;\n      char text[] = new char[prefix+suffix];\n      System.arraycopy(surfaceForm, off, text, 0, prefix);\n      for (int i = 0; i < suffix; i++) {\n        text[prefix+i] = buffer.getChar(offset + (i << 1));\n      }\n      return new String(text);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#getBaseForm(int,char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#getBaseForm(int,char[],int,int).mjava","sourceNew":"  @Override\n  public String getBaseForm(int wordId, char surfaceForm[], int off, int len) {\n    if (hasBaseFormData(wordId)) {\n      int offset = baseFormOffset(wordId);\n      int data = buffer.get(offset++) & 0xff;\n      int prefix = data >>> 4;\n      int suffix = data & 0xF;\n      char text[] = new char[prefix+suffix];\n      System.arraycopy(surfaceForm, off, text, 0, prefix);\n      for (int i = 0; i < suffix; i++) {\n        text[prefix+i] = buffer.getChar(offset + (i << 1));\n      }\n      return new String(text);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public String getBaseForm(int wordId, char surfaceForm[], int off, int len) {\n    if (hasBaseFormData(wordId)) {\n      int offset = baseFormOffset(wordId);\n      int data = buffer.get(offset++) & 0xff;\n      int prefix = data >>> 4;\n      int suffix = data & 0xF;\n      char text[] = new char[prefix+suffix];\n      System.arraycopy(surfaceForm, off, text, 0, prefix);\n      for (int i = 0; i < suffix; i++) {\n        text[prefix+i] = buffer.getChar(offset + (i << 1));\n      }\n      return new String(text);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}