{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaFileDeleter#decRef(Collection[String]).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaFileDeleter#decRef(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void decRef(Collection<String> fileNames) {\n    // We don't delete the files immediately when their RC drops to 0; instead, we add to the pending set, and then call deletePending in\n    // the end:\n    for(String fileName : fileNames) {\n      Integer curCount = refCounts.get(fileName);\n      assert curCount != null: \"fileName=\" + fileName;\n      assert curCount.intValue() > 0;\n      if (curCount.intValue() == 1) {\n        refCounts.remove(fileName);\n        pending.add(fileName);\n      } else {\n        refCounts.put(fileName, curCount.intValue() - 1);\n      }\n    }\n\n    deletePending();\n\n    // TODO: this local IR could incRef files here, like we do now with IW ... then we can assert this again:\n\n    // we can't assert this, e.g a search can be running when we switch to a new NRT point, holding a previous IndexReader still open for\n    // a bit:\n    /*\n    // We should never attempt deletion of a still-open file:\n    Set<String> delOpen = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (delOpen.isEmpty() == false) {\n      node.message(\"fail: we tried to delete these still-open files: \" + delOpen);\n      throw new AssertionError(\"we tried to delete these still-open files: \" + delOpen);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c","date":1454874368,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  public synchronized void decRef(Collection<String> fileNames) throws IOException {\n    Set<String> toDelete = new HashSet<>();\n    for(String fileName : fileNames) {\n      Integer curCount = refCounts.get(fileName);\n      assert curCount != null: \"fileName=\" + fileName;\n      assert curCount.intValue() > 0;\n      if (curCount.intValue() == 1) {\n        refCounts.remove(fileName);\n        toDelete.add(fileName);\n      } else {\n        refCounts.put(fileName, curCount.intValue() - 1);\n      }\n    }\n\n    delete(toDelete);\n\n    // TODO: this local IR could incRef files here, like we do now with IW's NRT readers ... then we can assert this again:\n\n    // we can't assert this, e.g a search can be running when we switch to a new NRT point, holding a previous IndexReader still open for\n    // a bit:\n    /*\n    // We should never attempt deletion of a still-open file:\n    Set<String> delOpen = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (delOpen.isEmpty() == false) {\n      node.message(\"fail: we tried to delete these still-open files: \" + delOpen);\n      throw new AssertionError(\"we tried to delete these still-open files: \" + delOpen);\n    }\n    */\n  }\n\n","sourceOld":"  public synchronized void decRef(Collection<String> fileNames) {\n    // We don't delete the files immediately when their RC drops to 0; instead, we add to the pending set, and then call deletePending in\n    // the end:\n    for(String fileName : fileNames) {\n      Integer curCount = refCounts.get(fileName);\n      assert curCount != null: \"fileName=\" + fileName;\n      assert curCount.intValue() > 0;\n      if (curCount.intValue() == 1) {\n        refCounts.remove(fileName);\n        pending.add(fileName);\n      } else {\n        refCounts.put(fileName, curCount.intValue() - 1);\n      }\n    }\n\n    deletePending();\n\n    // TODO: this local IR could incRef files here, like we do now with IW ... then we can assert this again:\n\n    // we can't assert this, e.g a search can be running when we switch to a new NRT point, holding a previous IndexReader still open for\n    // a bit:\n    /*\n    // We should never attempt deletion of a still-open file:\n    Set<String> delOpen = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (delOpen.isEmpty() == false) {\n      node.message(\"fail: we tried to delete these still-open files: \" + delOpen);\n      throw new AssertionError(\"we tried to delete these still-open files: \" + delOpen);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaFileDeleter#decRef(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void decRef(Collection<String> fileNames) throws IOException {\n    Set<String> toDelete = new HashSet<>();\n    for(String fileName : fileNames) {\n      Integer curCount = refCounts.get(fileName);\n      assert curCount != null: \"fileName=\" + fileName;\n      assert curCount.intValue() > 0;\n      if (curCount.intValue() == 1) {\n        refCounts.remove(fileName);\n        toDelete.add(fileName);\n      } else {\n        refCounts.put(fileName, curCount.intValue() - 1);\n      }\n    }\n\n    delete(toDelete);\n\n    // TODO: this local IR could incRef files here, like we do now with IW's NRT readers ... then we can assert this again:\n\n    // we can't assert this, e.g a search can be running when we switch to a new NRT point, holding a previous IndexReader still open for\n    // a bit:\n    /*\n    // We should never attempt deletion of a still-open file:\n    Set<String> delOpen = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (delOpen.isEmpty() == false) {\n      node.message(\"fail: we tried to delete these still-open files: \" + delOpen);\n      throw new AssertionError(\"we tried to delete these still-open files: \" + delOpen);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b72a3c8c250ce67d9dd59e06316f982cd77bdb3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b72a3c8c250ce67d9dd59e06316f982cd77bdb3c":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["b72a3c8c250ce67d9dd59e06316f982cd77bdb3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}