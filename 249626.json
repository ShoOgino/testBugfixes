{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      coreState = reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n      if(coreState.equals(expectedState)) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      coreState = reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n      if(coreState.equals(expectedState)) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      coreState = reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n      if(coreState.equals(expectedState)) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getCloudState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      coreState = reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n      if(coreState.equals(expectedState)) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getCloudState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getCloudState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getCloudState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"cloudState:\" + reader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getShards().get(\"node1_core1\").get(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fa64435b5902ce266c23755a4a00691a3285dab8","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["fa64435b5902ce266c23755a4a00691a3285dab8"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a219f1dcad1700e84807666bdbd2b573e8de7021"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}