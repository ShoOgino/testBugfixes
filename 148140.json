{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<? extends DocIdSetIterator> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[required.size()];\n    for (int i = 0; i < required.size(); ++i) {\n      docsAndFreqs[i] = new DocsAndFreqs(required.get(i));\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<? extends DocIdSetIterator> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.disi = ConjunctionDISI.intersect(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<? extends DocIdSetIterator> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[required.size()];\n    for (int i = 0; i < required.size(); ++i) {\n      docsAndFreqs[i] = new DocsAndFreqs(required.get(i));\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[Scorer],List[Scorer],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<Scorer> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.disi = ConjunctionDISI.intersectScorers(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<? extends DocIdSetIterator> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.disi = ConjunctionDISI.intersect(required);\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"25f698887111a682424e759ba36083180899a1fd":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}