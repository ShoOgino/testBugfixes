{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    final int size = map.size();\n    assertEquals(2, size);\n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n\n    map = CharArrayMap.unmodifiableMap(map);\n    assertEquals(\"Map size changed due to unmodifiableMap call\" , size, map.size());\n    String NOT_IN_MAP = \"SirGallahad\";\n    assertFalse(\"Test String already exists in map\", map.containsKey(NOT_IN_MAP));\n    assertNull(\"Test String already exists in map\", map.get(NOT_IN_MAP));\n    \n    try{\n      map.put(NOT_IN_MAP.toCharArray(), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put(new StringBuilder(NOT_IN_MAP), 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.entrySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.keySet().clear();  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.put((Object) NOT_IN_MAP, 3);  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    try{\n      map.putAll(Collections.singletonMap(NOT_IN_MAP, 3));  \n      fail(\"Modified unmodifiable map\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable map\", map.containsKey(NOT_IN_MAP));\n      assertNull(\"Test String has been added to unmodifiable map\", map.get(NOT_IN_MAP));\n      assertEquals(\"Size of unmodifiable map has changed\", size, map.size());\n    }\n    \n    assertTrue(map.containsKey(\"foo\"));  \n    assertEquals(1, map.get(\"foo\").intValue());  \n    assertTrue(map.containsKey(\"bar\"));  \n    assertEquals(2, map.get(\"bar\").intValue());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}