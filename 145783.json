{"path":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","pathOld":"modules/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", new StringReader(\"the big brown fox jumped on the wood\"));\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", new StringReader(\"the big brown fox jumped on the wood\"));\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", \"the big brown fox jumped on the wood\");\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", new StringReader(\"the big brown fox jumped on the wood\"));\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":["2ac3b0ef79dfcf20e23ceb1d0e4165591014307f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", \"the big brown fox jumped on the wood\");\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", new StringReader(\"the big brown fox jumped on the wood\"));\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", \"the big brown fox jumped on the wood\");\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", \"the big brown fox jumped on the wood\");\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMATypeAwareAnalyzerTest#baseUIMATypeAwareAnalyzerStreamTest().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void baseUIMATypeAwareAnalyzerStreamTest() throws Exception {\n\n    // create a token stream\n    TokenStream ts = analyzer.tokenStream(\"text\", \"the big brown fox jumped on the wood\");\n\n    // check that 'the big brown fox jumped on the wood' tokens have the expected PoS types\n    assertTokenStreamContents(ts,\n        new String[]{\"the\", \"big\", \"brown\", \"fox\", \"jumped\", \"on\", \"the\", \"wood\"},\n        new String[]{\"at\", \"jj\", \"jj\", \"nn\", \"vbd\", \"in\", \"at\", \"nn\"});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c83d6c4335f31cae14f625a222bc842f20073dcd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c83d6c4335f31cae14f625a222bc842f20073dcd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","37a0f60745e53927c4c876cfe5b5a58170f0646c","8c9a6ea78b00a421744e770568d8c2aab262e4cd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}