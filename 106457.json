{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","pathOld":"/dev/null","sourceNew":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        // we quantize the triangle for consistency with the index\n        Relation r = tree.relateTriangle(quantizeLon(t.getLon(0)), quantizeLat(t.getLat(0)),\n            quantizeLon(t.getLon(1)), quantizeLat(t.getLat(1)),\n            quantizeLon(t.getLon(2)), quantizeLat(t.getLat(2)));\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","sourceNew":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = quantizeTriangle(t.getLon(0), t.getLat(0), t.getLon(1), t.getLat(1), t.getLon(2), t.getLat(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        // we quantize the triangle for consistency with the index\n        Relation r = tree.relateTriangle(quantizeLon(t.getLon(0)), quantizeLat(t.getLat(0)),\n            quantizeLon(t.getLon(1)), quantizeLat(t.getLat(1)),\n            quantizeLon(t.getLon(2)), quantizeLat(t.getLat(2)));\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","sourceNew":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.getX(1), t.getY(1), t.getX(2), t.getY(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = quantizeTriangle(t.getLon(0), t.getLat(0), t.getLon(1), t.getLat(1), t.getLon(2), t.getLat(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","sourceNew":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n                                                      t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n                                                      t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.getX(1), t.getY(1), t.getX(2), t.getY(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","sourceNew":null,"sourceOld":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n                                                      t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n                                                      t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries.PolygonValidator#testPolygon(EdgeTree,Polygon).mjava","sourceNew":null,"sourceOld":"    private boolean testPolygon(EdgeTree tree, Polygon shape) {\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n                                                      t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n                                                      t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = tree.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["5ed90f8ba7e7be13d155f954862178b23a324125"],"2aeefba8262036d422d639e48c49d51316bea138":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["2aeefba8262036d422d639e48c49d51316bea138"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["5ed90f8ba7e7be13d155f954862178b23a324125","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"2aeefba8262036d422d639e48c49d51316bea138":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"e4fccad460342b1af30cb328cc8297751a218d78":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}