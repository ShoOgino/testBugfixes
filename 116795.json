{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag);\n      metricsHistoryHandler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node {}\", nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag);\n      metricsHistoryHandler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag);\n      metricsHistoryHandler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node {}\", nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag);\n      metricsHistoryHandler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}