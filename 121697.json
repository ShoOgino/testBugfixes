{"path":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#getTlogFileSizes(String,int).mjava","commits":[{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#getTlogFileSizes(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Goes through the given tlog directory and inspects each tlog. Asserts that each tlog's size is <= the given max size bound.\n   * @param tlogDirPath tlog directory path\n   * @param maxSizeBound the max tlog size\n   * @return a TreeMap of (tlog file name, tlog file size (in bytes)) pairs\n   */\n  private TreeMap<String, Long> getTlogFileSizes(String tlogDirPath, int maxSizeBound) {\n    File tlogDir = new File(tlogDirPath);\n    File[] tlogs = tlogDir.listFiles();\n    TreeMap<String, Long> tlogInfo = new TreeMap<>();\n    if (tlogs != null) {\n      for (File tlog : tlogs) {\n        String message = String.format(Locale.getDefault(), \"Tlog size exceeds the max size bound. Tlog path: %s, tlog size: %d\",\n            tlog.getPath(), tlog.length());\n        Assert.assertTrue(message, tlog.length() <= maxSizeBound);\n        tlogInfo.put(tlog.getName(), tlog.length());\n      }\n    }\n    return tlogInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d6f83edecd216b844079cc682096091dfa9fbc","date":1534485921,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/MaxSizeAutoCommitTest#getTlogFileSizes(String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Goes through the given tlog directory and inspects each tlog. Asserts that each tlog's size is <= the given max size bound.\n   * @param tlogDirPath tlog directory path\n   * @param maxSizeBound the max tlog size\n   * @return a TreeMap of (tlog file name, tlog file size (in bytes)) pairs\n   */\n  private TreeMap<String, Long> getTlogFileSizes(String tlogDirPath, int maxSizeBound) {\n    File tlogDir = new File(tlogDirPath);\n    File[] tlogs = tlogDir.listFiles();\n    TreeMap<String, Long> tlogInfo = new TreeMap<>();\n    if (tlogs != null) {\n      for (File tlog : tlogs) {\n        String message = String.format(Locale.getDefault(), \"Tlog size exceeds the max size bound. Tlog path: %s, tlog size: %d\",\n            tlog.getPath(), tlog.length());\n        Assert.assertTrue(message, tlog.length() <= maxSizeBound);\n        tlogInfo.put(tlog.getName(), tlog.length());\n      }\n    }\n    return tlogInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27d6f83edecd216b844079cc682096091dfa9fbc":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d6f83edecd216b844079cc682096091dfa9fbc"]},"commit2Childs":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["27d6f83edecd216b844079cc682096091dfa9fbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"27d6f83edecd216b844079cc682096091dfa9fbc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}