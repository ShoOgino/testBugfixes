{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"/dev/null","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    Iterator<BytesRef> i1 = sorter.iterator();\n    Iterator<BytesRef> i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n\n    while (i1.hasNext() && i2.hasNext()) {\n      assertEquals(i1.next(), i2.next());\n    }\n    assertEquals(i1.hasNext(), i2.hasNext());\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    Iterator<BytesRef> i1 = sorter.iterator();\n    Iterator<BytesRef> i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n\n    while (i1.hasNext() && i2.hasNext()) {\n      assertEquals(i1.next(), i2.next());\n    }\n    assertEquals(i1.hasNext(), i2.hasNext());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    Iterator<BytesRef> i1 = sorter.iterator();\n    Iterator<BytesRef> i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n\n    while (i1.hasNext() && i2.hasNext()) {\n      assertEquals(i1.next(), i2.next());\n    }\n    assertEquals(i1.hasNext(), i2.hasNext());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random.nextInt(256)];\n      random.nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/BytesRefSortersTest#check(BytesRefSorter).mjava","sourceNew":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","sourceOld":"  private void check(BytesRefSorter sorter) throws Exception {\n    for (int i = 0; i < 100; i++) {\n      byte [] current = new byte [random().nextInt(256)];\n      random().nextBytes(current);\n      sorter.add(new BytesRef(current));\n    }\n\n    // Create two iterators and check that they're aligned with each other.\n    BytesRefIterator i1 = sorter.iterator();\n    BytesRefIterator i2 = sorter.iterator();\n    \n    // Verify sorter contract.\n    try {\n      sorter.add(new BytesRef(new byte [1]));\n      fail(\"expected contract violation.\");\n    } catch (IllegalStateException e) {\n      // Expected.\n    }\n    BytesRef spare1;\n    BytesRef spare2;\n    while ((spare1 = i1.next()) != null && (spare2 = i2.next()) != null) {\n      assertEquals(spare1, spare2);\n    }\n    assertNull(i1.next());\n    assertNull(i2.next());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}