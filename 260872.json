{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","commits":[{"id":"92ff363eabbaa0b7706976aea7997bb2f620caa0","date":1412866130,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.getNormType(), actual.getNormType());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.getNormType(), actual.getNormType());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","sourceNew":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","sourceOld":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.getNormType(), actual.getNormType());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","sourceNew":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","sourceOld":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.getNormType(), actual.getNormType());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#assertEquals(FieldInfo,FieldInfo).mjava","sourceNew":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","sourceOld":"  /** equality for two individual fieldinfo objects */\n  protected void assertEquals(FieldInfo expected, FieldInfo actual) {\n    assertEquals(expected.number, actual.number);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.getDocValuesType(), actual.getDocValuesType());\n    assertEquals(expected.getIndexOptions(), actual.getIndexOptions());\n    assertEquals(expected.hasDocValues(), actual.hasDocValues());\n    assertEquals(expected.hasNorms(), actual.hasNorms());\n    assertEquals(expected.hasPayloads(), actual.hasPayloads());\n    assertEquals(expected.hasVectors(), actual.hasVectors());\n    assertEquals(expected.isIndexed(), actual.isIndexed());\n    assertEquals(expected.omitsNorms(), actual.omitsNorms());\n    assertEquals(expected.getDocValuesGen(), actual.getDocValuesGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["92ff363eabbaa0b7706976aea7997bb2f620caa0"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["55980207f1977bd1463465de1659b821347e2fa8","05da2d758a6089e737cdfc230e57a51b472b94b6"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"556a4aab886d75371b2af129d87be3c2795cea76":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556a4aab886d75371b2af129d87be3c2795cea76"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","556a4aab886d75371b2af129d87be3c2795cea76"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"55980207f1977bd1463465de1659b821347e2fa8":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","92ff363eabbaa0b7706976aea7997bb2f620caa0"],"556a4aab886d75371b2af129d87be3c2795cea76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92ff363eabbaa0b7706976aea7997bb2f620caa0":["05da2d758a6089e737cdfc230e57a51b472b94b6","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}