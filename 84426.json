{"path":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","commits":[{"id":"937d1992553892661e4efbb659656cc565a9e621","date":1330719427,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof RenameFieldsTransformer);\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof RenameFieldsTransformer);\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1","date":1331668628,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof RenameFieldsTransformer);\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n  }\n\n","sourceOld":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof RenameFieldsTransformer);\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6c5c6226ab2177d29ab21112ec81e5afb21e75","date":1335389211,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(5, ((DocTransformers)rf.getTransformer()).size());  // 4 rename and score\n  }\n\n","sourceOld":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof RenameFieldsTransformer);\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    rf = new SolrReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(5, ((DocTransformers)rf.getTransformer()).size());  // 4 rename and score\n  }\n\n","sourceOld":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(5, ((DocTransformers)rf.getTransformer()).size());  // 4 rename and score\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testAliases().mjava","sourceNew":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    rf = new SolrReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(5, ((DocTransformers)rf.getTransformer()).size());  // 4 rename and score\n  }\n\n","sourceOld":"  @Test\n  public void testAliases() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    rf = new ReturnFields( req(\"fl\", \"newId:id newName:name newTest:test newSubject:subject score\") );\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"name\"));\n    assertTrue(rf.wantsField(\"test\"));\n    assertTrue(rf.wantsField(\"subject\"));\n    assertTrue(rf.wantsField(\"newId\"));\n    assertTrue(rf.wantsField(\"newName\"));\n    assertTrue(rf.wantsField(\"newTest\"));\n    assertTrue(rf.wantsField(\"newSubject\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(5, ((DocTransformers)rf.getTransformer()).size());  // 4 rename and score\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9d6c5c6226ab2177d29ab21112ec81e5afb21e75","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["9d6c5c6226ab2177d29ab21112ec81e5afb21e75"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937d1992553892661e4efbb659656cc565a9e621"],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["937d1992553892661e4efbb659656cc565a9e621"],"9d6c5c6226ab2177d29ab21112ec81e5afb21e75":["2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"937d1992553892661e4efbb659656cc565a9e621":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["9d6c5c6226ab2177d29ab21112ec81e5afb21e75"],"9d6c5c6226ab2177d29ab21112ec81e5afb21e75":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","937d1992553892661e4efbb659656cc565a9e621"],"937d1992553892661e4efbb659656cc565a9e621":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}