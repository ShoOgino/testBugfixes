{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741","date":1397714897,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.length() > 0 ? outputSegment.nextChar() : -1;\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.length() > 0 ? outputSegment.nextChar() : -1;\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","bugFix":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f0c6d69031c318c402abfe2543736076e80a132","date":1404594729,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = ( ! outputSegment.isRead()) ? outputSegment.nextChar() : -1;\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = ( ! outputSegment.isRead()) ? outputSegment.nextChar() : -1;\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.length() > 0 ? outputSegment.nextChar() : -1;\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.length() > 0 ? outputSegment.nextChar() : -1;\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f0c6d69031c318c402abfe2543736076e80a132":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f0c6d69031c318c402abfe2543736076e80a132"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"4f0c6d69031c318c402abfe2543736076e80a132":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741":["4f0c6d69031c318c402abfe2543736076e80a132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}