{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean,boolean).mjava","commits":[{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean).mjava","sourceNew":"  /** Returns Pair(list of invalid document terms, Map of document term -> document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresPayload, boolean requiresContexts) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n      \n      // even if payload is not required usually have it\n      if (requiresPayload || usually()) {\n        // usually have valid payload field in document\n        if (usually()) {\n          Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n          doc.add(payload);\n        } else if (requiresPayload) {\n          invalidDoc = true;\n        }\n      }\n      \n      if (requiresContexts || usually()) {\n        if (usually()) {\n          for (int j = 0; j < atLeast(2); j++) {\n            doc.add(new StoredField(CONTEXT_FIELD_NAME, new BytesRef(\"context_\" + i + \"_\"+ j)));\n          }\n        }\n        // we should allow entries without context\n      }\n      \n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ? \n            new StoredField(WEIGHT_FIELD_NAME, 100d + i) : \n            new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n      \n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n      \n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","sourceOld":"  /** Returns Pair(list of invalid document terms, Map of document term -> document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresPayload) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n      \n      // even if payload is not required usually have it\n      if (requiresPayload || usually()) {\n        // usually have valid payload field in document\n        if (usually()) {\n          Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n          doc.add(payload);\n        } else if (requiresPayload) {\n          invalidDoc = true;\n        }\n      }\n      \n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ? \n            new StoredField(WEIGHT_FIELD_NAME, 100d + i) : \n            new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n      \n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n      \n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6992bd44f38ea79b60af675e2148c25fb638b765","date":1417146793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean,boolean).mjava","sourceNew":"  /** Returns Pair(list of invalid document terms, Map of document term -&gt; document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresPayload, boolean requiresContexts) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n      \n      // even if payload is not required usually have it\n      if (requiresPayload || usually()) {\n        // usually have valid payload field in document\n        if (usually()) {\n          Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n          doc.add(payload);\n        } else if (requiresPayload) {\n          invalidDoc = true;\n        }\n      }\n      \n      if (requiresContexts || usually()) {\n        if (usually()) {\n          for (int j = 0; j < atLeast(2); j++) {\n            doc.add(new StoredField(CONTEXT_FIELD_NAME, new BytesRef(\"context_\" + i + \"_\"+ j)));\n          }\n        }\n        // we should allow entries without context\n      }\n      \n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ? \n            new StoredField(WEIGHT_FIELD_NAME, 100d + i) : \n            new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n      \n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n      \n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","sourceOld":"  /** Returns Pair(list of invalid document terms, Map of document term -> document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresPayload, boolean requiresContexts) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n      \n      // even if payload is not required usually have it\n      if (requiresPayload || usually()) {\n        // usually have valid payload field in document\n        if (usually()) {\n          Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n          doc.add(payload);\n        } else if (requiresPayload) {\n          invalidDoc = true;\n        }\n      }\n      \n      if (requiresContexts || usually()) {\n        if (usually()) {\n          for (int j = 0; j < atLeast(2); j++) {\n            doc.add(new StoredField(CONTEXT_FIELD_NAME, new BytesRef(\"context_\" + i + \"_\"+ j)));\n          }\n        }\n        // we should allow entries without context\n      }\n      \n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ? \n            new StoredField(WEIGHT_FIELD_NAME, 100d + i) : \n            new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n      \n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n      \n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee590759ca28a3f2599ba7608ea0a50be4f540f6","date":1432142966,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#generateIndexDocuments(int,boolean,boolean).mjava","sourceNew":"  /** Returns Pair(list of invalid document terms, Map of document term -&gt; document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresContexts) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n\n      // even if payload is not required usually have it\n      if (usually()) {\n        Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n        doc.add(payload);\n      }\n\n      if (requiresContexts || usually()) {\n        if (usually()) {\n          for (int j = 0; j < atLeast(2); j++) {\n            doc.add(new StoredField(CONTEXT_FIELD_NAME, new BytesRef(\"context_\" + i + \"_\"+ j)));\n          }\n        }\n        // we should allow entries without context\n      }\n\n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ?\n                new StoredField(WEIGHT_FIELD_NAME, 100d + i) :\n                new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n\n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n\n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","sourceOld":"  /** Returns Pair(list of invalid document terms, Map of document term -&gt; document) */\n  private Map.Entry<List<String>, Map<String, Document>> generateIndexDocuments(int ndocs, boolean requiresPayload, boolean requiresContexts) {\n    Map<String, Document> docs = new HashMap<>();\n    List<String> invalidDocTerms = new ArrayList<>();\n    for(int i = 0; i < ndocs ; i++) {\n      Document doc = new Document();\n      boolean invalidDoc = false;\n      Field field = null;\n      // usually have valid term field in document\n      if (usually()) {\n        field = new TextField(FIELD_NAME, \"field_\" + i, Field.Store.YES);\n        doc.add(field);\n      } else {\n        invalidDoc = true;\n      }\n      \n      // even if payload is not required usually have it\n      if (requiresPayload || usually()) {\n        // usually have valid payload field in document\n        if (usually()) {\n          Field payload = new StoredField(PAYLOAD_FIELD_NAME, new BytesRef(\"payload_\" + i));\n          doc.add(payload);\n        } else if (requiresPayload) {\n          invalidDoc = true;\n        }\n      }\n      \n      if (requiresContexts || usually()) {\n        if (usually()) {\n          for (int j = 0; j < atLeast(2); j++) {\n            doc.add(new StoredField(CONTEXT_FIELD_NAME, new BytesRef(\"context_\" + i + \"_\"+ j)));\n          }\n        }\n        // we should allow entries without context\n      }\n      \n      // usually have valid weight field in document\n      if (usually()) {\n        Field weight = (rarely()) ? \n            new StoredField(WEIGHT_FIELD_NAME, 100d + i) : \n            new NumericDocValuesField(WEIGHT_FIELD_NAME, 100 + i);\n        doc.add(weight);\n      }\n      \n      String term = null;\n      if (invalidDoc) {\n        term = (field!=null) ? field.stringValue() : \"invalid_\" + i;\n        invalidDocTerms.add(term);\n      } else {\n        term = field.stringValue();\n      }\n      \n      docs.put(term, doc);\n    }\n    return new SimpleEntry<>(invalidDocTerms, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6992bd44f38ea79b60af675e2148c25fb638b765":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["6992bd44f38ea79b60af675e2148c25fb638b765"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"]},"commit2Childs":{"6992bd44f38ea79b60af675e2148c25fb638b765":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["6992bd44f38ea79b60af675e2148c25fb638b765"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}