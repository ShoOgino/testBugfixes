{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_select(List[T],int,int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void select(List<T> list, int place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place <= result.low) {\n      select(list, place, begin, result.low);\n    } else if (place >= result.high) {\n      select(list, place, result.high, end);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}