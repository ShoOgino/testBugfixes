{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testGroupFacetErrors().mjava","commits":[{"id":"c487301885230cc0dace89dc10bcb055560e047b","date":1563428297,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testGroupFacetErrors().mjava","pathOld":"/dev/null","sourceNew":"  public void testGroupFacetErrors() {\n    ModifiableSolrParams params = params(\"q\", \"*:*\", \"group\", \"true\", \"group.query\", \"myfield_s:*\",\n        \"facet\", \"true\", \"group.facet\", \"true\");\n\n    // with facet.field\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      h.query(req(params, \"facet.field\", \"myfield_s\"));\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Specify the group.field as parameter or local parameter\"));\n\n    // with facet.query\n    ex = expectThrows(SolrException.class, () -> {\n      h.query(req(params, \"facet.query\", \"myfield_s:*\"));\n    });\n    assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Specify the group.field as parameter or local parameter\"));\n\n    // with facet.range\n    ex = expectThrows(SolrException.class, () -> h.query(req(params, \"facet.range\", \"range_facet_l\",\n        \"facet.range.start\", \"43\", \"facet.range.end\", \"450\", \"facet.range.gap\", \"10\"))\n    );\n    assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Specify the group.field as parameter or local parameter\"));\n\n    // with facet.interval\n    ex = expectThrows(SolrException.class, () -> h.query(req(params, \"facet.interval\", \"range_facet_l\",\n        \"f.range_facet_l.facet.interval.set\", \"(43,60]\"))\n    );\n    assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Interval Faceting can't be used with group.facet\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c487301885230cc0dace89dc10bcb055560e047b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c487301885230cc0dace89dc10bcb055560e047b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c487301885230cc0dace89dc10bcb055560e047b"],"c487301885230cc0dace89dc10bcb055560e047b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}