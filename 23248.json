{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#assertEquals(String,TokenStream,TokenStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#assertEquals(String,TokenStream,TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#assertEquals(String,TokenStream,TokenStream).mjava","sourceNew":"  // we only check a few core attributes here.\n  // TODO: test other things\n  public void assertEquals(String s, TokenStream left, TokenStream right) throws Exception {\n    left.reset();\n    right.reset();\n    CharTermAttribute leftTerm = left.addAttribute(CharTermAttribute.class);\n    CharTermAttribute rightTerm = right.addAttribute(CharTermAttribute.class);\n    OffsetAttribute leftOffset = left.addAttribute(OffsetAttribute.class);\n    OffsetAttribute rightOffset = right.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute leftPos = left.addAttribute(PositionIncrementAttribute.class);\n    PositionIncrementAttribute rightPos = right.addAttribute(PositionIncrementAttribute.class);\n    \n    while (left.incrementToken()) {\n      assertTrue(\"wrong number of tokens for input: \" + s, right.incrementToken());\n      assertEquals(\"wrong term text for input: \" + s, leftTerm.toString(), rightTerm.toString());\n      assertEquals(\"wrong position for input: \" + s, leftPos.getPositionIncrement(), rightPos.getPositionIncrement());\n      assertEquals(\"wrong start offset for input: \" + s, leftOffset.startOffset(), rightOffset.startOffset());\n      assertEquals(\"wrong end offset for input: \" + s, leftOffset.endOffset(), rightOffset.endOffset());\n    };\n    assertFalse(\"wrong number of tokens for input: \" + s, right.incrementToken());\n    left.end();\n    right.end();\n    assertEquals(\"wrong final offset for input: \" + s, leftOffset.endOffset(), rightOffset.endOffset());\n    left.close();\n    right.close();\n  }\n\n","sourceOld":"  // we only check a few core attributes here.\n  // TODO: test other things\n  public void assertEquals(String s, TokenStream left, TokenStream right) throws Exception {\n    left.reset();\n    right.reset();\n    CharTermAttribute leftTerm = left.addAttribute(CharTermAttribute.class);\n    CharTermAttribute rightTerm = right.addAttribute(CharTermAttribute.class);\n    OffsetAttribute leftOffset = left.addAttribute(OffsetAttribute.class);\n    OffsetAttribute rightOffset = right.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute leftPos = left.addAttribute(PositionIncrementAttribute.class);\n    PositionIncrementAttribute rightPos = right.addAttribute(PositionIncrementAttribute.class);\n    \n    while (left.incrementToken()) {\n      assertTrue(\"wrong number of tokens for input: \" + s, right.incrementToken());\n      assertEquals(\"wrong term text for input: \" + s, leftTerm.toString(), rightTerm.toString());\n      assertEquals(\"wrong position for input: \" + s, leftPos.getPositionIncrement(), rightPos.getPositionIncrement());\n      assertEquals(\"wrong start offset for input: \" + s, leftOffset.startOffset(), rightOffset.startOffset());\n      assertEquals(\"wrong end offset for input: \" + s, leftOffset.endOffset(), rightOffset.endOffset());\n    };\n    assertFalse(\"wrong number of tokens for input: \" + s, right.incrementToken());\n    left.end();\n    right.end();\n    assertEquals(\"wrong final offset for input: \" + s, leftOffset.endOffset(), rightOffset.endOffset());\n    left.close();\n    right.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}