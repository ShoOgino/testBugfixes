{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testToString().mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    assertEquals(\"f:[2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, true, true).toString());\n    assertEquals(\"f:{2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, true).toString());\n    assertEquals(\"f:{2 TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, false).toString());\n    assertEquals(\"f:{* TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", null, 5L, false, false).toString());\n    assertEquals(\"f:[2 TO *}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, null, true, false).toString());\n\n    BytesRef min = new BytesRef(\"a\");\n    BytesRef max = new BytesRef(\"b\");\n    assertEquals(\"f:[[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, true, true).toString());\n    assertEquals(\"f:{[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, true).toString());\n    assertEquals(\"f:{[61] TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, false).toString());\n    assertEquals(\"f:{* TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", null, max, false, false).toString());\n    assertEquals(\"f:[[61] TO *}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, null, true, false).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testToString().mjava","sourceNew":"  public void testToString() {\n    assertEquals(\"f:[2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, true, true).toString());\n    assertEquals(\"f:{2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, true).toString());\n    assertEquals(\"f:{2 TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, false).toString());\n    assertEquals(\"f:{* TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", null, 5L, false, false).toString());\n    assertEquals(\"f:[2 TO *}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, null, true, false).toString());\n\n    BytesRef min = new BytesRef(\"a\");\n    BytesRef max = new BytesRef(\"b\");\n    assertEquals(\"f:[[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, true, true).toString());\n    assertEquals(\"f:{[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, true).toString());\n    assertEquals(\"f:{[61] TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, false).toString());\n    assertEquals(\"f:{* TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", null, max, false, false).toString());\n    assertEquals(\"f:[[61] TO *}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, null, true, false).toString());\n  }\n\n","sourceOld":"  public void testToString() {\n    assertEquals(\"f:[2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, true, true).toString());\n    assertEquals(\"f:{2 TO 5]\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, true).toString());\n    assertEquals(\"f:{2 TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, 5L, false, false).toString());\n    assertEquals(\"f:{* TO 5}\", DocValuesRangeQuery.newLongRange(\"f\", null, 5L, false, false).toString());\n    assertEquals(\"f:[2 TO *}\", DocValuesRangeQuery.newLongRange(\"f\", 2L, null, true, false).toString());\n\n    BytesRef min = new BytesRef(\"a\");\n    BytesRef max = new BytesRef(\"b\");\n    assertEquals(\"f:[[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, true, true).toString());\n    assertEquals(\"f:{[61] TO [62]]\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, true).toString());\n    assertEquals(\"f:{[61] TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, max, false, false).toString());\n    assertEquals(\"f:{* TO [62]}\", DocValuesRangeQuery.newBytesRefRange(\"f\", null, max, false, false).toString());\n    assertEquals(\"f:[[61] TO *}\", DocValuesRangeQuery.newBytesRefRange(\"f\", min, null, true, false).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}