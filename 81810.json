{"path":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.equals(\"_val_\")) {\n      return QueryParsing.parseFunction(queryText, schema);\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.equals(\"_val_\")) {\n      return QueryParsing.parseFunction(queryText, schema);\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d9d0a51c3327de369ec765bf55295b7b33641a3","date":1207691330,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    //Intercept poly fields, as they get expanded by default to an OR clause of\n    SchemaField sf = schema.getField(field);\n    //TODO: is there anyway to avoid this instance of check?\n    if (sf != null&& !(sf.getType() instanceof TextField)){//we have a poly field, deal with it specially by delegating to the FieldType\n      return sf.getType().getFieldQuery(parser, sf, queryText); \n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    //Intercept poly fields, as they get expanded by default to an OR clause of\n    SchemaField sf = schema.getField(field);\n    //TODO: is there anyway to avoid this instance of check?\n    if (sf != null&& !(sf.getType() instanceof TextField)){//we have a poly field, deal with it specially by delegating to the FieldType\n      return sf.getType().getFieldQuery(parser, sf, queryText); \n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        if (parser==null) {\n          return QueryParsing.parseFunction(queryText, schema);\n        } else {\n          QParser nested = parser.subQuery(queryText, \"func\");\n          return nested.getQuery();\n        }\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    //Intercept poly fields, as they get expanded by default to an OR clause of\n    SchemaField sf = schema.getField(field);\n    //TODO: is there anyway to avoid this instance of check?\n    if (sf != null&& !(sf.getType() instanceof TextField)){//we have a poly field, deal with it specially by delegating to the FieldType\n      return sf.getType().getFieldQuery(parser, sf, queryText); \n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"9d9d0a51c3327de369ec765bf55295b7b33641a3":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["ad94625fb8d088209f46650c8097196fec67f00c"],"9d9d0a51c3327de369ec765bf55295b7b33641a3":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}