{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","commits":[{"id":"8854763f018feadbb30c35a83fd9599adb51ef63","date":1534341747,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f","date":1536587656,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":["8854763f018feadbb30c35a83fd9599adb51ef63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    emptyPreferences = initialClusterPreferences.isEmpty();\n    if (emptyPreferences) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    if (initialClusterPreferences.isEmpty()) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    emptyPreferences = initialClusterPreferences.isEmpty();\n    if (emptyPreferences) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n\n    // if json map has CLUSTER_POLICY and even if its size is 0, we consider it as a custom cluster policy\n    // and do not add the implicit policy clauses\n    emptyClusterPolicy = !jsonMap.containsKey(CLUSTER_POLICY);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, DEFAULT_CLUSTER_POLICY_JSON)).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()) {\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    emptyPreferences = initialClusterPreferences.isEmpty();\n    if (emptyPreferences) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()){\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object],int).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Policy(Map<String, Object> jsonMap, int version) {\n    this.empty = jsonMap.get(CLUSTER_PREFERENCES) == null && jsonMap.get(CLUSTER_POLICY) == null && jsonMap.get(POLICIES) == null;\n    this.zkVersion = version;\n    int[] idx = new int[1];\n    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()\n        .map(m -> new Preference(m, idx[0]++))\n        .collect(toList());\n    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {\n      Preference preference = initialClusterPreferences.get(i);\n      preference.next = initialClusterPreferences.get(i + 1);\n    }\n    emptyPreferences = initialClusterPreferences.isEmpty();\n    if (emptyPreferences) {\n      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);\n    }\n    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);\n    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);\n    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));\n    List<String> newParams = new ArrayList<>(paramsOfInterest);\n\n    // if json map has CLUSTER_POLICY and even if its size is 0, we consider it as a custom cluster policy\n    // and do not add the implicit policy clauses\n    emptyClusterPolicy = !jsonMap.containsKey(CLUSTER_POLICY);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, DEFAULT_CLUSTER_POLICY_JSON)).stream()\n        .map(Clause::create)\n        .filter(clause -> {\n          clause.addTags(newParams);\n          return true;\n        })\n        .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n\n    for (String newParam : new ArrayList<>(newParams)) {\n      Type t = VariableBase.getTagType(newParam);\n      if(t != null && !t.associatedPerNodeValues.isEmpty()) {\n        for (String s : t.associatedPerNodeValues) {\n          if(!newParams.contains(s)) newParams.add(s);\n        }\n      }\n    }\n\n    this.policies = Collections.unmodifiableMap(\n        clausesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));\n    List<Pair<String, Type>> params = newParams.stream()\n        .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n        .collect(toList());\n    //let this be there always, there is no extra cost\n    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));\n    this.params = Collections.unmodifiableList(params);\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["8854763f018feadbb30c35a83fd9599adb51ef63"],"8854763f018feadbb30c35a83fd9599adb51ef63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8854763f018feadbb30c35a83fd9599adb51ef63"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"8854763f018feadbb30c35a83fd9599adb51ef63":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}