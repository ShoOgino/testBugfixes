{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","commits":[{"id":"9359ad4a5596673c3154ffa1133458f00e124234","date":1428012026,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        r.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        r.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        r.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    OrdinalMap ordinalMap = OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    OrdinalMap ordinalMap = OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    MultiDocValues.OrdinalMap ordinalMap = MultiDocValues.OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testSimpleOrdinalsJoin().mjava","sourceNew":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    OrdinalMap ordinalMap = OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits.value);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits.value);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits.value);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleOrdinalsJoin() throws Exception {\n    final String idField = \"id\";\n    final String productIdField = \"productId\";\n    // A field indicating to what type a document belongs, which is then used to distinques between documents during joining.\n    final String typeField = \"type\";\n    // A single sorted doc values field that holds the join values for all document types.\n    // Typically during indexing a schema will automatically create this field with the values\n    final String joinField = idField + productIdField;\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(idField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"1\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"1\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"product\", Field.Store.NO));\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(productIdField, \"2\", Field.Store.NO));\n    doc.add(new TextField(typeField, \"price\", Field.Store.NO));\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(joinField, new BytesRef(\"2\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    IndexReader r = indexSearcher.getIndexReader();\n    SortedDocValues[] values = new SortedDocValues[r.leaves().size()];\n    for (int i = 0; i < values.length; i++) {\n      LeafReader leafReader =  r.leaves().get(i).reader();\n      values[i] = DocValues.getSorted(leafReader, joinField);\n    }\n    OrdinalMap ordinalMap = OrdinalMap.build(\n        null, values, PackedInts.DEFAULT\n    );\n\n    Query toQuery = new TermQuery(new Term(typeField, \"price\"));\n    Query fromQuery = new TermQuery(new Term(\"name\", \"name2\"));\n    // Search for product and return prices\n    Query joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(4, result.scoreDocs[0].doc);\n    assertEquals(5, result.scoreDocs[1].doc);\n\n    fromQuery = new TermQuery(new Term(\"name\", \"name1\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(1, result.scoreDocs[0].doc);\n    assertEquals(2, result.scoreDocs[1].doc);\n\n    // Search for prices and return products\n    fromQuery = new TermQuery(new Term(\"price\", \"20.0\"));\n    toQuery = new TermQuery(new Term(typeField, \"product\"));\n    joinQuery = JoinUtil.createJoinQuery(joinField, fromQuery, toQuery, indexSearcher, ScoreMode.None, ordinalMap);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"957c610636f393a85a38f1af670540028db13e6b":["d211216c83f01894810543d1c107160a9ae3650b"],"9359ad4a5596673c3154ffa1133458f00e124234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["d211216c83f01894810543d1c107160a9ae3650b","957c610636f393a85a38f1af670540028db13e6b"],"d211216c83f01894810543d1c107160a9ae3650b":["9359ad4a5596673c3154ffa1133458f00e124234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9359ad4a5596673c3154ffa1133458f00e124234"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["957c610636f393a85a38f1af670540028db13e6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","83788ad129a5154d5c6562c4e8ce3db48793aada"],"9359ad4a5596673c3154ffa1133458f00e124234":["d211216c83f01894810543d1c107160a9ae3650b","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"d211216c83f01894810543d1c107160a9ae3650b":["957c610636f393a85a38f1af670540028db13e6b","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9359ad4a5596673c3154ffa1133458f00e124234","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}