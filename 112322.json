{"path":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicIndexReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","sourceOld":"  public int docId(AtomicIndexReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(IndexReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","sourceOld":"  public int docId(IndexReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}