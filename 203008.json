{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying a prefix with the given\n   * number of components of the path given in an existing CategoryPath\n   * object.\n   * <P>\n   * If the given length is negative or bigger than the given path's actual\n   * length, the full path is taken.\n   * <P>\n   * This constructor is often convenient for creating a temporary object with\n   * a path's prefix, but this practice is wasteful, and therefore\n   * inadvisable. Rather, the application should be written in a way that\n   * allows considering only a prefix of a given path, without needing to make\n   * a copy of that path.\n   */\n  public CategoryPath(CategoryPath existing, int prefixLen) {\n    if (prefixLen < 0 || prefixLen > existing.ncomponents) {\n      ncomponents = existing.ncomponents;\n    } else {\n      ncomponents = (short) prefixLen;\n    }\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122df9792217770469ede4da987d6b5ce2cbefd7","date":1358755596,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92a7cdc9f75cac72d21026048992b5a768dfa914","date":1358938986,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(final CategoryPath copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private CategoryPath(final CategoryPath copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(CategoryPath copyFrom, int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private FacetLabel(final FacetLabel copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(final CategoryPath copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  // Used by subpath\n  private CategoryPath(final CategoryPath copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"92a7cdc9f75cac72d21026048992b5a768dfa914":["122df9792217770469ede4da987d6b5ce2cbefd7"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["92a7cdc9f75cac72d21026048992b5a768dfa914","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","122df9792217770469ede4da987d6b5ce2cbefd7"],"122df9792217770469ede4da987d6b5ce2cbefd7":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["92a7cdc9f75cac72d21026048992b5a768dfa914"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","92a7cdc9f75cac72d21026048992b5a768dfa914"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","122df9792217770469ede4da987d6b5ce2cbefd7"],"92a7cdc9f75cac72d21026048992b5a768dfa914":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b","b2d5244a676b83c2d551c3746e8181588ba619e1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"122df9792217770469ede4da987d6b5ce2cbefd7":["92a7cdc9f75cac72d21026048992b5a768dfa914","07155cdd910937cdf6877e48884d5782845c8b8b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}