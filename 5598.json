{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BitUtil.bitCount(bits[i]));\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","b11b097f011a298f1a54676482032c2b261e26f3"],"b11b097f011a298f1a54676482032c2b261e26f3":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b11b097f011a298f1a54676482032c2b261e26f3":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}