{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testNonExistingsField().mjava","sourceNew":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}