{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2676f60312754dc25ef542551cb2623527013a4","date":1394298418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  static FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String parts[] = flagLine.split(\"\\\\s+\");\n    if (parts.length != 2) {\n      throw new IllegalArgumentException(\"Illegal FLAG specification: \" + flagLine);\n    }\n    String flagType = parts[1];\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  static FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String parts[] = flagLine.split(\"\\\\s+\");\n    if (parts.length != 2) {\n      throw new IllegalArgumentException(\"Illegal FLAG specification: \" + flagLine);\n    }\n    String flagType = parts[1];\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2676f60312754dc25ef542551cb2623527013a4":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["ba791bce8103c79e38f957e9c5a53a75871bd918","d2676f60312754dc25ef542551cb2623527013a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2676f60312754dc25ef542551cb2623527013a4"]},"commit2Childs":{"d2676f60312754dc25ef542551cb2623527013a4":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["d2676f60312754dc25ef542551cb2623527013a4","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}