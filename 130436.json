{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag]).mjava","commits":[{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag]).mjava","pathOld":"/dev/null","sourceNew":"  static UnifiedHighlighter randomUnifiedHighlighter(IndexSearcher searcher, Analyzer indexAnalyzer,\n                                                             EnumSet<HighlightFlag> mandatoryFlags) {\n    if (random().nextBoolean()) {\n      return new UnifiedHighlighter(searcher, indexAnalyzer);\n    } else {\n      final UnifiedHighlighter uh = new UnifiedHighlighter(searcher, indexAnalyzer) {\n        @Override\n        protected Set<HighlightFlag> getFlags(String field) {\n          final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);\n          int r = random().nextInt();\n          for (HighlightFlag highlightFlag : HighlightFlag.values()) {\n            if (((1 << highlightFlag.ordinal()) & r) == 0) {\n              result.add(highlightFlag);\n            }\n          }\n          return result;\n        }\n      };\n      uh.setCacheFieldValCharsThreshold(random().nextInt(100));\n      if (random().nextBoolean()) {\n        uh.setFieldMatcher(f -> true); // requireFieldMatch==false\n      }\n      return uh;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag]).mjava","pathOld":"/dev/null","sourceNew":"  static UnifiedHighlighter randomUnifiedHighlighter(IndexSearcher searcher, Analyzer indexAnalyzer,\n                                                             EnumSet<HighlightFlag> mandatoryFlags) {\n    if (random().nextBoolean()) {\n      return new UnifiedHighlighter(searcher, indexAnalyzer);\n    } else {\n      final UnifiedHighlighter uh = new UnifiedHighlighter(searcher, indexAnalyzer) {\n        @Override\n        protected Set<HighlightFlag> getFlags(String field) {\n          final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);\n          int r = random().nextInt();\n          for (HighlightFlag highlightFlag : HighlightFlag.values()) {\n            if (((1 << highlightFlag.ordinal()) & r) == 0) {\n              result.add(highlightFlag);\n            }\n          }\n          return result;\n        }\n      };\n      uh.setCacheFieldValCharsThreshold(random().nextInt(100));\n      if (random().nextBoolean()) {\n        uh.setFieldMatcher(f -> true); // requireFieldMatch==false\n      }\n      return uh;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag]).mjava","sourceNew":null,"sourceOld":"  static UnifiedHighlighter randomUnifiedHighlighter(IndexSearcher searcher, Analyzer indexAnalyzer,\n                                                             EnumSet<HighlightFlag> mandatoryFlags) {\n    if (random().nextBoolean()) {\n      return new UnifiedHighlighter(searcher, indexAnalyzer);\n    } else {\n      final UnifiedHighlighter uh = new UnifiedHighlighter(searcher, indexAnalyzer) {\n        @Override\n        protected Set<HighlightFlag> getFlags(String field) {\n          final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);\n          int r = random().nextInt();\n          for (HighlightFlag highlightFlag : HighlightFlag.values()) {\n            if (((1 << highlightFlag.ordinal()) & r) == 0) {\n              result.add(highlightFlag);\n            }\n          }\n          return result;\n        }\n      };\n      uh.setCacheFieldValCharsThreshold(random().nextInt(100));\n      if (random().nextBoolean()) {\n        uh.setFieldMatcher(f -> true); // requireFieldMatch==false\n      }\n      return uh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}