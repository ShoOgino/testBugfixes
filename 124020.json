{"path":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","commits":[{"id":"f7e2c5596ef3fbb03572368a66afb40a500404ab","date":1297903084,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840","79900e89f08cc17c4bcf49789dd61a2236ee7840","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"c26f00b574427b55127e869b935845554afde1fa":["f7e2c5596ef3fbb03572368a66afb40a500404ab","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f7e2c5596ef3fbb03572368a66afb40a500404ab","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}