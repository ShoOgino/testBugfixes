{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#rankSkip(IndexedDISI,int).mjava","commits":[{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#rankSkip(IndexedDISI,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the distance between the current position and the target is > 8 words, the rank cache will\n   * be used to guarantee a worst-case of 1 rank-lookup and 7 word-read-and-count-bits operations.\n   * Note: This does not guarantee a skip up to target, only up to nearest rank boundary. It is the\n   * responsibility of the caller to iterate further to reach target.\n   * @param disi standard DISI.\n   * @param target the wanted docID for which to calculate set-flag and index.\n   * @throws IOException if a disi seek failed.\n   */\n  private void rankSkip(IndexedDISI disi, int target) throws IOException {\n    final int targetInBlock = target & 0xFFFF;\n    final int targetWordIndex = targetInBlock >>> 6;\n\n    // If the distance between the current position and the target is >= 8\n    // then it pays to use the rank to jump\n    if (!(disi.cache.hasRank() && targetWordIndex - disi.wordIndex >= IndexedDISICache.RANK_BLOCK_LONGS)) {\n      return;\n    }\n\n    int rankPos = disi.cache.denseRankPosition(target);\n    if (rankPos == -1) {\n      return;\n    }\n    int rank = disi.cache.getRankInBlock(rankPos);\n    if (rank == -1) {\n      return;\n    }\n    int rankIndex = disi.denseOrigoIndex + rank;\n    int rankWordIndex = (rankPos & 0xFFFF) >> 6;\n    long rankOffset = disi.blockStart + 4 + (rankWordIndex * 8);\n\n    long mark = disi.slice.getFilePointer();\n    disi.slice.seek(rankOffset);\n    long rankWord = disi.slice.readLong();\n    int rankNOO = rankIndex + Long.bitCount(rankWord);\n    rankOffset += Long.BYTES;\n\n\n    //disi.slice.seek(mark);\n    disi.wordIndex = rankWordIndex;\n    disi.word = rankWord;\n    disi.numberOfOnes = rankNOO;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#rankSkip(IndexedDISI,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the distance between the current position and the target is > 8 words, the rank cache will\n   * be used to guarantee a worst-case of 1 rank-lookup and 7 word-read-and-count-bits operations.\n   * Note: This does not guarantee a skip up to target, only up to nearest rank boundary. It is the\n   * responsibility of the caller to iterate further to reach target.\n   * @param disi standard DISI.\n   * @param target the wanted docID for which to calculate set-flag and index.\n   * @throws IOException if a disi seek failed.\n   */\n  private void rankSkip(IndexedDISI disi, int target) throws IOException {\n    final int targetInBlock = target & 0xFFFF;\n    final int targetWordIndex = targetInBlock >>> 6;\n\n    // If the distance between the current position and the target is >= 8\n    // then it pays to use the rank to jump\n    if (!(disi.cache.hasRank() && targetWordIndex - disi.wordIndex >= IndexedDISICache.RANK_BLOCK_LONGS)) {\n      return;\n    }\n\n    int rankPos = disi.cache.denseRankPosition(target);\n    if (rankPos == -1) {\n      return;\n    }\n    int rank = disi.cache.getRankInBlock(rankPos);\n    if (rank == -1) {\n      return;\n    }\n    int rankIndex = disi.denseOrigoIndex + rank;\n    int rankWordIndex = (rankPos & 0xFFFF) >> 6;\n    long rankOffset = disi.blockStart + 4 + (rankWordIndex * 8);\n\n    long mark = disi.slice.getFilePointer();\n    disi.slice.seek(rankOffset);\n    long rankWord = disi.slice.readLong();\n    int rankNOO = rankIndex + Long.bitCount(rankWord);\n    rankOffset += Long.BYTES;\n\n\n    //disi.slice.seek(mark);\n    disi.wordIndex = rankWordIndex;\n    disi.word = rankWord;\n    disi.numberOfOnes = rankNOO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISI#rankSkip(IndexedDISI,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the distance between the current position and the target is > 8 words, the rank cache will\n   * be used to guarantee a worst-case of 1 rank-lookup and 7 word-read-and-count-bits operations.\n   * Note: This does not guarantee a skip up to target, only up to nearest rank boundary. It is the\n   * responsibility of the caller to iterate further to reach target.\n   * @param disi standard DISI.\n   * @param target the wanted docID for which to calculate set-flag and index.\n   * @throws IOException if a disi seek failed.\n   */\n  private void rankSkip(IndexedDISI disi, int target) throws IOException {\n    final int targetInBlock = target & 0xFFFF;\n    final int targetWordIndex = targetInBlock >>> 6;\n\n    // If the distance between the current position and the target is >= 8\n    // then it pays to use the rank to jump\n    if (!(disi.cache.hasRank() && targetWordIndex - disi.wordIndex >= IndexedDISICache.RANK_BLOCK_LONGS)) {\n      return;\n    }\n\n    int rankPos = disi.cache.denseRankPosition(target);\n    if (rankPos == -1) {\n      return;\n    }\n    int rank = disi.cache.getRankInBlock(rankPos);\n    if (rank == -1) {\n      return;\n    }\n    int rankIndex = disi.denseOrigoIndex + rank;\n    int rankWordIndex = (rankPos & 0xFFFF) >> 6;\n    long rankOffset = disi.blockStart + 4 + (rankWordIndex * 8);\n\n    long mark = disi.slice.getFilePointer();\n    disi.slice.seek(rankOffset);\n    long rankWord = disi.slice.readLong();\n    int rankNOO = rankIndex + Long.bitCount(rankWord);\n    rankOffset += Long.BYTES;\n\n\n    //disi.slice.seek(mark);\n    disi.wordIndex = rankWordIndex;\n    disi.word = rankWord;\n    disi.numberOfOnes = rankNOO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}