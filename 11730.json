{"path":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean,FacetSearchParams).mjava","commits":[{"id":"4b31c82c6df2339d0c31b592f919be77383dac10","date":1369815843,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean,FacetSearchParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, boolean useRandomSampler, FacetSearchParams sParams) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    /*\n     * Set sampling to Exact fixing with TakmiSampleFixer as it is not easy to\n     * validate results with amortized results. \n     */\n    samplingParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, sParams));\n        \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setOversampleFactor(5.0 * retryFactor); // Oversampling \n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  private Sampler createSampler(int nTrial, boolean useRandomSampler, FacetSearchParams sParams) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    /*\n     * Set sampling to Exact fixing with TakmiSampleFixer as it is not easy to\n     * validate results with amortized results. \n     */\n    samplingParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, sParams));\n        \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setOversampleFactor(5.0 * retryFactor); // Oversampling \n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  private Sampler createSampler(int nTrial, boolean useRandomSampler, FacetSearchParams sParams) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    /*\n     * Set sampling to Exact fixing with TakmiSampleFixer as it is not easy to\n     * validate results with amortized results. \n     */\n    samplingParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, sParams));\n        \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setOversampleFactor(5.0 * retryFactor); // Oversampling \n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["4b31c82c6df2339d0c31b592f919be77383dac10"],"4b31c82c6df2339d0c31b592f919be77383dac10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["4b31c82c6df2339d0c31b592f919be77383dac10","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4b31c82c6df2339d0c31b592f919be77383dac10":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b31c82c6df2339d0c31b592f919be77383dac10"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}