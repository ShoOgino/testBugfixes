{"path":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPaths(String,ApiBag,Map[String,Set[String]]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPaths(String,ApiBag,Map[String,Set[String]]).mjava","pathOld":"/dev/null","sourceNew":"  private static void getSubPaths(String path, ApiBag bag, Map<String, Set<String>> pathsVsMethod) {\n    for (SolrRequest.METHOD m : SolrRequest.METHOD.values()) {\n      PathTrie<Api> registry = bag.getRegistry(m.toString());\n      if (registry != null) {\n        HashSet<String> subPaths = new HashSet<>();\n        registry.lookup(path, new HashMap<>(), subPaths);\n        for (String subPath : subPaths) {\n          Set<String> supportedMethods = pathsVsMethod.get(subPath);\n          if (supportedMethods == null) pathsVsMethod.put(subPath, supportedMethods = new HashSet<>());\n          supportedMethods.add(m.toString());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getSubPaths(String,ApiBag,Map[String,Set[String]]).mjava","pathOld":"/dev/null","sourceNew":"  private static void getSubPaths(String path, ApiBag bag, Map<String, Set<String>> pathsVsMethod) {\n    for (SolrRequest.METHOD m : SolrRequest.METHOD.values()) {\n      PathTrie<Api> registry = bag.getRegistry(m.toString());\n      if (registry != null) {\n        HashSet<String> subPaths = new HashSet<>();\n        registry.lookup(path, new HashMap<>(), subPaths);\n        for (String subPath : subPaths) {\n          Set<String> supportedMethods = pathsVsMethod.get(subPath);\n          if (supportedMethods == null) pathsVsMethod.put(subPath, supportedMethods = new HashSet<>());\n          supportedMethods.add(m.toString());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}