{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.get(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(50);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            Index.toIndex(true, random.nextBoolean(), random.nextBoolean())));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.forceMerge(1);\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.optimize();\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testAddIndexesStableFieldNumbers().mjava","sourceNew":null,"sourceOld":"  public void testAddIndexesStableFieldNumbers() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(50) : random.nextInt(10));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n\n      Directory base = newDirectory();\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      Document doc = new Document();\n      for (String string : fieldNames) {\n        FieldType customType = new FieldType();\n        customType.setIndexed(true);\n        customType.setTokenized(random.nextBoolean());\n        customType.setOmitNorms(random.nextBoolean());\n        doc.add(newField(string,\n            _TestUtil.randomRealisticUnicodeString(random),\n            customType));\n\n      }\n      writer.addDocument(doc);\n      writer.commit();\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      final Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      assertEquals(entries.size(), fieldNames.size());\n      for (Entry<String, Integer> entry : entries) {\n        // all fields are in this fieldMap\n        assertTrue(fieldNames.contains(entry.getKey()));\n      }\n      writer.close();\n\n      int numIndexes = 1 + random.nextInt(10);\n      for (int j = 0; j < numIndexes; j++) {\n        Directory toAdd = buildRandomIndex(fieldNames.toArray(new String[0]),\n            1 + random.nextInt(50),\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        if (random.nextBoolean()) {\n          IndexReader open = IndexReader.open(toAdd);\n          w.addIndexes(open);\n          open.close();\n        } else {\n          w.addIndexes(toAdd);\n        }\n\n        w.close();\n        FieldNumberBiMap map = w.segmentInfos\n            .getOrLoadGlobalFieldNumberMap(toAdd);\n        assertEquals(entries, map.entries());\n        toAdd.close();\n      }\n      IndexWriter w = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          new LogByteSizeMergePolicy()));\n      w.forceMerge(1);\n      w.close();\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(base);\n      SegmentInfo segmentInfo = sis.info(sis.size() - 1);// last segment must\n                                                        // have all fields with\n                                                        // consistent numbers\n      FieldInfos fieldInfos = segmentInfo.getFieldInfos();\n      assertEquals(fieldInfos.size(), entries.size());\n      for (Entry<String, Integer> entry : entries) {\n        assertEquals(entry.getValue(),\n            Integer.valueOf(fieldInfos.fieldNumber(entry.getKey())));\n        assertEquals(entry.getKey(), fieldInfos.fieldName(entry.getValue()));\n      }\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cca56866c19997e28ef073622656669c15210540"],"319624eb66a10b717d3e66af448543e7dc5c479d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["319624eb66a10b717d3e66af448543e7dc5c479d"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["319624eb66a10b717d3e66af448543e7dc5c479d"],"962d04139994fce5193143ef35615499a9a96d78":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}