{"path":"src/java/org/apache/solr/search/SortedIntDocSet#intersection(int[],int,int[],int,int[]).mjava","commits":[{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SortedIntDocSet#intersection(int[],int,int[],int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** puts the intersection of a and b into the target array and returns the size */\n  public static int intersection(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena > lenb) {\n      int ti=lena; lena=lenb; lenb=ti;\n      int[] ta=a; a=b; b=ta;\n    }\n\n    if (lena==0) return 0;\n\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return intersectionBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        target[icount++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersection(int[],int,int[],int,int[]).mjava","pathOld":"src/java/org/apache/solr/search/SortedIntDocSet#intersection(int[],int,int[],int,int[]).mjava","sourceNew":"  /** puts the intersection of a and b into the target array and returns the size */\n  public static int intersection(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena > lenb) {\n      int ti=lena; lena=lenb; lenb=ti;\n      int[] ta=a; a=b; b=ta;\n    }\n\n    if (lena==0) return 0;\n\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return intersectionBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        target[icount++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","sourceOld":"  /** puts the intersection of a and b into the target array and returns the size */\n  public static int intersection(int a[], int lena, int b[], int lenb, int[] target) {\n    if (lena > lenb) {\n      int ti=lena; lena=lenb; lenb=ti;\n      int[] ta=a; a=b; b=ta;\n    }\n\n    if (lena==0) return 0;\n\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((lenb>>3) >= lena) {\n      return intersectionBinarySearch(a, lena, b, lenb, target);\n    }\n\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      if (doca > docb) {\n        if (++j >= lenb) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= lena) break;\n        doca=a[i];\n      } else {\n        target[icount++] = doca;\n        if (++i >= lena) break;\n        doca=a[i];\n        if (++j >= lenb) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["30391436869a41b74d4ba7098c40d955b686a10c"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}