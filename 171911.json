{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","commits":[{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistingsField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistingsField() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\"), PostingsEnum.FLAG_ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termPositionsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\"), PostingsEnum.ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.termDocsEnum(new Term(\"not-in-index\", \"foo\"), PostingsEnum.FLAG_ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04834a792874aacf8d8b111a39603c23fbd777","date":1428406678,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\"), PostingsEnum.ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\"), PostingsEnum.ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testNonExistentField().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNonExistentField().mjava","sourceNew":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\"), PostingsEnum.ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","sourceOld":"  public void testNonExistentField() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertNull(reader.getNumericDocValues(\"not-in-index\"));\n    assertNull(reader.getNormValues(\"not-in-index\"));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\")));\n    assertNull(reader.postings(new Term(\"not-in-index\", \"foo\"), PostingsEnum.ALL));\n    assertNull(reader.terms(\"not-in-index\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"bb04834a792874aacf8d8b111a39603c23fbd777":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["bb04834a792874aacf8d8b111a39603c23fbd777"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["bb04834a792874aacf8d8b111a39603c23fbd777"],"bb04834a792874aacf8d8b111a39603c23fbd777":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}