{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = (PayloadAttribute) nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = (PayloadAttribute) nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    int count = 0;\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = nptf.getAttribute(OffsetAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      Payload pay = payloadAtt.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + offsetAtt.startOffset(), start == offsetAtt.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + offsetAtt.endOffset(), end == offsetAtt.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}