{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n            spec.offsetsAreCorrect = false;\n          }\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n            spec.offsetsAreCorrect = false;\n          }\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19786ac48e7c7cb2da0d29218e579be4c750f8ff","date":1357748196,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n            spec.offsetsAreCorrect = false;\n          }\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n            spec.offsetsAreCorrect = false;\n          }\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newTokenizer(Random,Reader).mjava","sourceNew":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final Object args[] = newTokenizerArgs(random, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        }\n      }\n      return spec;\n    }\n\n","sourceOld":"    // create a new random tokenizer from classpath\n    private TokenizerSpec newTokenizer(Random random, Reader reader) {\n      TokenizerSpec spec = new TokenizerSpec();\n      while (spec.tokenizer == null) {\n        final Constructor<? extends Tokenizer> ctor = tokenizers.get(random.nextInt(tokenizers.size()));\n        final StringBuilder descr = new StringBuilder();\n        final CheckThatYouDidntReadAnythingReaderWrapper wrapper = new CheckThatYouDidntReadAnythingReaderWrapper(reader);\n        final Object args[] = newTokenizerArgs(random, wrapper, ctor.getParameterTypes());\n        if (broken(ctor, args)) {\n          continue;\n        }\n        spec.tokenizer = createComponent(ctor, args, descr);\n        if (spec.tokenizer != null) {\n          spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n          spec.toString = descr.toString();\n        } else {\n          assertFalse(ctor.getDeclaringClass().getName() + \" has read something in ctor but failed with UOE/IAE\", wrapper.readSomething);\n        }\n      }\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":["ad55dd51ee5593c207639943b98a58782872b232"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"19786ac48e7c7cb2da0d29218e579be4c750f8ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["19786ac48e7c7cb2da0d29218e579be4c750f8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","19786ac48e7c7cb2da0d29218e579be4c750f8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"19786ac48e7c7cb2da0d29218e579be4c750f8ff":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["19786ac48e7c7cb2da0d29218e579be4c750f8ff","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}