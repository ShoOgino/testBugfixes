{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#process(int,int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}