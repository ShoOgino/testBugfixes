{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","commits":[{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n      AutoScalingConfig autoScalingConfig = solrCloudManager.getDistribStateManager().getAutoScalingConfig();\n\n      StrategyType strategyType = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n        strategyType = StrategyType.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategyType = StrategyType.RULES;\n      } else {\n        strategyType = StrategyType.POLICY;\n      }\n\n      switch (strategyType) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategyType);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n      AutoScalingConfig autoScalingConfig = solrCloudManager.getDistribStateManager().getAutoScalingConfig();\n\n      StrategyType strategyType = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !CloudUtil.usePolicyFramework(collection, solrCloudManager)) {\n        strategyType = StrategyType.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategyType = StrategyType.RULES;\n      } else {\n        strategyType = StrategyType.POLICY;\n      }\n\n      switch (strategyType) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategyType);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n      AutoScalingConfig autoScalingConfig = solrCloudManager.getDistribStateManager().getAutoScalingConfig();\n\n      StrategyType strategyType = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n        strategyType = StrategyType.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategyType = StrategyType.RULES;\n      } else {\n        strategyType = StrategyType.POLICY;\n      }\n\n      switch (strategyType) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategyType);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !usePolicyFramework(collection, solrCloudManager)) {\n        strategy = Strategy.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.POLICY;\n      }\n\n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n      AutoScalingConfig autoScalingConfig = solrCloudManager.getDistribStateManager().getAutoScalingConfig();\n\n      StrategyType strategyType = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !CloudUtil.usePolicyFramework(collection, solrCloudManager)) {\n        strategyType = StrategyType.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategyType = StrategyType.RULES;\n      } else {\n        strategyType = StrategyType.POLICY;\n      }\n\n      switch (strategyType) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategyType);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !usePolicyFramework(collection, solrCloudManager)) {\n        strategy = Strategy.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.POLICY;\n      }\n\n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !usePolicyFramework(collection, solrCloudManager)) {\n        strategy = Strategy.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.POLICY;\n      }\n\n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      String policyName = collection.getStr(POLICY);\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if ((ruleMaps == null || ruleMaps.isEmpty()) && !usePolicyFramework(collection, solrCloudManager)) {\n        strategy = Strategy.LEGACY;\n      } else if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.POLICY;\n      }\n\n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        case POLICY:\n          return new PolicyBasedAssignStrategy(policyName);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,CloudConfig,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, CloudConfig cloudConfig, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,CloudConfig,DocCollection).mjava","sourceNew":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","sourceOld":"    public AssignStrategy create(ClusterState clusterState, CloudConfig cloudConfig, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":4,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":null,"sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":4,"author":"noblepaul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.AssignStrategyFactory#create(ClusterState,DocCollection).mjava","sourceNew":null,"sourceOld":"    public AssignStrategy create(ClusterState clusterState, DocCollection collection) throws IOException, InterruptedException {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<Map> ruleMaps = (List<Map>) collection.get(\"rule\");\n      @SuppressWarnings({\"rawtypes\"})\n      List snitches = (List) collection.get(SNITCH);\n\n      Strategy strategy = null;\n      if (ruleMaps != null && !ruleMaps.isEmpty()) {\n        strategy = Strategy.RULES;\n      } else {\n        strategy = Strategy.LEGACY;        \n      }\n      \n      switch (strategy) {\n        case LEGACY:\n          return new LegacyAssignStrategy();\n        case RULES:\n          List<Rule> rules = new ArrayList<>();\n          for (Object map : ruleMaps) rules.add(new Rule((Map) map));\n          return new RulesBasedAssignStrategy(rules, snitches, clusterState);\n        default:\n          throw new Assign.AssignmentException(\"Unknown strategy type: \" + strategy);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["e7b17e79a71117668ecbf8d3417c876e41396565"],"c526352db87264a72a7a9ad68c1b769b81e54305":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["e7b17e79a71117668ecbf8d3417c876e41396565","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"e7b17e79a71117668ecbf8d3417c876e41396565":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"3f504512a03d978990cbff30db0522b354e846db":["c526352db87264a72a7a9ad68c1b769b81e54305"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["3f504512a03d978990cbff30db0522b354e846db"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}