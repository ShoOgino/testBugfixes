{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","commits":[{"id":"43cfa455b570ba7bf8eefe91de210d46c68a0a2a","date":1372853690,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,DICTIONARY,Version).mjava","sourceNew":"  /**\n   * @param in   input token stream\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer();\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","sourceOld":"  /**\n   * Builds a filter for given PolishStemmer.DICTIONARY enum.\n   * \n   * @param in   input token stream\n   * @param dict PolishStemmer.DICTIONARY enum\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final DICTIONARY dict, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer(dict);\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b","date":1372856804,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","sourceNew":"  /**\n   * Creates MorfologikFilter\n   * @param in   input token stream\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer();\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","sourceOld":"  /**\n   * @param in   input token stream\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer();\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates MorfologikFilter\n   * @param in   input token stream\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer();\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1","date":1395668848,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","sourceNew":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE, version);\n  }\n\n","sourceOld":"  /**\n   * Creates MorfologikFilter\n   * @param in   input token stream\n   * @param version Lucene version compatibility for lowercasing.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    super(in);\n    this.input = in;\n    \n    // SOLR-4007: temporarily substitute context class loader to allow finding dictionary resources.\n    Thread me = Thread.currentThread();\n    ClassLoader cl = me.getContextClassLoader();\n    try {\n      me.setContextClassLoader(PolishStemmer.class.getClassLoader());\n      this.stemmer = new PolishStemmer();\n      this.charUtils = CharacterUtils.getInstance(version);\n      this.lemmaList = Collections.emptyList();\n    } finally {\n      me.setContextClassLoader(cl);\n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","sourceNew":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE);\n  }\n\n","sourceOld":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream).mjava","sourceNew":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE, version);\n  }\n\n","sourceOld":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#MorfologikFilter(TokenStream,Version).mjava","sourceNew":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE);\n  }\n\n","sourceOld":"  /**\n   * Creates a filter with the default (Polish) dictionary.\n   */\n  public MorfologikFilter(final TokenStream in, final Version version) {\n    this(in, MorfologikFilterFactory.DEFAULT_DICTIONARY_RESOURCE, version);\n  }\n\n","bugFix":null,"bugIntro":["b8322efc01a53e6f06cd7d11b9823c491c0aaf84"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["3fe5f0827b0226d3ceab5afaa8badb8af406f3d1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1":["5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b"],"5131d37b7f0a2f5a2d3767f7cdfe625d215bdf1b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3fe5f0827b0226d3ceab5afaa8badb8af406f3d1"],"3fe5f0827b0226d3ceab5afaa8badb8af406f3d1":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}