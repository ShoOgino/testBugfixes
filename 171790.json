{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectMultiTermData(MultiTerm,IndexSearcher,List[LeafReaderContext],int,int,TermsData).mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectMultiTermData(MultiTerm,IndexSearcher,List[LeafReaderContext],int,int,TermsData).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collects the {@link TermState} and {@link TermStatistics} for a multi-term\n   * with expansion.\n   *\n   * @param remainingMultiTerms the number of remaining multi-terms to process,\n   *                            including the current one, excluding the multi-terms already processed.\n   * @param termsData           receives the collected data.\n   */\n  protected int collectMultiTermData(\n      MultiTerm multiTerm,\n      IndexSearcher searcher,\n      List<LeafReaderContext> segments,\n      int remainingMultiTerms, // Unused here but leveraged by extending classes.\n      int maxExpansionsForTerm,\n      TermsData termsData) throws IOException {\n    TermData termData = termsData.getOrCreateTermData(multiTerm.termPosition);\n    Map<BytesRef, TermStats> termStatsMap = createTermStatsMap(multiTerm);\n    int numExpansions = 0;\n    Iterator<LeafReaderContext> segmentIterator = segments.iterator();\n    MutableValueBool shouldStopSegmentIteration = new MutableValueBool();\n\n    while (segmentIterator.hasNext() && !shouldStopSegmentIteration.value) {\n      LeafReaderContext leafReaderContext = segmentIterator.next();\n      int remainingExpansions = maxExpansionsForTerm - numExpansions;\n      assert remainingExpansions >= 0;\n      List<TermBytesTermState> termStates = collectMultiTermDataForSegment(\n          multiTerm, leafReaderContext, remainingExpansions, shouldStopSegmentIteration, termStatsMap);\n\n      if (!termStates.isEmpty()) {\n        assert termStates.size() <= remainingExpansions;\n        numExpansions += termStates.size();\n        assert numExpansions <= maxExpansionsForTerm;\n        termData.setTermStatesForSegment(leafReaderContext, termStates);\n\n      } else if (shouldOptimizeSegments()) {\n        // Remove this segment from the list because the phrase cannot match on it.\n        segmentIterator.remove();\n        assert TestCounters.get().incSegmentSkipCount();\n      }\n    }\n\n    // Collect the term stats across all segments.\n    collectMultiTermStats(searcher, termStatsMap, termsData, termData);\n    return numExpansions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"]},"commit2Childs":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}