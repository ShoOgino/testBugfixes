{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseDocIdSetIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseDocIdSetIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseDocIdSetIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) {\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#matches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#matches().mjava","sourceNew":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches() throws IOException {\n      for (TwoPhaseIterator twoPhaseIterator : twoPhaseIterators) { // match cheapest first\n        if (twoPhaseIterator.matches() == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a3d6eb0072094d94624002318ba2d4c840946833"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["d277693481ea6007c1d83cd503d0859bb3b64d20","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d277693481ea6007c1d83cd503d0859bb3b64d20","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a3d6eb0072094d94624002318ba2d4c840946833":["d277693481ea6007c1d83cd503d0859bb3b64d20","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}