{"path":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","commits":[{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new RAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n          Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n          Field.Index.TOKENIZED));\n      doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n              Field.Index.TOKENIZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new RAMDirectory();\n    NewIndexModifier modifier = new NewIndexModifier(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n          Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n          Field.Index.TOKENIZED));\n      doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n              Field.Index.TOKENIZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n      modifier.deleteDocuments(term);\n      if (!autoCommit) {\n        modifier.close();\n      }\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new RAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n          Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n          Field.Index.TOKENIZED));\n      doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n              Field.Index.TOKENIZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setUseCompoundFile(true);\n      }\n      modifier.deleteDocuments(term);\n      if (!autoCommit) {\n        modifier.close();\n      }\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n      modifier.deleteDocuments(term);\n      if (!autoCommit) {\n        modifier.close();\n      }\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setUseCompoundFile(true);\n      }\n      modifier.deleteDocuments(term);\n      if (!autoCommit) {\n        modifier.close();\n      }\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(1);\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc\n          .add(new Field(\"city\", text[i], Field.Store.YES,\n                         Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      modifier.optimize();\n      modifier.commit();\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n      modifier.deleteDocuments(term);\n      modifier.commit();\n      hitCount = getHitCount(dir, term);\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(1);\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e82780afe6097066eb5befb86e9432f077667e3d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"8b6187898fc4413ccd18229711786550a280383c":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["87c966e9308847938a7c905c2e46a56d8df788b8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["8b6187898fc4413ccd18229711786550a280383c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"e82780afe6097066eb5befb86e9432f077667e3d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"8b6187898fc4413ccd18229711786550a280383c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}