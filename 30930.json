{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.PngHelper#readImage(byte[]).mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.PngHelper#readImage(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets.PngHelper#readImage(byte[]).mjava","sourceNew":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","sourceOld":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.PngHelper#readImage(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets.PngHelper#readImage(byte[]).mjava","sourceNew":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","sourceOld":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap.PngHelper#readImage(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets.PngHelper#readImage(byte[]).mjava","sourceNew":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","sourceOld":"    static BufferedImage readImage(final byte[] bytes) {\n      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will\n      // cache the data which is quite unnecessary given we have it all in-memory already.\n      ImageInputStream imageInputStream = new ImageInputStreamImpl() {\n        //TODO re-use this instance; superclass has 8KB buffer.\n\n        @Override\n        public int read() throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            return bytes[(int) streamPos++];\n          }\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n          checkClosed();\n          bitOffset = 0;\n          if (streamPos >= bytes.length) {\n            return -1;\n          } else {\n            int copyLen = Math.min(len, bytes.length - (int)streamPos);\n            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);\n            streamPos += copyLen;\n            return copyLen;\n          }\n        }\n\n        @Override\n        public long length() {\n          return bytes.length;\n        }\n\n        @Override\n        public boolean isCached() {\n          return true;\n        }\n\n        @Override\n        public boolean isCachedMemory() {\n          return true;\n        }\n      };\n      try {\n        //TODO can/should we re-use an imageReader instance on FacetInfo?\n        ImageReader imageReader = imageReaderSpi.createReaderInstance();\n\n        imageReader.setInput(imageInputStream,\n            false,//forwardOnly\n            true);//ignoreMetadata\n        return imageReader.read(0);//read first & only image\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Problem reading png heatmap: \" + e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}