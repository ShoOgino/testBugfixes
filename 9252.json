{"path":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e454a2545d2cb65a99044886565f39373be24796","date":1291079172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(new SpanQuery[] { q1, q2 });\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(searcher.getIndexReader());\n    Spans spanB = qB.getSpans(searcher.getIndexReader());\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qA);\n    Spans spanB = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qB);\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qA);\n    Spans spanB = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qB);\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qA);\n    Spans spanB = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qB);\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = qA.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    Spans spanB = qB.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans1().mjava","sourceNew":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qA);\n    Spans spanB = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qB);\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","sourceOld":"  public void testSpans1() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"first\", \"sally\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\", \"james\"));\n    SpanQuery qA = new SpanOrQuery(q1, q2);\n    SpanQuery qB = new FieldMaskingSpanQuery(qA, \"id\");\n                                            \n    check(qA, new int[] { 0, 1, 2, 4 });\n    check(qB, new int[] { 0, 1, 2, 4 });\n  \n    Spans spanA = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qA);\n    Spans spanB = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), qB);\n    \n    while (spanA.next()) {\n      assertTrue(\"spanB not still going\", spanB.next());\n      assertEquals(\"spanA not equal spanB\", s(spanA), s(spanB));\n    }\n    assertTrue(\"spanB still going even tough spanA is done\", !(spanB.next()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c8323d210478d76a02372693d254b69aac614689"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e454a2545d2cb65a99044886565f39373be24796":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["e454a2545d2cb65a99044886565f39373be24796"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e454a2545d2cb65a99044886565f39373be24796":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e454a2545d2cb65a99044886565f39373be24796","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}