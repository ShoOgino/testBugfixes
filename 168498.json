{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (++start >= ops.size()) {\n          event.getProperties().remove(START);\n        } else {\n          event.getProperties().put(START, start);\n        }\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate and metric. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"976feb6756f29529c6ce5b578e7d6fa8b1efcb30","date":1535461878,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(\"unsupportedOps\", k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        switch (action) {\n          case MOVEREPLICA:\n            suggester = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n            break;\n          case DELETENODE:\n            int start = (Integer)event.getProperty(START, 0);\n            List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n            if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n              return NoneSuggester.get(session);\n            }\n            String sourceNode = srcNodes.get(start);\n            suggester = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n            event.getProperties().put(START, ++start);\n            break;\n          case NONE:\n            return NoneSuggester.get(session);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n        }\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        start++;\n        event.getProperties().put(START, start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = getNodeLostSuggester(cloudManager, session, event);\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        switch (action) {\n          case MOVEREPLICA:\n            suggester = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n            break;\n          case DELETENODE:\n            int start = (Integer)event.getProperty(START, 0);\n            List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n            if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n              return NoneSuggester.get(session);\n            }\n            String sourceNode = srcNodes.get(start);\n            suggester = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n            event.getProperties().put(START, ++start);\n            break;\n          case NONE:\n            return NoneSuggester.get(session);\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n        }\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = getNodeLostSuggester(cloudManager, session, event);\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        @SuppressWarnings({\"unchecked\"})\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          @SuppressWarnings({\"unchecked\"})\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = getNodeLostSuggester(cloudManager, session, event);\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = getNodeAddedSuggester(cloudManager, session, event);\n        break;\n      case NODELOST:\n        suggester = getNodeLostSuggester(cloudManager, session, event);\n        break;\n      case SEARCHRATE:\n      case METRIC:\n      case INDEXSIZE:\n        @SuppressWarnings({\"unchecked\"})\n        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());\n        int start = (Integer)event.getProperty(START, 0);\n        if (ops.isEmpty() || start >= ops.size()) {\n          return NoneSuggester.get(session);\n        }\n        TriggerEvent.Op op = ops.get(start);\n        suggester = session.getSuggester(op.getAction());\n        if (suggester instanceof UnsupportedSuggester) {\n          @SuppressWarnings({\"unchecked\"})\n          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());\n          unsupportedOps.add(op);\n        }\n        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {\n          suggester = suggester.hint(e.getKey(), e.getValue());\n        }\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        suggester = suggester.forceOperation(true);\n        event.getProperties().put(START, ++start);\n        break;\n      case SCHEDULED:\n        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n        suggester = session.getSuggester(action);\n        if (applyCollectionHints(cloudManager, suggester) == 0) return NoneSuggester.get(session);\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded, nodeLost, searchRate, metric, scheduled and indexSize. Received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["27639bb5e041490ce599065875dd2f6d8beef62a"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"27639bb5e041490ce599065875dd2f6d8beef62a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}