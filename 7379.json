{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null, true);\n        } else {\n          fi.setDocValuesType(null, true);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type(), true);\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type(), true);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null, true);\n        } else {\n          fi.setDocValuesType(null, true);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type(), true);\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type(), true);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ada808d1fd6b1afb13af55a1dee4c15527af578","date":1337156389,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null, true);\n        } else {\n          fi.setDocValuesType(null, true);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type(), true);\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type(), true);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059","date":1337694380,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type() && !fi.omitsNorms()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type() && !fi.omitsNorms()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null, true);\n        } else {\n          fi.setDocValuesType(null, true);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type(), true);\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type(), true);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":null,"sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type() && !fi.omitsNorms()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#updatePromoted(Map[FieldInfo,TypePromoter],boolean).mjava","sourceNew":null,"sourceOld":"  protected void updatePromoted(Map<FieldInfo,TypePromoter> infoAndPromoter, boolean norms) {\n    // update any promoted doc values types:\n    for (Map.Entry<FieldInfo,TypePromoter> e : infoAndPromoter.entrySet()) {\n      FieldInfo fi = e.getKey();\n      TypePromoter promoter = e.getValue();\n      if (promoter == null) {\n        if (norms) {\n          fi.setNormValueType(null);\n        } else {\n          fi.setDocValuesType(null);\n        }\n      } else {\n        assert promoter != TypePromoter.getIdentityPromoter();\n        if (norms) {\n          if (fi.getNormType() != promoter.type() && !fi.omitsNorms()) {\n            // reset the type if we got promoted\n            fi.setNormValueType(promoter.type());\n          }  \n        } else {\n          if (fi.getDocValuesType() != promoter.type()) {\n            // reset the type if we got promoted\n            fi.setDocValuesType(promoter.type());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["2ada808d1fd6b1afb13af55a1dee4c15527af578"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2ada808d1fd6b1afb13af55a1dee4c15527af578"],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}