{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","commits":[{"id":"6549d5ea6b7b25525309b981de3ec92b4dff99d1","date":1408666035,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"/dev/null","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    File tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    File tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    File tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    File tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testNRTWithParallelAdds().mjava","sourceNew":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    // Cannot call refresh on an suggester when no docs are added to the index\n    expectThrows(IllegalStateException.class, () -> {\n      suggester.refresh();\n    });\n\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    AnalyzingInfixSuggester suggester2 = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester2.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester2.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testNRTWithParallelAdds() throws IOException, InterruptedException {\n    String[] keys = new String[] {\"python\", \"java\", \"c\", \"scala\", \"ruby\", \"clojure\", \"erlang\", \"go\", \"swift\", \"lisp\"};\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    Path tempDir = createTempDir(\"AIS_NRT_PERSIST_TEST\");\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    Thread[] multiAddThreads = new Thread[10];\n    try {\n      suggester.refresh();\n      fail(\"Cannot call refresh on an suggester when no docs are added to the index\");\n    } catch(IllegalStateException e) {\n      //Expected\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i] = new Thread(new IndexDocument(suggester, keys[i]));\n    }\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].start();\n    }\n    //Make sure all threads have completed indexing\n    for(int i=0; i<10; i++) {\n      multiAddThreads[i].join();\n    }\n\n    suggester.refresh();\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    //Test if the index is getting persisted correctly and can be reopened.\n    suggester.commit();\n    suggester.close();\n\n    suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"python\", random()), 10, true, false);\n    assertEquals(1, results.size());\n    assertEquals(\"python\", results.get(0).key);\n\n    suggester.close();\n    a.close();\n  }\n\n","bugFix":["19e497fe4da591a79332da97681b8017d9c61165","6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","a56958d7f71a28824f20031ffbb2e13502a0274e"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["19e497fe4da591a79332da97681b8017d9c61165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"19e497fe4da591a79332da97681b8017d9c61165":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["19e497fe4da591a79332da97681b8017d9c61165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","05fe562aa248790944d43cdd478f512572835ba0"],"19e497fe4da591a79332da97681b8017d9c61165":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}