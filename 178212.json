{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","commits":[{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"/dev/null","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(server);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(baseUrl, bytarr, 1);\n    postAndCheck(baseUrl, bytarr2, 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(server);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(server);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(baseUrl, bytarr, 1);\n    postAndCheck(baseUrl, bytarr2, 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(server);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dddcf897b707a491cdeedb34fd3966ce10db1582","date":1420384044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\"+map, l.size()>0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(l);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"config\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\"+map, l.size()>0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"solrConfig\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\"+map, l.size()>0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821","date":1420627779,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"config\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\" + map, l.size() > 0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"config\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\"+map, l.size()>0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n    DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n    Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n    String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n    String url = baseUrl + \"/.system/config/requestHandler\";\n    Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n    assertNotNull(map);\n    assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n        \"config\",\n        \"requestHandler\",\n        \"/blob\",\n        \"class\")));\n\n    byte[] bytarr  = new byte[1024];\n    for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n    byte[] bytarr2  = new byte[2048];\n    for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n    postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n    url = baseUrl + \"/.system/blob/test/1\";\n    map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n    List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n    assertNotNull(\"\"+map, l);\n    assertTrue(\"\" + map, l.size() > 0);\n    map = (Map) l.get(0);\n    assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n    compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n    compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n\n  }\n\n","bugFix":["a0d196318cb8ce39ae32035f290cd1397833e472","bafca15d8e408346a67f4282ad1143b88023893b","dddcf897b707a491cdeedb34fd3966ce10db1582","45a5f13e4e6b3c60912dc0911227739fe2f371c2","b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n    SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    try {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b2620aa1330c2e39c589ec12defb94027b2c29","date":1426608796,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a7648c5ac0717289005423ce26acbb8801bcb7","date":1477427660,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44383d1bc1b3dfe9db7b05ecda8951270911aab","date":1486011386,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00bfa246dd03239965db3e388077a8929299bb42","date":1568492597,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#doBlobHandlerTest().mjava","sourceNew":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n      checkBlobPostMd5(baseUrl, cloudClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"91a7648c5ac0717289005423ce26acbb8801bcb7":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"bafca15d8e408346a67f4282ad1143b88023893b":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"00bfa246dd03239965db3e388077a8929299bb42":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["dddcf897b707a491cdeedb34fd3966ce10db1582"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a44383d1bc1b3dfe9db7b05ecda8951270911aab","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e6b2620aa1330c2e39c589ec12defb94027b2c29"],"dddcf897b707a491cdeedb34fd3966ce10db1582":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a44383d1bc1b3dfe9db7b05ecda8951270911aab":["91a7648c5ac0717289005423ce26acbb8801bcb7"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["a44383d1bc1b3dfe9db7b05ecda8951270911aab"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"3217321f3e1d7922898c6c633d17acfa840d6875":["a44383d1bc1b3dfe9db7b05ecda8951270911aab","ac97ea104d893f16aab430d9904473bc1f233f3c"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["3217321f3e1d7922898c6c633d17acfa840d6875"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a44383d1bc1b3dfe9db7b05ecda8951270911aab","3217321f3e1d7922898c6c633d17acfa840d6875"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0d196318cb8ce39ae32035f290cd1397833e472"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["b693a83132c9e45afcd564fd65a25b60ed80388b","91a7648c5ac0717289005423ce26acbb8801bcb7"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00bfa246dd03239965db3e388077a8929299bb42"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"91a7648c5ac0717289005423ce26acbb8801bcb7":["a44383d1bc1b3dfe9db7b05ecda8951270911aab","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"bafca15d8e408346a67f4282ad1143b88023893b":["dddcf897b707a491cdeedb34fd3966ce10db1582"],"00bfa246dd03239965db3e388077a8929299bb42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"dddcf897b707a491cdeedb34fd3966ce10db1582":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"a0d196318cb8ce39ae32035f290cd1397833e472":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d196318cb8ce39ae32035f290cd1397833e472"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["abb23fcc2461782ab204e61213240feb77d355aa"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"a44383d1bc1b3dfe9db7b05ecda8951270911aab":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["91a7648c5ac0717289005423ce26acbb8801bcb7","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"3217321f3e1d7922898c6c633d17acfa840d6875":["9c9780b447ddf847479e7fa9978cb7809a15a0bf","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["00bfa246dd03239965db3e388077a8929299bb42"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["bafca15d8e408346a67f4282ad1143b88023893b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}