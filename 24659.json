{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    TreeMap<BytesRef,Integer> tempWords = new TreeMap<BytesRef,Integer>();\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    readDictionaryFile(dictionary, decoder, tempWords);\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o); // nocommit: byte4\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<BytesRef,Integer> e : tempWords.entrySet()) {\n      UnicodeUtil.UTF8toUTF32(e.getKey(), scratchInts);\n      b.add(scratchInts, e.getValue().longValue());\n    }\n    words = b.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"211216ec4602e62cede2940d33a93a36c2aaf8a6","date":1393221868,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFile(dictionary, decoder, b);\n    words = b.finish();\n  }\n\n","sourceOld":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    TreeMap<BytesRef,Integer> tempWords = new TreeMap<BytesRef,Integer>();\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    readDictionaryFile(dictionary, decoder, tempWords);\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o); // nocommit: byte4\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<BytesRef,Integer> e : tempWords.entrySet()) {\n      UnicodeUtil.UTF8toUTF32(e.getKey(), scratchInts);\n      b.add(scratchInts, e.getValue().longValue());\n    }\n    words = b.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f01af929441dec992bb546ac539c0bf40ae90965","date":1393367367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    stripLookup.add(new BytesRef()); // no strip -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFile(dictionary, decoder, b);\n    words = b.finish();\n  }\n\n","sourceOld":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFile(dictionary, decoder, b);\n    words = b.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,List[InputStream],boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#Dictionary(InputStream,InputStream).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStream for reading the hunspell dictionary files (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, List<InputStream> dictionaries, boolean ignoreCase) throws IOException, ParseException {\n    this.ignoreCase = ignoreCase;\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    stripLookup.add(new BytesRef()); // no strip -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFiles(dictionaries, decoder, b);\n    words = b.finish();\n  }\n\n","sourceOld":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    stripLookup.add(new BytesRef()); // no strip -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFile(dictionary, decoder, b);\n    words = b.finish();\n  }\n\n","bugFix":null,"bugIntro":["6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f01af929441dec992bb546ac539c0bf40ae90965":["211216ec4602e62cede2940d33a93a36c2aaf8a6"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["f01af929441dec992bb546ac539c0bf40ae90965"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"211216ec4602e62cede2940d33a93a36c2aaf8a6":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f01af929441dec992bb546ac539c0bf40ae90965":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"211216ec4602e62cede2940d33a93a36c2aaf8a6":["f01af929441dec992bb546ac539c0bf40ae90965"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["211216ec4602e62cede2940d33a93a36c2aaf8a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}