{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4ab7bd7d2aaec92004b06b082790604ec99597","date":1360597936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      docTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        docTermOrds.lookupOrd(ord, scratch);\n        collectorTerms.add(scratch);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      docTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        docTermOrds.lookupOrd(ord, scratch);\n        collectorTerms.add(scratch);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = docTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          collectorTerms.add(docTermsEnum.term());\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      docTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docTermOrds.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      docTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        docTermOrds.lookupOrd(ord, scratch);\n        collectorTerms.add(scratch);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","date":1449514606,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      docValues.setDocument(doc);\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docValues.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      docTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docTermOrds.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          final BytesRef term = docValues.lookupOrd(ord);\n          collectorTerms.add(term);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      docValues.setDocument(doc);\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docValues.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          final BytesRef term = docValues.lookupOrd(ord);\n          collectorTerms.add(term);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      docValues.setDocument(doc);\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docValues.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          final BytesRef term = docValues.lookupOrd(ord);\n          collectorTerms.add(term);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      long ord;\n      docValues.setDocument(doc);\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        final BytesRef term = docValues.lookupOrd(ord);\n        collectorTerms.add(term);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7530de27b87b961b51f01bd1299b7004d46e8823","fd4ab7bd7d2aaec92004b06b082790604ec99597"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fd4ab7bd7d2aaec92004b06b082790604ec99597":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ddbb72a33557d2b5bc22ee95daf3281c43560502","fd4ab7bd7d2aaec92004b06b082790604ec99597"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fd4ab7bd7d2aaec92004b06b082790604ec99597":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}