{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":null,"sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}