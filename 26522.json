{"path":"src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","pathOld":"/dev/null","sourceNew":"    // Load & cache full bytes array.  Returns bytes.\n    public synchronized byte[] bytes() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes == null) {                     // value not yet read\n        assert bytesRef == null;\n        if (origNorm != null) {\n          // Ask origNorm to load so that for a series of\n          // reopened readers we share a single read-only\n          // byte[]\n          bytes = origNorm.bytes();\n          bytesRef = origNorm.bytesRef;\n          bytesRef.incRef();\n\n          // Once we've loaded the bytes we no longer need\n          // origNorm:\n          origNorm.decRef();\n          origNorm = null;\n\n        } else {\n          // We are the origNorm, so load the bytes for real\n          // ourself:\n          final int count = maxDoc();\n          bytes = new byte[count];\n\n          // Since we are orig, in must not be null\n          assert in != null;\n\n          // Read from disk.\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytes, 0, count, false);\n          }\n\n          bytesRef = new Ref();\n          closeInput();\n        }\n      }\n\n      return bytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","sourceNew":"    // Load & cache full bytes array.  Returns bytes.\n    public synchronized byte[] bytes() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes == null) {                     // value not yet read\n        assert bytesRef == null;\n        if (origNorm != null) {\n          // Ask origNorm to load so that for a series of\n          // reopened readers we share a single read-only\n          // byte[]\n          bytes = origNorm.bytes();\n          bytesRef = origNorm.bytesRef;\n          bytesRef.incrementAndGet();\n\n          // Once we've loaded the bytes we no longer need\n          // origNorm:\n          origNorm.decRef();\n          origNorm = null;\n\n        } else {\n          // We are the origNorm, so load the bytes for real\n          // ourself:\n          final int count = maxDoc();\n          bytes = new byte[count];\n\n          // Since we are orig, in must not be null\n          assert in != null;\n\n          // Read from disk.\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytes, 0, count, false);\n          }\n\n          bytesRef = new AtomicInteger(1);\n          closeInput();\n        }\n      }\n\n      return bytes;\n    }\n\n","sourceOld":"    // Load & cache full bytes array.  Returns bytes.\n    public synchronized byte[] bytes() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes == null) {                     // value not yet read\n        assert bytesRef == null;\n        if (origNorm != null) {\n          // Ask origNorm to load so that for a series of\n          // reopened readers we share a single read-only\n          // byte[]\n          bytes = origNorm.bytes();\n          bytesRef = origNorm.bytesRef;\n          bytesRef.incRef();\n\n          // Once we've loaded the bytes we no longer need\n          // origNorm:\n          origNorm.decRef();\n          origNorm = null;\n\n        } else {\n          // We are the origNorm, so load the bytes for real\n          // ourself:\n          final int count = maxDoc();\n          bytes = new byte[count];\n\n          // Since we are orig, in must not be null\n          assert in != null;\n\n          // Read from disk.\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytes, 0, count, false);\n          }\n\n          bytesRef = new Ref();\n          closeInput();\n        }\n      }\n\n      return bytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#bytes().mjava","sourceNew":"    // Load & cache full bytes array.  Returns bytes.\n    public synchronized byte[] bytes() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes == null) {                     // value not yet read\n        assert bytesRef == null;\n        if (origNorm != null) {\n          // Ask origNorm to load so that for a series of\n          // reopened readers we share a single read-only\n          // byte[]\n          bytes = origNorm.bytes();\n          bytesRef = origNorm.bytesRef;\n          bytesRef.incrementAndGet();\n\n          // Once we've loaded the bytes we no longer need\n          // origNorm:\n          origNorm.decRef();\n          origNorm = null;\n\n        } else {\n          // We are the origNorm, so load the bytes for real\n          // ourself:\n          final int count = maxDoc();\n          bytes = new byte[count];\n\n          // Since we are orig, in must not be null\n          assert in != null;\n\n          // Read from disk.\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytes, 0, count, false);\n          }\n\n          bytesRef = new AtomicInteger(1);\n          closeInput();\n        }\n      }\n\n      return bytes;\n    }\n\n","sourceOld":"    // Load & cache full bytes array.  Returns bytes.\n    public synchronized byte[] bytes() throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes == null) {                     // value not yet read\n        assert bytesRef == null;\n        if (origNorm != null) {\n          // Ask origNorm to load so that for a series of\n          // reopened readers we share a single read-only\n          // byte[]\n          bytes = origNorm.bytes();\n          bytesRef = origNorm.bytesRef;\n          bytesRef.incrementAndGet();\n\n          // Once we've loaded the bytes we no longer need\n          // origNorm:\n          origNorm.decRef();\n          origNorm = null;\n\n        } else {\n          // We are the origNorm, so load the bytes for real\n          // ourself:\n          final int count = maxDoc();\n          bytes = new byte[count];\n\n          // Since we are orig, in must not be null\n          assert in != null;\n\n          // Read from disk.\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytes, 0, count, false);\n          }\n\n          bytesRef = new AtomicInteger(1);\n          closeInput();\n        }\n      }\n\n      return bytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8514024f885b40613b5ec91876ce5e9d2167d89":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8514024f885b40613b5ec91876ce5e9d2167d89"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}