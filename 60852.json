{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#booleanScorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#booleanScorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","sourceNew":"    /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n     *  cannot be used. */\n    // pkg-private for forcing use of BooleanScorer in tests\n    BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs, needsScores);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return null;\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return null;\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      if (minNrShouldMatch > optional.size()) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, minNrShouldMatch));\n    }\n\n","sourceOld":"    /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n     *  cannot be used. */\n    // pkg-private for forcing use of BooleanScorer in tests\n    BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return null;\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return null;\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      if (minNrShouldMatch > optional.size()) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, minNrShouldMatch));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#booleanScorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n     *  cannot be used. */\n    // pkg-private for forcing use of BooleanScorer in tests\n    BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return null;\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return null;\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      if (minNrShouldMatch > optional.size()) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, minNrShouldMatch));\n    }\n\n","sourceOld":"    /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n     *  cannot be used. */\n    // pkg-private for forcing use of BooleanScorer in tests\n    BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs, needsScores);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return null;\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return null;\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      if (minNrShouldMatch > optional.size()) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, minNrShouldMatch));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}