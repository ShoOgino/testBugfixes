{"path":"solr/core/src/java/org/apache/solr/rest/FieldResource#get().mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/FieldResource#get().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      if (fieldName.isEmpty()) {\n        final String message = \"Field name is missing\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        SchemaField field;\n        if (includeDynamic) {\n          field = getSchema().getFieldOrNull(fieldName);\n        } else {\n          // Don't look for matches among dynamic fields\n          field = getSchema().getFields().get(fieldName);\n        }\n        if (null == field) {\n          final String message = \"Field '\" + fieldName + \"' not found.\";\n          throw new SolrException(ErrorCode.NOT_FOUND, message);\n        } else {\n          getSolrResponse().add(FIELD, getFieldProperties(field));\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ade09239358147b3ebd60bed41b957e2f75891","date":1362696078,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/FieldResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      if (fieldName.isEmpty()) {\n        final String message = \"Field name is missing\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        final SchemaField field;\n        if (includeDynamic) {\n          field = getSchema().getFieldOrNull(fieldName);\n        } else {\n          field = getSchema().getFields().get(fieldName);\n        }\n        if (null == field) {\n          final String message = \"Field '\" + fieldName + \"' not found.\";\n          throw new SolrException(ErrorCode.NOT_FOUND, message);\n        } else {\n          getSolrResponse().add(FIELD, getFieldProperties(field));\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      if (fieldName.isEmpty()) {\n        final String message = \"Field name is missing\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        SchemaField field;\n        if (includeDynamic) {\n          field = getSchema().getFieldOrNull(fieldName);\n        } else {\n          // Don't look for matches among dynamic fields\n          field = getSchema().getFields().get(fieldName);\n        }\n        if (null == field) {\n          final String message = \"Field '\" + fieldName + \"' not found.\";\n          throw new SolrException(ErrorCode.NOT_FOUND, message);\n        } else {\n          getSolrResponse().add(FIELD, getFieldProperties(field));\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      if (fieldName.isEmpty()) {\n        final String message = \"Field name is missing\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        final SchemaField field;\n        if (includeDynamic) {\n          field = getSchema().getFieldOrNull(fieldName);\n        } else {\n          field = getSchema().getFields().get(fieldName);\n        }\n        if (null == field) {\n          final String message = \"Field '\" + fieldName + \"' not found.\";\n          throw new SolrException(ErrorCode.NOT_FOUND, message);\n        } else {\n          getSolrResponse().add(IndexSchema.FIELD, getFieldProperties(field));\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      if (fieldName.isEmpty()) {\n        final String message = \"Field name is missing\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        final SchemaField field;\n        if (includeDynamic) {\n          field = getSchema().getFieldOrNull(fieldName);\n        } else {\n          field = getSchema().getFields().get(fieldName);\n        }\n        if (null == field) {\n          final String message = \"Field '\" + fieldName + \"' not found.\";\n          throw new SolrException(ErrorCode.NOT_FOUND, message);\n        } else {\n          getSolrResponse().add(FIELD, getFieldProperties(field));\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47ade09239358147b3ebd60bed41b957e2f75891":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["47ade09239358147b3ebd60bed41b957e2f75891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"47ade09239358147b3ebd60bed41b957e2f75891":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["47ade09239358147b3ebd60bed41b957e2f75891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}