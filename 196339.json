{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLetGetStream().mjava","commits":[{"id":"fea36811326410bd8200ab06f9067dcea141d903","date":1493079557,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLetGetStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLetGetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(cell(results,\"+expr+\"), get(results))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n\n    //Test there are no side effects when transforming tuples.\n    expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    cat = \"let(cell(results,\"+expr+\"), list(select(get(results), id as newid, test_t), get(results)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).get(\"newid\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"newid\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(2).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(2).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(3).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(3).get(\"test_t\").equals(\"l b c d c e\"));\n\n    //Test multiple lets\n\n    //Test there are no side effects when transforming tuples.\n    expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id asc\\\")\";\n\n    cat = \"let(cell(results,\"+expr+\"), cell(results1,\"+expr1+\"), list(select(get(results), id as newid, test_t), get(results1)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).get(\"newid\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"newid\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(2).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(2).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(3).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(3).get(\"test_t\").equals(\"l b c d c\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLetGetStream().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLetGetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(cell(results,\"+expr+\"), get(results))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n\n    //Test there are no side effects when transforming tuples.\n    expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    cat = \"let(cell(results,\"+expr+\"), list(select(get(results), id as newid, test_t), get(results)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).get(\"newid\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"newid\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(2).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(2).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(3).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(3).get(\"test_t\").equals(\"l b c d c e\"));\n\n    //Test multiple lets\n\n    //Test there are no side effects when transforming tuples.\n    expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id asc\\\")\";\n\n    cat = \"let(cell(results,\"+expr+\"), cell(results1,\"+expr1+\"), list(select(get(results), id as newid, test_t), get(results1)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).get(\"newid\").equals(\"hello1\"));\n    assertTrue(tuples.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(tuples.get(1).get(\"newid\").equals(\"hello\"));\n    assertTrue(tuples.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(2).get(\"id\").equals(\"hello\"));\n    assertTrue(tuples.get(2).get(\"test_t\").equals(\"l b c d c e\"));\n    assertTrue(tuples.get(3).get(\"id\").equals(\"hello1\"));\n    assertTrue(tuples.get(3).get(\"test_t\").equals(\"l b c d c\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["fea36811326410bd8200ab06f9067dcea141d903"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fea36811326410bd8200ab06f9067dcea141d903":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fea36811326410bd8200ab06f9067dcea141d903"],"fea36811326410bd8200ab06f9067dcea141d903":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}