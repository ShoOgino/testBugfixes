{"path":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeDouble(String,double).mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeDouble(String,double).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDouble(String,double).mjava","sourceNew":"  default void writeDouble(String name, double val) throws IOException {\n    String s = Double.toString(val);\n    // If it's not a normal number, write the value as a string instead.\n    // The following test also handles NaN since comparisons are always false.\n    if (val > Double.NEGATIVE_INFINITY && val < Double.POSITIVE_INFINITY) {\n      writeDouble(name,s);\n    } else {\n      writeStr(name,s,false);\n    }\n  }\n\n","sourceOld":"  public void writeDouble(String name, double val) throws IOException {\n    String s = Double.toString(val);\n    // If it's not a normal number, write the value as a string instead.\n    // The following test also handles NaN since comparisons are always false.\n    if (val > Double.NEGATIVE_INFINITY && val < Double.POSITIVE_INFINITY) {\n      writeDouble(name,s);\n    } else {\n      writeStr(name,s,false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeDouble(String,double).mjava","pathOld":"/dev/null","sourceNew":"  default void writeDouble(String name, double val) throws IOException {\n    String s = Double.toString(val);\n    // If it's not a normal number, write the value as a string instead.\n    // The following test also handles NaN since comparisons are always false.\n    if (val > Double.NEGATIVE_INFINITY && val < Double.POSITIVE_INFINITY) {\n      writeDouble(name,s);\n    } else {\n      writeStr(name,s,false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeDouble(String,double).mjava","pathOld":"/dev/null","sourceNew":"  default void writeDouble(String name, double val) throws IOException {\n    String s = Double.toString(val);\n    // If it's not a normal number, write the value as a string instead.\n    // The following test also handles NaN since comparisons are always false.\n    if (val > Double.NEGATIVE_INFINITY && val < Double.POSITIVE_INFINITY) {\n      writeDouble(name,s);\n    } else {\n      writeStr(name,s,false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}