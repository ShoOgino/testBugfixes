{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testFacetsWithDocScore().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testFacetsWithDocScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(2000); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    FacetSearchParams sParams = new FacetSearchParams(new ScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b30ca536d784e3fb95a77c8a89705f7b9d3c76b","date":1363872942,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new TermQuery(new Term(\"f\", \"v\")), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    float expected = td.getMaxScore() * td.totalHits;\n    assertEquals(expected, value, 1E-4);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    double value = res.get(0).getFacetResultNode().value;\n    double expected = topDocs.topDocs().getMaxScore() * r.numDocs();\n    assertEquals(expected, value, 1E-10);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":["3bb9fddf38bc78fdecdf76173ec3d83fdea9f8a3","811cdb4a80352766eb0c762e48972707a924e5cd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbddb7ecef02440ebc18647fd8b2cb28307ee6ec","date":1364320851,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    new IndexSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    new IndexSearcher(r).search(new TermQuery(new Term(\"f\", \"v\")), MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    float expected = td.getMaxScore() * td.totalHits;\n    assertEquals(expected, value, 1E-4);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    new IndexSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    TaxonomyFacetsAccumulator fa = new TaxonomyFacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    TaxonomyFacetsAccumulator fa = new TaxonomyFacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsAccumulator fa = new FacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60413d847bd400ed57a42a6f4afe43ba21c5ec75","date":1381993063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    TaxonomyFacetsAccumulator fa = new TaxonomyFacetsAccumulator(sParams, r, taxo) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new SumScoreFacetsAggregator();\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new FacetLabel(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    SimpleFacetsCollector fc = new SimpleFacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new FacetLabel(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new CategoryPath(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbddb7ecef02440ebc18647fd8b2cb28307ee6ec":["2b30ca536d784e3fb95a77c8a89705f7b9d3c76b"],"60413d847bd400ed57a42a6f4afe43ba21c5ec75":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["60413d847bd400ed57a42a6f4afe43ba21c5ec75","ae75def1e2525383b6e1397ed97c44387da9941c"],"2b30ca536d784e3fb95a77c8a89705f7b9d3c76b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["cbddb7ecef02440ebc18647fd8b2cb28307ee6ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["60413d847bd400ed57a42a6f4afe43ba21c5ec75"]},"commit2Childs":{"cbddb7ecef02440ebc18647fd8b2cb28307ee6ec":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"60413d847bd400ed57a42a6f4afe43ba21c5ec75":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b30ca536d784e3fb95a77c8a89705f7b9d3c76b":["cbddb7ecef02440ebc18647fd8b2cb28307ee6ec"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["2b30ca536d784e3fb95a77c8a89705f7b9d3c76b"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["60413d847bd400ed57a42a6f4afe43ba21c5ec75"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}