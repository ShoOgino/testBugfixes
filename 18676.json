{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.LongSet#add(long).mjava","commits":[{"id":"81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8","date":1429723347,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.LongSet#add(long).mjava","pathOld":"/dev/null","sourceNew":"    void add(long val) {\n      if (val == 0) {\n        zeroCount = 1;\n        return;\n      }\n      if (cardinality >= threshold) {\n        rehash();\n      }\n      \n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      for (int slot = h & mask; ;slot = (slot + 1) & mask) {\n        long v = vals[slot];\n        if (v == 0) {\n          vals[slot] = val;\n          cardinality++;\n          break;\n        } else if (v == val) {\n          // val is already in the set\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":4,"author":"yonik","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.LongSet#add(long).mjava","sourceNew":null,"sourceOld":"    void add(long val) {\n      if (val == 0) {\n        zeroCount = 1;\n        return;\n      }\n      if (cardinality >= threshold) {\n        rehash();\n      }\n      \n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      for (int slot = h & mask; ;slot = (slot + 1) & mask) {\n        long v = vals[slot];\n        if (v == 0) {\n          vals[slot] = val;\n          cardinality++;\n          break;\n        } else if (v == val) {\n          // val is already in the set\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.LongSet#add(long).mjava","sourceNew":null,"sourceOld":"    void add(long val) {\n      if (val == 0) {\n        zeroCount = 1;\n        return;\n      }\n      if (cardinality >= threshold) {\n        rehash();\n      }\n      \n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      for (int slot = h & mask; ;slot = (slot + 1) & mask) {\n        long v = vals[slot];\n        if (v == 0) {\n          vals[slot] = val;\n          cardinality++;\n          break;\n        } else if (v == val) {\n          // val is already in the set\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.LongSet#add(long).mjava","sourceNew":null,"sourceOld":"    void add(long val) {\n      if (val == 0) {\n        zeroCount = 1;\n        return;\n      }\n      if (cardinality >= threshold) {\n        rehash();\n      }\n      \n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      for (int slot = h & mask; ;slot = (slot + 1) & mask) {\n        long v = vals[slot];\n        if (v == 0) {\n          vals[slot] = val;\n          cardinality++;\n          break;\n        } else if (v == val) {\n          // val is already in the set\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8"],"a52341299179de5479672f7cf518bf4b173f34b3":["81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8"],"81d7bcc5b3efd86bb6dcd048eaafd2512b19c0f8":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}