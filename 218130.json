{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","commits":[{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(IndexSchema).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (writeLockTimeout != -1)\n      iwc.setWriteLockTimeout(writeLockTimeout);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (maxIndexingThreads != -1) {\n      iwc.setMaxThreadStates(maxIndexingThreads);\n    }\n    \n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(IndexSchema schema) {\n    // so that we can update the analyzer on core reload, we pass null\n    // for the default analyzer, and explicitly pass an analyzer on \n    // appropriate calls to IndexWriter\n    \n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (writeLockTimeout != -1)\n      iwc.setWriteLockTimeout(writeLockTimeout);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (maxIndexingThreads != -1) {\n      iwc.setMaxThreadStates(maxIndexingThreads);\n    }\n    \n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b97509e7e2489430edfe784e4411976e3c6c748","date":1434336771,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (maxIndexingThreads != -1) {\n      iwc.setMaxThreadStates(maxIndexingThreads);\n    }\n    \n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (writeLockTimeout != -1)\n      iwc.setWriteLockTimeout(writeLockTimeout);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (maxIndexingThreads != -1) {\n      iwc.setMaxThreadStates(maxIndexingThreads);\n    }\n    \n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (maxIndexingThreads != -1) {\n      iwc.setMaxThreadStates(maxIndexingThreads);\n    }\n    \n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c23672acbb5104509c1c2d6e3dda7a08eaf091f","date":1463128188,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    iwc.setMergePolicy(buildMergePolicy(schema));\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    iwc.setMergeScheduler(buildMergeScheduler(schema));\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    // do this after buildMergePolicy since the backcompat logic \n    // there may modify the effective useCompoundFile\n    iwc.setUseCompoundFile(getUseCompoundFile());\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(schema);\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = schema.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className, \n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":["9c23672acbb5104509c1c2d6e3dda7a08eaf091f","2f7df713a0f1e310d18dd8da91c89a07a13f86f8","415fc059c6f2340aed1714220b9578c3f66ed09c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      @SuppressWarnings({\"rawtypes\"})\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d7561aa9163e566b45895f013690403401d5e5c","date":1596822876,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n    \n    if (maxCommitMergeWaitMillis > 0) {\n      iwc.setMaxCommitMergeWaitMillis(maxCommitMergeWaitMillis);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      @SuppressWarnings({\"rawtypes\"})\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      @SuppressWarnings({\"rawtypes\"})\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toIndexWriterConfig(SolrCore).mjava","sourceNew":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n    \n    if (maxCommitMergeWaitMillis > 0) {\n      iwc.setMaxFullFlushMergeWaitMillis(maxCommitMergeWaitMillis);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      @SuppressWarnings({\"rawtypes\"})\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","sourceOld":"  public IndexWriterConfig toIndexWriterConfig(SolrCore core) throws IOException {\n    IndexSchema schema = core.getLatestSchema();\n    IndexWriterConfig iwc = new IndexWriterConfig(new DelayedSchemaAnalyzer(core));\n    if (maxBufferedDocs != -1)\n      iwc.setMaxBufferedDocs(maxBufferedDocs);\n\n    if (ramBufferSizeMB != -1)\n      iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n\n    if (ramPerThreadHardLimitMB != -1) {\n      iwc.setRAMPerThreadHardLimitMB(ramPerThreadHardLimitMB);\n    }\n    \n    if (maxCommitMergeWaitMillis > 0) {\n      iwc.setMaxCommitMergeWaitMillis(maxCommitMergeWaitMillis);\n    }\n\n    iwc.setSimilarity(schema.getSimilarity());\n    MergePolicy mergePolicy = buildMergePolicy(core.getResourceLoader(), schema);\n    iwc.setMergePolicy(mergePolicy);\n    MergeScheduler mergeScheduler = buildMergeScheduler(core.getResourceLoader());\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setInfoStream(infoStream);\n\n    if (mergePolicy instanceof SortingMergePolicy) {\n      Sort indexSort = ((SortingMergePolicy) mergePolicy).getSort();\n      iwc.setIndexSort(indexSort);\n    }\n\n    iwc.setUseCompoundFile(useCompoundFile);\n\n    if (mergedSegmentWarmerInfo != null) {\n      // TODO: add infostream -> normal logging system (there is an issue somewhere)\n      @SuppressWarnings({\"rawtypes\"})\n      IndexReaderWarmer warmer = core.getResourceLoader().newInstance(mergedSegmentWarmerInfo.className,\n                                                                        IndexReaderWarmer.class,\n                                                                        null,\n                                                                        new Class[] { InfoStream.class },\n                                                                        new Object[] { iwc.getInfoStream() });\n      iwc.setMergedSegmentWarmer(warmer);\n    }\n\n    return iwc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151c786e439f34edb91b77d019109463ab0a6548":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["151c786e439f34edb91b77d019109463ab0a6548"],"0ad30c6a479e764150a3316e57263319775f1df2":["c02b804ab16489b95429791a2d8fb0e0728354d4","3d33e731a93d4b57e662ff094f64f94a745422d4"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"28288370235ed02234a64753cdbf0c6ec096304a":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c02b804ab16489b95429791a2d8fb0e0728354d4","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["2b97509e7e2489430edfe784e4411976e3c6c748"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c02b804ab16489b95429791a2d8fb0e0728354d4","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"5d7561aa9163e566b45895f013690403401d5e5c":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["28288370235ed02234a64753cdbf0c6ec096304a"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"2b97509e7e2489430edfe784e4411976e3c6c748":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["5d7561aa9163e566b45895f013690403401d5e5c"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["c02b804ab16489b95429791a2d8fb0e0728354d4","9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"151c786e439f34edb91b77d019109463ab0a6548":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["5d7561aa9163e566b45895f013690403401d5e5c"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","9c23672acbb5104509c1c2d6e3dda7a08eaf091f","3d33e731a93d4b57e662ff094f64f94a745422d4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["2b97509e7e2489430edfe784e4411976e3c6c748"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5d7561aa9163e566b45895f013690403401d5e5c":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["151c786e439f34edb91b77d019109463ab0a6548"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"2b97509e7e2489430edfe784e4411976e3c6c748":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}