{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}