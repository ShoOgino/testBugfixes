{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d0da1152c8dd998675c30a3f6f599a91770c2b","date":1342792640,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    TimerContext time = stats.time(dir + \"_remove\");\n    try {\n      while (true) {\n        try {\n          orderedChildren = orderedChildren(null);\n        } catch (KeeperException.NoNodeException e) {\n          throw new NoSuchElementException();\n        }\n        if (orderedChildren.size() == 0) throw new NoSuchElementException();\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            zookeeper.delete(path, -1, true);\n            return data;\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      try {\n        orderedChildren = orderedChildren(null);\n      } catch (KeeperException.NoNodeException e) {\n        throw new NoSuchElementException();\n      }\n      if (orderedChildren.size() == 0) throw new NoSuchElementException();\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException,\n      InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    TimerContext time = stats.time(dir + \"_remove\");\n    try {\n      while (true) {\n        try {\n          orderedChildren = orderedChildren(null);\n        } catch (KeeperException.NoNodeException e) {\n          throw new NoSuchElementException();\n        }\n        if (orderedChildren.size() == 0) throw new NoSuchElementException();\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            zookeeper.delete(path, -1, true);\n            return data;\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#remove().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#remove().mjava","sourceNew":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Attempts to remove the head of the queue and return it.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove\");\n    try {\n      byte[] result = removeFirst();\n      if (result == null) {\n        throw new NoSuchElementException();\n      }\n      return result;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["a5093a9e893633cc091cf2f729d7863671c2b715"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"9f45f67a018421da088ea39274f23ad5d339b97d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"727bb765ff2542275f6d31f67be18d7104bae148":["2a282020d6c9a4ea32a359539e283e4771a2fda8","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["9f45f67a018421da088ea39274f23ad5d339b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["9f45f67a018421da088ea39274f23ad5d339b97d"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","727bb765ff2542275f6d31f67be18d7104bae148","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"9f45f67a018421da088ea39274f23ad5d339b97d":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c2d0da1152c8dd998675c30a3f6f599a91770c2b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","aba371508186796cc6151d8223a5b4e16d02e26e","6240b74b884c5587f2a4062dd27d6c32bf228889","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}