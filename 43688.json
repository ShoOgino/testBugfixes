{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.20, bounds.getMaxLatitude(), 0.01);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(-0.36, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.36, bounds.getRightLongitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Asymmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(0.74, bounds.getMaxLatitude(), 0.01);\n    assertEquals(-0.18, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.18, bounds.getRightLongitude(), 0.01);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.20, bounds.getMaxLatitude(), 0.01);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(-0.36, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.36, bounds.getRightLongitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Asymmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(0.74, bounds.getMaxLatitude(), 0.01);\n    assertEquals(-0.18, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.18, bounds.getRightLongitude(), 0.01);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","sourceNew":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.25 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(-0.0125, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0125, bounds.getRightLongitude(), 0.0001);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Symmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.125 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(-0.0089, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0089, bounds.getRightLongitude(), 0.0001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.20, bounds.getMaxLatitude(), 0.01);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(-0.36, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.36, bounds.getRightLongitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Asymmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.01);\n    assertEquals(0.74, bounds.getMaxLatitude(), 0.01);\n    assertEquals(-0.18, bounds.getLeftLongitude(), 0.01);\n    assertEquals(0.18, bounds.getRightLongitude(), 0.01);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoModelTest#testBasicCircle().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicCircle().mjava","sourceNew":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.25 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(-0.0125, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0125, bounds.getRightLongitude(), 0.0001);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Symmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.125 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(-0.0089, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0089, bounds.getRightLongitude(), 0.0001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    Bounds bounds = circle.getBounds(null);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.25 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(-0.0125, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0125, bounds.getRightLongitude(), 0.0001);\n\n    circle = new GeoCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = circle.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Symmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.125 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(-0.0089, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0089, bounds.getRightLongitude(), 0.0001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}