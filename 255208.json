{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","commits":[{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while (!success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addCopyFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n            //Key is the name of the field, values are the destinations\n\n            for (String destination : entry.getValue()) {\n              newSchema.registerCopyField(entry.getKey(), destination);\n            }\n          }\n          //TODO: move this common stuff out to shared methods\n           // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added copy fields for {} sources\", copyFields.size());\n          }\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while (!success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addCopyFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n            //Key is the name of the field, values are the destinations\n\n            for (String destination : entry.getValue()) {\n              newSchema.registerCopyField(entry.getKey(), destination);\n            }\n          }\n          //TODO: move this common stuff out to shared methods\n           // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added copy fields for {} sources\", copyFields.size());\n          }\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      // even though fields is volatile, we need to synchronize to avoid two addCopyFields\n      // happening concurrently (and ending up missing one of them)\n      synchronized (getSchemaUpdateLock()) {\n        newSchema = shallowCopy(true);\n        for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n          //Key is the name of the field, values are the destinations\n\n          for (String destination : entry.getValue()) {\n            newSchema.registerCopyField(entry.getKey(), destination);\n          }\n        }\n        //TODO: move this common stuff out to shared methods\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while (!success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addCopyFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n            //Key is the name of the field, values are the destinations\n\n            for (String destination : entry.getValue()) {\n              newSchema.registerCopyField(entry.getKey(), destination);\n            }\n          }\n          //TODO: move this common stuff out to shared methods\n           // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added copy fields for {} sources\", copyFields.size());\n          }\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added copy fields for {} sources\", copyFields.size());\n      } else {\n        log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      // even though fields is volatile, we need to synchronize to avoid two addCopyFields\n      // happening concurrently (and ending up missing one of them)\n      synchronized (getSchemaUpdateLock()) {\n        newSchema = shallowCopy(true);\n        for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n          //Key is the name of the field, values are the destinations\n\n          for (String destination : entry.getValue()) {\n            newSchema.registerCopyField(entry.getKey(), destination);\n          }\n        }\n        //TODO: move this common stuff out to shared methods\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","01257aab3074127b72c3b53a508f396bb968019c"],"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added copy fields for {} sources\", copyFields.size());\n      } else {\n        log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added copy fields for {} sources\", copyFields.size());\n      } else {\n        log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01257aab3074127b72c3b53a508f396bb968019c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a54972b2387f87fdd92600308f9a0d477b1f53b0","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"]},"commit2Childs":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"01257aab3074127b72c3b53a508f396bb968019c":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01257aab3074127b72c3b53a508f396bb968019c","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}