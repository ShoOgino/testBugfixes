{"path":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse\n   * @return The lat long\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = DistanceUtils.parsePointDouble(null, latLonStr, 2);\n    latLon[0] = Double.valueOf(toks[0]);\n\n    if (latLon[0] < -90.0 || latLon[0] > 90.0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + latLon[0] + \"]\");\n    }\n\n    latLon[1] = Double.valueOf(toks[1]);\n\n    if (latLon[1] < -180.0 || latLon[1] > 180.0) {\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + latLon[1] + \"]\");\n    }\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}