{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","commits":[{"id":"8854763f018feadbb30c35a83fd9599adb51ef63","date":1534341747,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference]).mjava","sourceNew":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.clusterPreferences = clusterPreferences != null ? Collections.unmodifiableList(clusterPreferences) : DEFAULT_PREFERENCES;\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences) {\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.clusterPreferences = clusterPreferences != null ? Collections.unmodifiableList(clusterPreferences) : DEFAULT_PREFERENCES;\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","sourceNew":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.clusterPreferences = clusterPreferences != null ? Collections.unmodifiableList(clusterPreferences) : DEFAULT_PREFERENCES;\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.clusterPreferences = clusterPreferences != null ? Collections.unmodifiableList(clusterPreferences) : DEFAULT_PREFERENCES;\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","sourceNew":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.emptyPreferences = clusterPreferences == null;\n    this.clusterPreferences = emptyPreferences ? DEFAULT_PREFERENCES : Collections.unmodifiableList(clusterPreferences);\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.clusterPreferences = clusterPreferences != null ? Collections.unmodifiableList(clusterPreferences) : DEFAULT_PREFERENCES;\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","sourceNew":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.emptyClusterPolicy = clusterPolicy == null;\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.emptyPreferences = clusterPreferences == null;\n    this.clusterPreferences = emptyPreferences ? DEFAULT_PREFERENCES : Collections.unmodifiableList(clusterPreferences);\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","sourceOld":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.emptyPreferences = clusterPreferences == null;\n    this.clusterPreferences = emptyPreferences ? DEFAULT_PREFERENCES : Collections.unmodifiableList(clusterPreferences);\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,List[Clause]],List[Clause],List[Preference],int).mjava","sourceNew":null,"sourceOld":"  private Policy(Map<String, List<Clause>> policies, List<Clause> clusterPolicy, List<Preference> clusterPreferences, int version) {\n    this.empty = policies == null && clusterPolicy == null && clusterPreferences == null;\n    this.zkVersion = version;\n    this.policies = policies != null ? Collections.unmodifiableMap(policies) : Collections.emptyMap();\n    this.emptyClusterPolicy = clusterPolicy == null;\n    this.clusterPolicy = clusterPolicy != null ? Collections.unmodifiableList(clusterPolicy) : Collections.emptyList();\n    this.emptyPreferences = clusterPreferences == null;\n    this.clusterPreferences = emptyPreferences ? DEFAULT_PREFERENCES : Collections.unmodifiableList(clusterPreferences);\n    this.params = Collections.unmodifiableList(\n        buildParams(this.clusterPreferences, this.clusterPolicy, this.policies).stream()\n            .map(s -> new Pair<>(s, VariableBase.getTagType(s)))\n            .collect(toList())\n    );\n    perReplicaAttributes = readPerReplicaAttrs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8854763f018feadbb30c35a83fd9599adb51ef63"],"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"8854763f018feadbb30c35a83fd9599adb51ef63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8854763f018feadbb30c35a83fd9599adb51ef63"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"8854763f018feadbb30c35a83fd9599adb51ef63":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}