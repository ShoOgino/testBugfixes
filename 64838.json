{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","commits":[{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", String.valueOf(tagKey));\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", delta);\n    });\n    ew.put(\"clause\", getClause());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", String.valueOf(tagKey));\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", String.valueOf(tagKey));\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", delta);\n    });\n    ew.put(\"clause\", getClause());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putStringIfNotNull(\"tagKey\", tagKey);\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n    if (!replicaInfoAndErrs.isEmpty()) {\n      ew.put(\"violatingReplicas\", (IteratorWriter) iw -> {\n        for (ReplicaInfoAndErr replicaInfoAndErr : replicaInfoAndErrs) {\n          iw.add(replicaInfoAndErr.replicaInfo);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", String.valueOf(tagKey));\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    if (!Policy.ANY.equals(shard)) ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", tagKey);\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n    if (!replicaInfoAndErrs.isEmpty()) {\n      ew.put(\"violatingReplicas\", (IteratorWriter) iw -> {\n        for (ReplicaInfoAndErr replicaInfoAndErr : replicaInfoAndErrs) {\n          iw.add(replicaInfoAndErr.replicaInfo);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putStringIfNotNull(\"tagKey\", tagKey);\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n    if (!replicaInfoAndErrs.isEmpty()) {\n      ew.put(\"violatingReplicas\", (IteratorWriter) iw -> {\n        for (ReplicaInfoAndErr replicaInfoAndErr : replicaInfoAndErrs) {\n          iw.add(replicaInfoAndErr.replicaInfo);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#writeMap(EntryWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.putIfNotNull(\"collection\", coll);\n    if (!Policy.ANY.equals(shard)) ew.putIfNotNull(\"shard\", shard);\n    ew.putIfNotNull(\"node\", node);\n    ew.putIfNotNull(\"tagKey\", tagKey);\n    ew.putIfNotNull(\"violation\", (MapWriter) ew1 -> {\n      if (getClause().isPerCollectiontag()) ew1.put(\"replica\", actualVal);\n      else ew1.put(clause.tag.name, String.valueOf(actualVal));\n      ew1.putIfNotNull(\"delta\", replicaCountDelta);\n    });\n    ew.put(\"clause\", getClause());\n    if (!replicaInfoAndErrs.isEmpty()) {\n      ew.put(\"violatingReplicas\", (IteratorWriter) iw -> {\n        for (ReplicaInfoAndErr replicaInfoAndErr : replicaInfoAndErrs) {\n          iw.add(replicaInfoAndErr.replicaInfo);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["16a22f8085bb46850c91784e94f7714345011404"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["1bbcda32e5cd37ef61ea1190bacd080308e22070"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["3f504512a03d978990cbff30db0522b354e846db"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["16a22f8085bb46850c91784e94f7714345011404"],"16a22f8085bb46850c91784e94f7714345011404":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}