{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String,String).mjava","commits":[{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFunctionQuery(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}