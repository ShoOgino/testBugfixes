{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFieldRangeFacet(String docValuesField, String nonDocValuesField) throws Exception {\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDocValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFieldRangeFacet(String docValuesField, String nonDocValuesField) throws Exception {\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDocValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldRangeFacet(String docValuesField, String nonDocValuesField) throws Exception {\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDocValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldRangeFacet(String docValuesField, String nonDocValuesField) throws Exception {\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDocValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldRangeFacet(String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldRangeFacet(String docValuesField, String nonDocValuesField) throws Exception {\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDocValuesField, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"10\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["46dc9ac8b3e748407baaef82453138ff3974480c","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["46dc9ac8b3e748407baaef82453138ff3974480c"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["46dc9ac8b3e748407baaef82453138ff3974480c","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}