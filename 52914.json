{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"/dev/null","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"/dev/null","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    }\n\n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    }\n\n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}