{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f607a0a2e930f55385c7a24afb68ef661ef7e3ee","date":1530823671,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testResilienceWithDeleteByQueryOnTarget().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check resilience of replication with delete by query executed on targets\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testResilienceWithDeleteByQueryOnTarget() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(0, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    docs.clear();\n    for (; start < 100; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n\n    deleteByQuery(TARGET_COLLECTION, \"*:*\");\n\n    assertNumDocs(50, SOURCE_COLLECTION);\n    assertNumDocs(0, TARGET_COLLECTION);\n\n    // Restart CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.STOP);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    docs.clear();\n    for (; start < 150; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(50, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f607a0a2e930f55385c7a24afb68ef661ef7e3ee","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","11f21773085db637873ba6e0bcd4265b2b4c7730","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"11f21773085db637873ba6e0bcd4265b2b4c7730":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}