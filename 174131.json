{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0);\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":null,"bugIntro":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc","date":1541533532,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ReaderWrapper#getFieldInfos().mjava","sourceNew":"    public FieldInfos getFieldInfos() {\n      return fieldInfos;\n    }\n\n","sourceOld":"    public FieldInfos getFieldInfos() {\n      Iterator<FieldInfo> it = in.getFieldInfos().iterator();\n      List<FieldInfo> newInfos = new ArrayList();\n      while(it.hasNext()) {\n        FieldInfo fieldInfo = it.next();\n\n        if(fieldInfo.name.equals(field)) {\n          FieldInfo f = new FieldInfo(fieldInfo.name,\n                                      fieldInfo.number,\n                                      fieldInfo.hasVectors(),\n                                      fieldInfo.hasNorms(),\n                                      fieldInfo.hasPayloads(),\n                                      fieldInfo.getIndexOptions(),\n                                      DocValuesType.NONE,\n                                      fieldInfo.getDocValuesGen(),\n                                      fieldInfo.attributes(),\n                                      0, 0, 0, fieldInfo.isSoftDeletesField());\n          newInfos.add(f);\n\n        } else {\n          newInfos.add(fieldInfo);\n        }\n      }\n      FieldInfos infos = new FieldInfos(newInfos.toArray(new FieldInfo[newInfos.size()]));\n      return infos;\n    }\n\n","bugFix":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","f6652c943595e92c187ee904c382863013eae28f","ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["f6652c943595e92c187ee904c382863013eae28f"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"]},"commit2Childs":{"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f6652c943595e92c187ee904c382863013eae28f":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}