{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedDeletes, BufferedDeletes.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSlice(globalSlice)) {\n//          System.out.println(Thread.currentThread() + \": apply globalSlice\");\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    ensureOpen();\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb34a2b7d3af7977fd446b08caa7e45c6f6ee8d","date":1559116779,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      ensureOpen();\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    ensureOpen();\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#tryApplyGlobalSlice().mjava","sourceNew":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      ensureOpen();\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  void tryApplyGlobalSlice() {\n    if (globalBufferLock.tryLock()) {\n      /*\n       * The global buffer must be locked but we don't need to update them if\n       * there is an update going on right now. It is sufficient to apply the\n       * deletes that have been added after the current in-flight global slices\n       * tail the next time we can get the lock!\n       */\n      try {\n        if (updateSliceNoSeqNo(globalSlice)) {\n          globalSlice.apply(globalBufferedUpdates, BufferedUpdates.MAX_INT);\n        }\n      } finally {\n        globalBufferLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["191128ac5b85671b1671e2c857437694283b6ebf","edb34a2b7d3af7977fd446b08caa7e45c6f6ee8d"],"6483e4260c08168709c02238ae083a51519a28dd":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","6483e4260c08168709c02238ae083a51519a28dd"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["191128ac5b85671b1671e2c857437694283b6ebf"],"edb34a2b7d3af7977fd446b08caa7e45c6f6ee8d":["34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["edb34a2b7d3af7977fd446b08caa7e45c6f6ee8d"],"edb34a2b7d3af7977fd446b08caa7e45c6f6ee8d":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}