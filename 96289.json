{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","commits":[{"id":"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413","date":1519539873,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * @param collectionName Name of the collection\n   * @param allowCached allow LazyCollectionRefs to use a time-based cached value\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName, boolean allowCached) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get(allowCached);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * @param collectionName Name of the collection\n   * @param allowCached allow LazyCollectionRefs to use a time-based cached value\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   */\n  public DocCollection getCollectionOrNull(String collectionName, boolean allowCached) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get(allowCached);\n  }\n\n","sourceOld":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * @param collectionName Name of the collection\n   * @param allowCached allow LazyCollectionRefs to use a time-based cached value\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName, boolean allowCached) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get(allowCached);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String,boolean).mjava","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * @param collectionName Name of the collection\n   * @param allowCached allow LazyCollectionRefs to use a time-based cached value\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   */\n  public DocCollection getCollectionOrNull(String collectionName, boolean allowCached) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get(allowCached);\n  }\n\n","sourceOld":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * @param collectionName Name of the collection\n   * @param allowCached allow LazyCollectionRefs to use a time-based cached value\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName, boolean allowCached) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get(allowCached);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}