{"path":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","commits":[{"id":"68679b64211552b88252c89aae1967b56ec3a550","date":1063712998,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","pathOld":"/dev/null","sourceNew":"    public void testOrderDoesntMatter() throws Exception {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        Document doc = new Document();\n        doc.add(Field.Text(\"field\", \"one two\"));\n        writer.addDocument(doc);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(directory);\n        PhraseQuery query = new PhraseQuery();\n        query.setSlop(5);\n        query.add(new Term(\"field\", \"two\"));\n        query.add(new Term(\"field\", \"one\"));\n        Hits hits = searcher.search(query);\n        assertEquals(1, hits.length());\n        searcher.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c87228f1735e4c52ad4c2aa745e1bf3309fef278","date":1064151719,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","sourceNew":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    Hits hits = searcher.search(query);\n    assertEquals(\"just sloppy enough\", 1, hits.length());\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query);\n    assertEquals(\"not sloppy enough\", 0, hits.length());\n  }\n\n","sourceOld":"    public void testOrderDoesntMatter() throws Exception {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n        Document doc = new Document();\n        doc.add(Field.Text(\"field\", \"one two\"));\n        writer.addDocument(doc);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(directory);\n        PhraseQuery query = new PhraseQuery();\n        query.setSlop(5);\n        query.add(new Term(\"field\", \"two\"));\n        query.add(new Term(\"field\", \"one\"));\n        Hits hits = searcher.search(query);\n        assertEquals(1, hits.length());\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","sourceNew":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    Hits hits = searcher.search(query);\n    assertEquals(\"just sloppy enough\", 1, hits.length());\n    QueryUtils.check(query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query);\n    assertEquals(\"not sloppy enough\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    Hits hits = searcher.search(query);\n    assertEquals(\"just sloppy enough\", 1, hits.length());\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query);\n    assertEquals(\"not sloppy enough\", 0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","sourceNew":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"not sloppy enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    Hits hits = searcher.search(query);\n    assertEquals(\"just sloppy enough\", 1, hits.length());\n    QueryUtils.check(query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query);\n    assertEquals(\"not sloppy enough\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testOrderDoesntMatter().mjava","sourceNew":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"not sloppy enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  /**\n   * As long as slop is at least 2, terms can be reversed\n   */\n  public void testOrderDoesntMatter() throws Exception {\n    query.setSlop(2); // must be at least two for reverse order match\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n\n    query = new PhraseQuery();\n    query.setSlop(2);\n    query.add(new Term(\"field\", \"three\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"not sloppy enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"c87228f1735e4c52ad4c2aa745e1bf3309fef278":["68679b64211552b88252c89aae1967b56ec3a550"],"68679b64211552b88252c89aae1967b56ec3a550":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["c87228f1735e4c52ad4c2aa745e1bf3309fef278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68679b64211552b88252c89aae1967b56ec3a550"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c87228f1735e4c52ad4c2aa745e1bf3309fef278":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"68679b64211552b88252c89aae1967b56ec3a550":["c87228f1735e4c52ad4c2aa745e1bf3309fef278"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}