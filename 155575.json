{"path":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","commits":[{"id":"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5","date":1196349488,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ignores the input result Token\n   * @param result\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(Token result) throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62edeaca980071f34a1d66b16fe7f6afed205327","date":1196433510,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","sourceNew":"  /**\n   * Ignores the input result Token and returns the next token out of the list of cached tokens\n   * @param result The input token\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(Token result) throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","sourceOld":"  /**\n   * Ignores the input result Token\n   * @param result\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(Token result) throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65c37765198388e3bb214c46b12ccad21276e670","date":1198851468,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","sourceNew":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next() throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","sourceOld":"  /**\n   * Ignores the input result Token and returns the next token out of the list of cached tokens\n   * @param result The input token\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(Token result) throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next().mjava","sourceNew":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next() throws IOException {\n    if (iter == null) iter = lst.iterator();\n    return iter.hasNext() ? (Token) iter.next() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","sourceNew":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   * @deprecated\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","sourceNew":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   * @deprecated\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/SinkTokenizer#next(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the next token out of the list of cached tokens\n   * @return The next {@link org.apache.lucene.analysis.Token} in the Sink.\n   * @throws IOException\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (iter == null) iter = lst.iterator();\n    // Since this TokenStream can be reset we have to maintain the tokens as immutable\n    if (iter.hasNext()) {\n      Token nextToken = (Token) iter.next();\n      return (Token) nextToken.clone();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["65c37765198388e3bb214c46b12ccad21276e670"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"65c37765198388e3bb214c46b12ccad21276e670":["62edeaca980071f34a1d66b16fe7f6afed205327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62edeaca980071f34a1d66b16fe7f6afed205327":["4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5"],"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"65c37765198388e3bb214c46b12ccad21276e670":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5"],"62edeaca980071f34a1d66b16fe7f6afed205327":["65c37765198388e3bb214c46b12ccad21276e670"],"4c0e82525d61a2be6ba5d29eb5048c7d39ee1ad5":["62edeaca980071f34a1d66b16fe7f6afed205327"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}