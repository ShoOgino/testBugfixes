{"path":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","sourceNew":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.holes = holes.clone();\n\n    // compute bounding box\n    double minX = x[0];\n    double maxX = x[0];\n    double minY = y[0];\n    double maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(x[i], minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(y[i], minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.holes = holes.clone();\n\n    // compute bounding box\n    double minX = x[0];\n    double maxX = x[0];\n    double minY = y[0];\n    double maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(x[i], minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(y[i], minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","sourceNew":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = x.clone();\n    this.y = y.clone();\n    this.holes = holes.clone();\n\n    // compute bounding box\n    float minX = checkVal(x[0]);\n    float maxX = x[0];\n    float minY = checkVal(y[0]);\n    float maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(checkVal(x[i]), minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(checkVal(y[i]), minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.holes = holes.clone();\n\n    // compute bounding box\n    double minX = x[0];\n    double maxX = x[0];\n    double minY = y[0];\n    double maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(x[i], minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(y[i], minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYPolygon#XYPolygon(float[],float[],XYPolygon...).mjava","sourceNew":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = x.clone();\n    this.y = y.clone();\n    this.holes = holes.clone();\n\n    // compute bounding box\n    float minX = checkVal(x[0]);\n    float maxX = x[0];\n    float minY = checkVal(y[0]);\n    float maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(checkVal(x[i]), minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(checkVal(y[i]), minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Polygon from the supplied x, y arrays, and optionally any holes.\n   */\n  public XYPolygon(float[] x, float[] y, XYPolygon... holes) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (holes == null) {\n      throw new IllegalArgumentException(\"holes must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (x[0] != x[x.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): x[0]=\" + x[0] + \" x[\" + (x.length-1) + \"]=\" + x[x.length-1]);\n    }\n    if (y[0] != y[y.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): y[0]=\" + y[0] + \" y[\" + (y.length-1) + \"]=\" + y[y.length-1]);\n    }\n    for (int i = 0; i < holes.length; i++) {\n      XYPolygon inner = holes[i];\n      if (inner.holes.length > 0) {\n        throw new IllegalArgumentException(\"holes may not contain holes: polygons may not nest.\");\n      }\n    }\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.holes = holes.clone();\n\n    // compute bounding box\n    double minX = x[0];\n    double maxX = x[0];\n    double minY = y[0];\n    double maxY = y[0];\n\n    double windingSum = 0d;\n    final int numPts = x.length - 1;\n    for (int i = 1, j = 0; i < numPts; j = i++) {\n      minX = Math.min(x[i], minX);\n      maxX = Math.max(x[i], maxX);\n      minY = Math.min(y[i], minY);\n      maxY = Math.max(y[i], maxY);\n      // compute signed area\n      windingSum += (x[j] - x[numPts])*(y[i] - y[numPts])\n          - (y[j] - y[numPts])*(x[i] - x[numPts]);\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.windingOrder = (windingSum < 0) ? GeoUtils.WindingOrder.CCW : GeoUtils.WindingOrder.CW;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["09c1e6d465800c73af60624bf9d4459a19f7940c","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}