{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestManyFields().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void xxxtestManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void xxxtestManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}