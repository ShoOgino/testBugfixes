{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","date":1419024596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      super.close();\n      // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n      // these tests should disable this check, by default we check the normal workflow.\n      // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n      if (!(streamState == State.END || streamState == State.CLOSE)) {\n        fail(\"close() called in wrong state: \" + streamState);\n      }\n    } finally {\n      streamState = State.CLOSE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}