{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      float coords[] = new float[prohibited.size()+1];\n      Arrays.fill(coords, 1F);\n      return new ReqExclScorer(main, \n                               new DisjunctionSumScorer(this, \n                                                        prohibited.toArray(new Scorer[prohibited.size()]), \n                                                        coords));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      float coords[] = new float[prohibited.size()+1];\n      Arrays.fill(coords, 1F);\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, coords, false));\n    }\n  }\n\n","sourceOld":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      float coords[] = new float[prohibited.size()+1];\n      Arrays.fill(coords, 1F);\n      return new ReqExclScorer(main, \n                               new DisjunctionSumScorer(this, \n                                                        prohibited.toArray(new Scorer[prohibited.size()]), \n                                                        coords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, false));\n    }\n  }\n\n","sourceOld":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      float coords[] = new float[prohibited.size()+1];\n      Arrays.fill(coords, 1F);\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, coords, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, false));\n    }\n  }\n\n","sourceOld":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      float coords[] = new float[prohibited.size()+1];\n      Arrays.fill(coords, 1F);\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, coords, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n    if (prohibited.isEmpty()) {\n      return main;\n    } else if (prohibited.size() == 1) {\n      return new ReqExclScorer(main, prohibited.get(0));\n    } else {\n      return new ReqExclScorer(main, new DisjunctionSumScorer(this, prohibited, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["835e9a6d1c5a6cc5684c905d972d68df554cfad5","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"c8a0e442f7b61f811680273b25da95994a724466":["dca67e06c96e95a8d9ef07418b6299bfd981523b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}