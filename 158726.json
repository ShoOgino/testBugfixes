{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    if (\"Lucene3x\".equals(TEST_POSTINGSFORMAT) || (\"random\".equals(TEST_POSTINGSFORMAT) && random.nextInt(4) == 0)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n    \n    // verify assertions are enabled (do last, for smooth cleanup)\n    if (!Boolean.parseBoolean(System.getProperty(\"tests.asserts.gracious\", \"false\"))) {\n      assertTrue(\"assertions are not enabled!\", assertionsEnabled());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || \"random\".equals(TEST_CODEC) && randomVal == 9) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    if (\"Lucene3x\".equals(TEST_POSTINGSFORMAT) || (\"random\".equals(TEST_POSTINGSFORMAT) && random.nextInt(4) == 0)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6a8aaafcb9d885a1d45f5d5c8421315a15c58b9","date":1320855127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (false && \"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || \"random\".equals(TEST_CODEC) && randomVal == 9) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1","date":1320855891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (false && \"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2","date":1320956530,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal <= 3)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7","date":1323207588,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"929d416aad35e36f2d2743c625e05e23908e7563","date":1323209095,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a0f2c692ef1ca02c43627ada9c214a057f18fe0","date":1326998036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e6a8aaafcb9d885a1d45f5d5c8421315a15c58b9":["06584e6e98d592b34e1329b384182f368d2025e8"],"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1":["e6a8aaafcb9d885a1d45f5d5c8421315a15c58b9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7","7a0f2c692ef1ca02c43627ada9c214a057f18fe0"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["7a0f2c692ef1ca02c43627ada9c214a057f18fe0"],"3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2":["8e8338ed9af8fe4457cdb985e4f8b3228363a8e1"],"7a0f2c692ef1ca02c43627ada9c214a057f18fe0":["9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7"],"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"929d416aad35e36f2d2743c625e05e23908e7563":["3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2","9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7":["3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e6a8aaafcb9d885a1d45f5d5c8421315a15c58b9":["8e8338ed9af8fe4457cdb985e4f8b3228363a8e1"],"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1":["3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2"],"06584e6e98d592b34e1329b384182f368d2025e8":["e6a8aaafcb9d885a1d45f5d5c8421315a15c58b9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3aac5860efc33f940cdbd4f7e27f080a4cbbc9a2":["929d416aad35e36f2d2743c625e05e23908e7563","9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7"],"7a0f2c692ef1ca02c43627ada9c214a057f18fe0":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"929d416aad35e36f2d2743c625e05e23908e7563":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"9eda19c7aeddd50f2d8bc261c8567cdeb7f094d7":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7a0f2c692ef1ca02c43627ada9c214a057f18fe0","929d416aad35e36f2d2743c625e05e23908e7563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","929d416aad35e36f2d2743c625e05e23908e7563","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}