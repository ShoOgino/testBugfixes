{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestSearcherTaxonomyManager#test().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig(tw);\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          FacetsCollector sfc = new FacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          FacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig(tw);\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toSimpleString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(tw, doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          FacetsCollector sfc = new FacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          FacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig(tw);\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          FacetsCollector sfc = new FacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          FacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestSearcherTaxonomyManager#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSearcherTaxonomyManager#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(tw, doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          FacetsCollector sfc = new FacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          FacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    final FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"field\", true);\n    final AtomicBoolean stop = new AtomicBoolean();\n\n    // How many unique facets to index before stopping:\n    final int ordLimit = TEST_NIGHTLY ? 100000 : 6000;\n\n    Thread indexer = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Set<String> seen = new HashSet<String>();\n            List<String> paths = new ArrayList<String>();\n            while (true) {\n              Document doc = new Document();\n              int numPaths = _TestUtil.nextInt(random(), 1, 5);\n              for(int i=0;i<numPaths;i++) {\n                String path;\n                if (!paths.isEmpty() && random().nextInt(5) != 4) {\n                  // Use previous path\n                  path = paths.get(random().nextInt(paths.size()));\n                } else {\n                  // Create new path\n                  path = null;\n                  while (true) {\n                    path = _TestUtil.randomRealisticUnicodeString(random());\n                    if (path.length() != 0 && !seen.contains(path)) {\n                      seen.add(path);\n                      paths.add(path);\n                      break;\n                    }\n                  }\n                }\n                doc.add(new FacetField(\"field\", path));\n              }\n              try {\n                w.addDocument(config.build(tw, doc));\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n\n              if (tw.getSize() >= ordLimit) {\n                break;\n              }\n            }\n          } finally {\n            stop.set(true);\n          }\n        }\n      };\n\n    final SearcherTaxonomyManager mgr = new SearcherTaxonomyManager(w, true, null, tw);\n\n    Thread reopener = new Thread() {\n        @Override\n        public void run() {\n          while(!stop.get()) {\n            try {\n              // Sleep for up to 20 msec:\n              Thread.sleep(random().nextInt(20));\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen\");\n              }\n\n              mgr.maybeRefresh();\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: reopen done\");\n              }\n            } catch (Exception ioe) {\n              throw new RuntimeException(ioe);\n            }\n          }\n        }\n      };\n    reopener.start();\n\n    indexer.start();\n\n    try {\n      while (!stop.get()) {\n        SearcherAndTaxonomy pair = mgr.acquire();\n        try {\n          //System.out.println(\"search maxOrd=\" + pair.taxonomyReader.getSize());\n          int topN = _TestUtil.nextInt(random(), 1, 20);\n          \n          FacetsCollector sfc = new FacetsCollector();\n          pair.searcher.search(new MatchAllDocsQuery(), sfc);\n          Facets facets = getTaxonomyFacetCounts(pair.taxonomyReader, config, sfc);\n          FacetResult result = facets.getTopChildren(10, \"field\");\n          if (pair.searcher.getIndexReader().numDocs() > 0) { \n            //System.out.println(pair.taxonomyReader.getSize());\n            assertTrue(result.childCount > 0);\n            assertTrue(result.labelValues.length > 0);\n          }\n\n          //if (VERBOSE) {\n          //System.out.println(\"TEST: facets=\" + FacetTestUtils.toString(results.get(0)));\n          //}\n        } finally {\n          mgr.release(pair);\n        }\n      }\n    } finally {\n      indexer.join();\n      reopener.join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now stop\");\n    }\n\n    IOUtils.close(mgr, tw, w, taxoDir, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}