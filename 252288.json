{"path":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#next(Token).mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken != null) {\n      char[] termBuffer = nextToken.termBuffer();\n      String termText = new String(termBuffer, 0, nextToken.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        nextToken.resizeTermBuffer(encodedLength);\n      }\n      nextToken.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(nextToken.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n    }\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4275990669802f4c50b4de5d3252a0987854ad68":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4275990669802f4c50b4de5d3252a0987854ad68"]},"commit2Childs":{"4275990669802f4c50b4de5d3252a0987854ad68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4275990669802f4c50b4de5d3252a0987854ad68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}