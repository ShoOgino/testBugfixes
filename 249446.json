{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a polygon node forms a valid ear with adjacent nodes. **/\n  private static final boolean isEar(final Node ear, final boolean mortonOptimized) {\n    if (mortonOptimized == true) {\n      return mortonIsEar(ear);\n    }\n\n    // make sure there aren't other points inside the potential ear\n    Node node = ear.next.next;\n    while (node != ear.previous) {\n      if (pointInEar(node.getX(), node.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n          && area(node.previous.getX(), node.previous.getY(), node.getX(), node.getY(),\n          node.next.getX(), node.next.getY()) >= 0) {\n        return false;\n      }\n      node = node.next;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a polygon node forms a valid ear with adjacent nodes. **/\n  private static final boolean isEar(final Node ear, final boolean mortonOptimized) {\n    if (mortonOptimized == true) {\n      return mortonIsEar(ear);\n    }\n\n    // make sure there aren't other points inside the potential ear\n    Node node = ear.next.next;\n    while (node != ear.previous) {\n      if (pointInEar(node.getX(), node.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n          && area(node.previous.getX(), node.previous.getY(), node.getX(), node.getY(),\n          node.next.getX(), node.next.getY()) >= 0) {\n        return false;\n      }\n      node = node.next;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a polygon node forms a valid ear with adjacent nodes. **/\n  private static final boolean isEar(final Node ear, final boolean mortonOptimized) {\n    if (mortonOptimized == true) {\n      return mortonIsEar(ear);\n    }\n\n    // make sure there aren't other points inside the potential ear\n    Node node = ear.next.next;\n    while (node != ear.previous) {\n      if (pointInEar(node.getX(), node.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n          && area(node.previous.getX(), node.previous.getY(), node.getX(), node.getY(),\n          node.next.getX(), node.next.getY()) >= 0) {\n        return false;\n      }\n      node = node.next;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEar(Node,boolean).mjava","sourceNew":"  /** Determines whether a polygon node forms a valid ear with adjacent nodes. **/\n  private static final boolean isEar(final Node ear, final boolean mortonOptimized) {\n    if (mortonOptimized == true) {\n      return mortonIsEar(ear);\n    }\n\n    // make sure there aren't other points inside the potential ear\n    Node node = ear.next.next;\n    while (node != ear.previous) {\n      if (pointInEar(node.getX(), node.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n          && area(node.previous.getX(), node.previous.getY(), node.getX(), node.getY(),\n          node.next.getX(), node.next.getY()) >= 0) {\n        return false;\n      }\n      node = node.next;\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Determines whether a polygon node forms a valid ear with adjacent nodes. **/\n  private static final boolean isEar(final Node ear, final boolean mortonOptimized) {\n    if (mortonOptimized == true) {\n      return mortonIsEar(ear);\n    }\n\n    // make sure there aren't other points inside the potential ear\n    Node node = ear.next.next;\n    while (node != ear.previous) {\n      if (pointInEar(node.getX(), node.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n          && area(node.previous.getX(), node.previous.getY(), node.getX(), node.getY(),\n          node.next.getX(), node.next.getY()) >= 0) {\n        return false;\n      }\n      node = node.next;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","09c1e6d465800c73af60624bf9d4459a19f7940c","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}