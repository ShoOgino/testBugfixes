{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","commits":[{"id":"e028427c37d768e47ed47abe3c52e0004ae71fa3","date":1339590654,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"/dev/null","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c9771d8fe486d1671a68c73cdfc1e1704ef9ff1","date":1339591179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new Lucene40RWCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1c9771d8fe486d1671a68c73cdfc1e1704ef9ff1"],"1c9771d8fe486d1671a68c73cdfc1e1704ef9ff1":["e028427c37d768e47ed47abe3c52e0004ae71fa3"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","4cc45c615dbb82bf79d5f9550286098367874fbf"],"e028427c37d768e47ed47abe3c52e0004ae71fa3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"1c9771d8fe486d1671a68c73cdfc1e1704ef9ff1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e028427c37d768e47ed47abe3c52e0004ae71fa3":["1c9771d8fe486d1671a68c73cdfc1e1704ef9ff1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e028427c37d768e47ed47abe3c52e0004ae71fa3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}