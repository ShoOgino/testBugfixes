{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexOld().mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexOld().mjava","pathOld":"/dev/null","sourceNew":"  /** remove in lucene 4.0 */\n  @Deprecated\n  public void testSpanRegexOld() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexOld().mjava","pathOld":"/dev/null","sourceNew":"  /** remove in lucene 4.0 */\n  @Deprecated\n  public void testSpanRegexOld() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexOld().mjava","sourceNew":null,"sourceOld":"  /** remove in lucene 4.0 */\n  @Deprecated\n  public void testSpanRegexOld() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexOld().mjava","sourceNew":null,"sourceOld":"  /** remove in lucene 4.0 */\n  @Deprecated\n  public void testSpanRegexOld() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["744486748bc5bee772100e49230e5bca39bac99a"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}