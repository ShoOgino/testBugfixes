{"path":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Throwable e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {\n      System.setProperty(ZK_WHITELIST_PROPERTY, \"ruok, mntr, conf\");\n    }\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3245c9d38051feb342be76689d33ba359e3d4f4","date":1582534773,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {\n      System.setProperty(ZK_WHITELIST_PROPERTY, \"ruok, mntr, conf\");\n    }\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    log.warn(\"Embedded Zookeeper is not recommended in production environments. See Reference Guide for details.\");\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {\n      System.setProperty(ZK_WHITELIST_PROPERTY, \"ruok, mntr, conf\");\n    }\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#start().mjava","sourceNew":"  public void start() {\n    if (zkRun == null) return;\n\n    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {\n      System.setProperty(ZK_WHITELIST_PROPERTY, \"ruok, mntr, conf\");\n    }\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      if (log.isInfoEnabled()) {\n        log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port {}\", zkProps.getClientPortAddress().getPort());\n      }\n    } else {\n      if (log.isInfoEnabled()) {\n        log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port {}\", zkProps.getClientPortAddress().getPort());\n      }\n    }\n\n    log.warn(\"Embedded Zookeeper is not recommended in production environments. See Reference Guide for details.\");\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","sourceOld":"  public void start() {\n    if (zkRun == null) return;\n\n    if (System.getProperty(ZK_WHITELIST_PROPERTY) == null) {\n      System.setProperty(ZK_WHITELIST_PROPERTY, \"ruok, mntr, conf\");\n    }\n    zkThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (zkProps.getServers().size() > 1) {\n            QuorumPeerMain zkServer = new QuorumPeerMain();\n            zkServer.runFromConfig(zkProps);\n          } else {\n            ServerConfig sc = new ServerConfig();\n            sc.readFrom(zkProps);\n            ZooKeeperServerMain zkServer = new ZooKeeperServerMain();\n            zkServer.runFromConfig(sc);\n          }\n          log.info(\"ZooKeeper Server exited.\");\n        } catch (Exception e) {\n          log.error(\"ZooKeeper Server ERROR\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    };\n\n    if (zkProps.getServers().size() > 1) {\n      log.info(\"STARTING EMBEDDED ENSEMBLE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    } else {\n      log.info(\"STARTING EMBEDDED STANDALONE ZOOKEEPER SERVER at port \" + zkProps.getClientPortAddress().getPort());\n    }\n\n    log.warn(\"Embedded Zookeeper is not recommended in production environments. See Reference Guide for details.\");\n\n    zkThread.setDaemon(true);\n    zkThread.start();\n    try {\n      Thread.sleep(500); // pause for ZooKeeper to start\n    } catch (Exception e) {\n      log.error(\"STARTING ZOOKEEPER\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["d3245c9d38051feb342be76689d33ba359e3d4f4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3245c9d38051feb342be76689d33ba359e3d4f4":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d3245c9d38051feb342be76689d33ba359e3d4f4":["ad4957cde742defe6db19689abdc267c5d948066"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["d3245c9d38051feb342be76689d33ba359e3d4f4"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}