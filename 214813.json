{"path":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#countsBySubrange(int[],int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#countsBySubrange(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Divides the values in <code>collection</code> into <code>numSubranges</code>\n   * subranges from <code>minValue</code> to <code>maxValue</code> and returns the\n   * number of values in each subrange. (For testing the flatness of distribution of\n   * a sample.)\n   * @param collection The collection of values to be counted.\n   * @param range The number of possible values.\n   * @param numSubranges How many intervals to divide the value range into.\n   */\n  private static int[] countsBySubrange(int[] collection, int range, int numSubranges) {\n    int[] counts = new int[numSubranges];\n    Arrays.fill(counts, 0);\n    int numInSubrange = range / numSubranges;\n    for (int j = 0; j < collection.length; j++) {\n      counts[collection[j] / numInSubrange]++;\n    }\n    return counts;\n  } // end RandomSample.countsBySubrange()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#countsBySubrange(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Divides the values in <code>collection</code> into <code>numSubranges</code>\n   * subranges from <code>minValue</code> to <code>maxValue</code> and returns the\n   * number of values in each subrange. (For testing the flatness of distribution of\n   * a sample.)\n   * @param collection The collection of values to be counted.\n   * @param range The number of possible values.\n   * @param numSubranges How many intervals to divide the value range into.\n   */\n  private static int[] countsBySubrange(int[] collection, int range, int numSubranges) {\n    int[] counts = new int[numSubranges];\n    Arrays.fill(counts, 0);\n    int numInSubrange = range / numSubranges;\n    for (int j = 0; j < collection.length; j++) {\n      counts[collection[j] / numInSubrange]++;\n    }\n    return counts;\n  } // end RandomSample.countsBySubrange()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#countsBySubrange(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Divides the values in <code>collection</code> into <code>numSubranges</code>\n   * subranges from <code>minValue</code> to <code>maxValue</code> and returns the\n   * number of values in each subrange. (For testing the flatness of distribution of\n   * a sample.)\n   * @param collection The collection of values to be counted.\n   * @param range The number of possible values.\n   * @param numSubranges How many intervals to divide the value range into.\n   */\n  private static int[] countsBySubrange(int[] collection, int range, int numSubranges) {\n    int[] counts = new int[numSubranges];\n    Arrays.fill(counts, 0);\n    int numInSubrange = range / numSubranges;\n    for (int j = 0; j < collection.length; j++) {\n      counts[collection[j] / numInSubrange]++;\n    }\n    return counts;\n  } // end RandomSample.countsBySubrange()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#countsBySubrange(int[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Divides the values in <code>collection</code> into <code>numSubranges</code>\n   * subranges from <code>minValue</code> to <code>maxValue</code> and returns the\n   * number of values in each subrange. (For testing the flatness of distribution of\n   * a sample.)\n   * @param collection The collection of values to be counted.\n   * @param range The number of possible values.\n   * @param numSubranges How many intervals to divide the value range into.\n   */\n  private static int[] countsBySubrange(int[] collection, int range, int numSubranges) {\n    int[] counts = new int[numSubranges];\n    Arrays.fill(counts, 0);\n    int numInSubrange = range / numSubranges;\n    for (int j = 0; j < collection.length; j++) {\n      counts[collection[j] / numInSubrange]++;\n    }\n    return counts;\n  } // end RandomSample.countsBySubrange()\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99b17503f4e360f8140fe80a593268486cd718b4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99b17503f4e360f8140fe80a593268486cd718b4"]},"commit2Childs":{"99b17503f4e360f8140fe80a593268486cd718b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["99b17503f4e360f8140fe80a593268486cd718b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}