{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","sourceOld":"  static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}