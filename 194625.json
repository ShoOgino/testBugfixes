{"path":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","commits":[{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider(writeNorms);\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    SimilarityProvider provider = new MySimProvider(writeNorms);\n    config.setSimilarityProvider(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory,boolean).mjava","sourceNew":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir, boolean writeNorms) throws IOException,\n      CorruptIndexException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider(writeNorms);\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = writeNorms ? 1 + random.nextInt(255) : 0;\n      Field f = new Field(byteTestField, \"\" + boost,\n          TextField.TYPE_STORED);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}