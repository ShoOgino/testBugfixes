{"path":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StopAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++)\n\t    System.out.println(i + \". \" + hits.doc(i).get(\"path\"));\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd7051cae1cd4180c626bab17df36b9db124345e","date":1009844774,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StopAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StopAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++)\n\t    System.out.println(i + \". \" + hits.doc(i).get(\"path\"));\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":5,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StopAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd7051cae1cd4180c626bab17df36b9db124345e":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["dd7051cae1cd4180c626bab17df36b9db124345e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6585acee8c9458b9745b49462abd05c2aa4f23d5"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["dd7051cae1cd4180c626bab17df36b9db124345e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"dd7051cae1cd4180c626bab17df36b9db124345e":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}