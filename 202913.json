{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","commits":[{"id":"be24bc5afb9111e35bec7963fc84f96ebd98d9ee","date":1477912779,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917d14a73292126b5039d6401cd12d3eb341c7ad","date":1478611785,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe15a42e904812683ef9365c28389e14f639466","date":1478615818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrntvWriterOverridesAllWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":"  @Test\n  public void testArrntvWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNameTypeValueJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testArrnvpWriterOverridesAllWrites().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testArrnvpWriterOverridesAllWrites() {\n    // List rather than Set because two not-overridden methods could share name but not signature\n    final List<String> methodsExpectedNotOverriden = new ArrayList<>(14);\n    methodsExpectedNotOverriden.add(\"writeResponse\");\n    methodsExpectedNotOverriden.add(\"writeKey\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapMangled\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsMapWithDups\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrMap\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsArrArr\");\n    methodsExpectedNotOverriden.add(\"writeNamedListAsFlat\");\n    methodsExpectedNotOverriden.add(\"writeEndDocumentList\");\n    methodsExpectedNotOverriden.add(\"writeMapOpener\");\n    methodsExpectedNotOverriden.add(\"writeMapSeparator\");\n    methodsExpectedNotOverriden.add(\"writeMapCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"writeArrayOpener\");\n    methodsExpectedNotOverriden.add(\"writeArraySeparator\");\n    methodsExpectedNotOverriden.add(\"writeArrayCloser\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException\");\n    methodsExpectedNotOverriden.add(\"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException\");\n\n    final Class<?> subClass = ArrayOfNamedValuePairJSONWriter.class;\n    final Class<?> superClass = subClass.getSuperclass();\n\n    for (final Method superClassMethod : superClass.getDeclaredMethods()) {\n      final String methodName = superClassMethod.getName();\n      final String methodFullName = superClassMethod.toString();\n      if (!methodName.startsWith(\"write\")) continue;\n\n      final int modifiers = superClassMethod.getModifiers();\n      if (Modifier.isFinal(modifiers)) continue;\n      if (Modifier.isStatic(modifiers)) continue;\n      if (Modifier.isPrivate(modifiers)) continue;\n\n      final boolean expectOverriden = !methodsExpectedNotOverriden.contains(methodName)\n          && !methodsExpectedNotOverriden.contains(methodFullName);\n\n      try {\n        final Method subClassMethod = subClass.getDeclaredMethod(\n            superClassMethod.getName(),\n            superClassMethod.getParameterTypes());\n\n        if (expectOverriden) {\n          assertEquals(\"getReturnType() difference\",\n              superClassMethod.getReturnType(),\n              subClassMethod.getReturnType());\n        } else {\n          fail(subClass + \" must not override '\" + superClassMethod + \"'\");\n        }\n      } catch (NoSuchMethodException e) {\n        if (expectOverriden) {\n          fail(subClass + \" needs to override '\" + superClassMethod + \"'\");\n        } else {\n          assertTrue(methodName+\" not found in remaining \"+methodsExpectedNotOverriden, methodsExpectedNotOverriden.remove(methodName)|| methodsExpectedNotOverriden.remove(methodFullName));\n        }\n      }\n    }\n\n    assertTrue(\"methodsExpected NotOverriden but NotFound instead: \"+methodsExpectedNotOverriden,\n        methodsExpectedNotOverriden.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"8fe15a42e904812683ef9365c28389e14f639466":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","917d14a73292126b5039d6401cd12d3eb341c7ad"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["8fe15a42e904812683ef9365c28389e14f639466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"917d14a73292126b5039d6401cd12d3eb341c7ad":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["320888923ec13b91f53082558f01f4c9960dd226","8fe15a42e904812683ef9365c28389e14f639466"],"320888923ec13b91f53082558f01f4c9960dd226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","87f40a063571d1870bae89b6d191c3cb53b10f5e"]},"commit2Childs":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","320888923ec13b91f53082558f01f4c9960dd226"],"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["8fe15a42e904812683ef9365c28389e14f639466","917d14a73292126b5039d6401cd12d3eb341c7ad"],"8fe15a42e904812683ef9365c28389e14f639466":["87f40a063571d1870bae89b6d191c3cb53b10f5e","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee","320888923ec13b91f53082558f01f4c9960dd226"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"917d14a73292126b5039d6401cd12d3eb341c7ad":["8fe15a42e904812683ef9365c28389e14f639466"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"320888923ec13b91f53082558f01f4c9960dd226":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}