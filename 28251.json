{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","commits":[{"id":"4c9661df01b81c277277a01afbca7851557a2148","date":1133588656,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Creates an instance for the given underlying stream and synonym table.\n\t * \n\t * @param input\n\t *            the underlying child token stream\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t */\n\tpublic SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n\t\tsuper(input);\n\t\tif (input == null)\n\t\t\tthrow new IllegalArgumentException(\"input must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\t\n\t\tthis.synonyms = synonyms;\n\t\tthis.maxSynonyms = maxSynonyms;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","sourceNew":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n  }\n\n","sourceOld":"\t/**\n\t * Creates an instance for the given underlying stream and synonym table.\n\t * \n\t * @param input\n\t *            the underlying child token stream\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t */\n\tpublic SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n\t\tsuper(input);\n\t\tif (input == null)\n\t\t\tthrow new IllegalArgumentException(\"input must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\t\n\t\tthis.synonyms = synonyms;\n\t\tthis.maxSynonyms = maxSynonyms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","sourceNew":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n    \n    this.termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    this.typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    this.posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","sourceNew":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n    \n    this.termAtt = addAttribute(TermAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n    \n    this.termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    this.typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    this.posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#SynonymTokenFilter(TokenStream,SynonymMap,int).mjava","sourceNew":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n    \n    this.termAtt = addAttribute(TermAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates an instance for the given underlying stream and synonym table.\n   * \n   * @param input\n   *            the underlying child token stream\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   */\n  public SynonymTokenFilter(TokenStream input, SynonymMap synonyms, int maxSynonyms) {\n    super(input);\n    if (input == null)\n      throw new IllegalArgumentException(\"input must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    \n    this.synonyms = synonyms;\n    this.maxSynonyms = maxSynonyms;\n    \n    this.termAtt = addAttribute(TermAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c9661df01b81c277277a01afbca7851557a2148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4c9661df01b81c277277a01afbca7851557a2148"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"4c9661df01b81c277277a01afbca7851557a2148":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c9661df01b81c277277a01afbca7851557a2148"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}