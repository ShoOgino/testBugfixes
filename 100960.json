{"path":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#checkHighlightingResponseList(ArrayList[SimpleOrderedMap[Object]],String).mjava","commits":[{"id":"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0","date":1515077688,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#checkHighlightingResponseList(ArrayList[SimpleOrderedMap[Object]],String).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkHighlightingResponseList(ArrayList<SimpleOrderedMap<Object>> highlightingList,\n      String highlightedField) throws Exception {\n    assertEquals(\"too few or too many elements: \"+highlightingList.size(),\n        3, highlightingList.size());\n    final Set<String> seenDocIds = new HashSet<>();\n    for (SimpleOrderedMap<Object> highlightingListElementMap : highlightingList) {\n      final String expectedHighlightText;\n      final String actualHighlightText;\n      // two elements in total: id and snippets\n      assertEquals(highlightingList.toString(), 2, highlightingListElementMap.size());\n      // id element\n      {\n        final String docId = (String)highlightingListElementMap.get(id_key);\n        seenDocIds.add(docId);\n        final String preHighlightText;\n        final String highlightedText = \"bee\";\n        if (\"1\".equals(docId)) {\n          preHighlightText = \"bumble \";\n        } else if (\"2\".equals(docId)) {\n          preHighlightText = \"honey \";\n        } else if (\"3\".equals(docId)) {\n          preHighlightText = \"solitary \";\n        } else  {\n          preHighlightText = null;\n          fail(\"unknown docId \"+docId);\n        }\n        expectedHighlightText = preHighlightText\n            + SolrFragmentsBuilder.DEFAULT_PRE_TAGS\n            + highlightedText\n            + SolrFragmentsBuilder.DEFAULT_POST_TAGS;\n      }\n      // snippets element\n      {\n        SimpleOrderedMap<Object> snippets = (SimpleOrderedMap<Object>)highlightingListElementMap.get(snippets_key);\n        if (highlightedField == null) {\n          assertEquals(0, snippets.size());\n        } else {\n          ArrayList<String> docHighlights = (ArrayList<String>)(snippets).get(highlightedField);\n          assertEquals(1, docHighlights.size());\n          actualHighlightText = (String)docHighlights.get(0);\n          assertEquals(expectedHighlightText, actualHighlightText);\n        }\n      }\n    }\n    assertEquals(3, seenDocIds.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#checkHighlightingResponseList(ArrayList[SimpleOrderedMap[Object]],String).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkHighlightingResponseList(ArrayList<SimpleOrderedMap<Object>> highlightingList,\n      String highlightedField) throws Exception {\n    assertEquals(\"too few or too many elements: \"+highlightingList.size(),\n        3, highlightingList.size());\n    final Set<String> seenDocIds = new HashSet<>();\n    for (SimpleOrderedMap<Object> highlightingListElementMap : highlightingList) {\n      final String expectedHighlightText;\n      final String actualHighlightText;\n      // two elements in total: id and snippets\n      assertEquals(highlightingList.toString(), 2, highlightingListElementMap.size());\n      // id element\n      {\n        final String docId = (String)highlightingListElementMap.get(id_key);\n        seenDocIds.add(docId);\n        final String preHighlightText;\n        final String highlightedText = \"bee\";\n        if (\"1\".equals(docId)) {\n          preHighlightText = \"bumble \";\n        } else if (\"2\".equals(docId)) {\n          preHighlightText = \"honey \";\n        } else if (\"3\".equals(docId)) {\n          preHighlightText = \"solitary \";\n        } else  {\n          preHighlightText = null;\n          fail(\"unknown docId \"+docId);\n        }\n        expectedHighlightText = preHighlightText\n            + SolrFragmentsBuilder.DEFAULT_PRE_TAGS\n            + highlightedText\n            + SolrFragmentsBuilder.DEFAULT_POST_TAGS;\n      }\n      // snippets element\n      {\n        SimpleOrderedMap<Object> snippets = (SimpleOrderedMap<Object>)highlightingListElementMap.get(snippets_key);\n        if (highlightedField == null) {\n          assertEquals(0, snippets.size());\n        } else {\n          ArrayList<String> docHighlights = (ArrayList<String>)(snippets).get(highlightedField);\n          assertEquals(1, docHighlights.size());\n          actualHighlightText = (String)docHighlights.get(0);\n          assertEquals(expectedHighlightText, actualHighlightText);\n        }\n      }\n    }\n    assertEquals(3, seenDocIds.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#checkHighlightingResponseList(ArrayList[SimpleOrderedMap[Object]],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#checkHighlightingResponseList(ArrayList[SimpleOrderedMap[Object]],String).mjava","sourceNew":"  protected void checkHighlightingResponseList(ArrayList<SimpleOrderedMap<Object>> highlightingList,\n      String highlightedField) throws Exception {\n    assertEquals(\"too few or too many elements: \"+highlightingList.size(),\n        3, highlightingList.size());\n    final Set<String> seenDocIds = new HashSet<>();\n    for (SimpleOrderedMap<Object> highlightingListElementMap : highlightingList) {\n      final String expectedHighlightText;\n      final String actualHighlightText;\n      // two elements in total: id and snippets\n      assertEquals(highlightingList.toString(), 2, highlightingListElementMap.size());\n      // id element\n      {\n        final String docId = (String)highlightingListElementMap.get(id_key);\n        seenDocIds.add(docId);\n        final String preHighlightText;\n        final String highlightedText = \"bee\";\n        if (\"1\".equals(docId)) {\n          preHighlightText = \"bumble \";\n        } else if (\"2\".equals(docId)) {\n          preHighlightText = \"honey \";\n        } else if (\"3\".equals(docId)) {\n          preHighlightText = \"solitary \";\n        } else  {\n          preHighlightText = null;\n          fail(\"unknown docId \"+docId);\n        }\n        expectedHighlightText = preHighlightText\n            + SolrFragmentsBuilder.DEFAULT_PRE_TAGS\n            + highlightedText\n            + SolrFragmentsBuilder.DEFAULT_POST_TAGS;\n      }\n      // snippets element\n      {\n        @SuppressWarnings({\"unchecked\"})\n        SimpleOrderedMap<Object> snippets = (SimpleOrderedMap<Object>)highlightingListElementMap.get(snippets_key);\n        if (highlightedField == null) {\n          assertEquals(0, snippets.size());\n        } else {\n          @SuppressWarnings({\"unchecked\"})\n          ArrayList<String> docHighlights = (ArrayList<String>)(snippets).get(highlightedField);\n          assertEquals(1, docHighlights.size());\n          actualHighlightText = docHighlights.get(0);\n          assertEquals(expectedHighlightText, actualHighlightText);\n        }\n      }\n    }\n    assertEquals(3, seenDocIds.size());\n  }\n\n","sourceOld":"  protected void checkHighlightingResponseList(ArrayList<SimpleOrderedMap<Object>> highlightingList,\n      String highlightedField) throws Exception {\n    assertEquals(\"too few or too many elements: \"+highlightingList.size(),\n        3, highlightingList.size());\n    final Set<String> seenDocIds = new HashSet<>();\n    for (SimpleOrderedMap<Object> highlightingListElementMap : highlightingList) {\n      final String expectedHighlightText;\n      final String actualHighlightText;\n      // two elements in total: id and snippets\n      assertEquals(highlightingList.toString(), 2, highlightingListElementMap.size());\n      // id element\n      {\n        final String docId = (String)highlightingListElementMap.get(id_key);\n        seenDocIds.add(docId);\n        final String preHighlightText;\n        final String highlightedText = \"bee\";\n        if (\"1\".equals(docId)) {\n          preHighlightText = \"bumble \";\n        } else if (\"2\".equals(docId)) {\n          preHighlightText = \"honey \";\n        } else if (\"3\".equals(docId)) {\n          preHighlightText = \"solitary \";\n        } else  {\n          preHighlightText = null;\n          fail(\"unknown docId \"+docId);\n        }\n        expectedHighlightText = preHighlightText\n            + SolrFragmentsBuilder.DEFAULT_PRE_TAGS\n            + highlightedText\n            + SolrFragmentsBuilder.DEFAULT_POST_TAGS;\n      }\n      // snippets element\n      {\n        SimpleOrderedMap<Object> snippets = (SimpleOrderedMap<Object>)highlightingListElementMap.get(snippets_key);\n        if (highlightedField == null) {\n          assertEquals(0, snippets.size());\n        } else {\n          ArrayList<String> docHighlights = (ArrayList<String>)(snippets).get(highlightedField);\n          assertEquals(1, docHighlights.size());\n          actualHighlightText = (String)docHighlights.get(0);\n          assertEquals(expectedHighlightText, actualHighlightText);\n        }\n      }\n    }\n    assertEquals(3, seenDocIds.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}