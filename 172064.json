{"path":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","commits":[{"id":"c3655f54faddf6be170f81f2105afebac0bc3afb","date":1330555392,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3400f1e025e1c3ed713747d5b52712339c351cb","date":1350024902,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATokenizersSolrIntegrationTest#testUIMATypeAwareTokenizerIndexAndQuery().mjava","pathOld":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","sourceNew":"  @Test\n  public void testUIMATypeAwareTokenizerIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATokenizersSolrIntegrationTest#testUIMATypeAwareTokenizerIndexAndQuery().mjava","pathOld":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","sourceNew":"  @Test\n  public void testUIMATypeAwareTokenizerIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATokenizersSolrIntegrationTest#testUIMATypeAwareTokenizerIndexAndQuery().mjava","pathOld":"solr/contrib/uima/src/test/org/apache/solr/uima/analysis/UIMATypeAwareAnnotationsTokenizerFactoryTest#testIndexAndQuery().mjava","sourceNew":"  @Test\n  public void testUIMATypeAwareTokenizerIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testIndexAndQuery() throws Exception {\n    assertU(\"<add><doc><field name=\\\"id\\\">123</field><field name=\\\"text\\\">The counter counts the beans: 1 and 2 and three.</field></doc></add>\");\n    assertU(commit());\n    SolrQueryRequest req = req(\"qt\", \"/terms\", \"terms.fl\", \"nouns\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='beans']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name='counter']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='The']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='counts']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='the']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!=':']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='1']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='and']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='2']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='three']\");\n    assertQ(req, \"//lst[@name='nouns']/int[@name!='.']\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c3655f54faddf6be170f81f2105afebac0bc3afb"],"d82832af39f94dbb58a3130fd216ff1d49435589":["c3655f54faddf6be170f81f2105afebac0bc3afb","b3400f1e025e1c3ed713747d5b52712339c351cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3400f1e025e1c3ed713747d5b52712339c351cb":["c3655f54faddf6be170f81f2105afebac0bc3afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3400f1e025e1c3ed713747d5b52712339c351cb"],"c3655f54faddf6be170f81f2105afebac0bc3afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["c3655f54faddf6be170f81f2105afebac0bc3afb","b3400f1e025e1c3ed713747d5b52712339c351cb"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c3655f54faddf6be170f81f2105afebac0bc3afb"],"b3400f1e025e1c3ed713747d5b52712339c351cb":["d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"c3655f54faddf6be170f81f2105afebac0bc3afb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","b3400f1e025e1c3ed713747d5b52712339c351cb","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}