{"path":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  public  void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    // log.finer(\"Solr doGet: getQueryString:\" + request.getQueryString());\n\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter writer = response.getWriter();\n        // if (solrReq.getStrParam(\"version\",\"2\").charAt(0) == '1')\n        xmlResponseWriter.write(writer, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n          rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbe98c74fdb9ed434e14c3d856735ab5c437c936","date":1144423212,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter writer = response.getWriter();\n        // if (solrReq.getStrParam(\"version\",\"2\").charAt(0) == '1')\n        xmlResponseWriter.write(writer, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n          rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n\n  }\n\n","sourceOld":"  public  void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    // log.finer(\"Solr doGet: getQueryString:\" + request.getQueryString());\n\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter writer = response.getWriter();\n        // if (solrReq.getStrParam(\"version\",\"2\").charAt(0) == '1')\n        xmlResponseWriter.write(writer, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n          rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5db1d0b312c5915094ef798a33d392623fd40bb3","date":1148622242,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter out = response.getWriter();\n\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter writer = response.getWriter();\n        // if (solrReq.getStrParam(\"version\",\"2\").charAt(0) == '1')\n        xmlResponseWriter.write(writer, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n          rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a9762f04172109efeb2e7190066381b767bbdf2","date":1152811341,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      // log.severe(\"REQUEST PARAMS:\" + solrReq.getParamString());\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        response.setContentType(CONTENT_TYPE);\n        PrintWriter out = response.getWriter();\n\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15912a8f88a477593864eb92920f9b4c1577da1","date":1166556686,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq =null;\n    SolrQueryResponse solrRsp =null;\n    try {\n      solrRsp = new SolrQueryResponse();\n      solrReq = new SolrServletRequest(core, request);\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(400,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n      core.execute(solrReq, solrRsp);\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(400,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"864e484eede906448b166b945a619a5929422541","date":1213295270,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71fd2f49de58ccb4422e7181620d8f795693b7eb","date":1218407598,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    \n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    \n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warn(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    \n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warning(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    \n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warn(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","sourceOld":"  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    if( hasMulticore ) {\n      response.sendError( 400, \"Missing solr core name in path\" );\n      return;\n    }\n    \n    final SolrCore core = SolrCore.getSolrCore();\n    SolrServletRequest solrReq = new SolrServletRequest(core, request);;\n    SolrQueryResponse solrRsp = new SolrQueryResponse();\n    try {\n\n      SolrRequestHandler handler = core.getRequestHandler(solrReq.getQueryType());\n      if (handler==null) {\n        log.warn(\"Unknown Request Handler '\" + solrReq.getQueryType() +\"' :\" + solrReq);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Unknown Request Handler '\" + solrReq.getQueryType() + \"'\", true);\n      }\n      core.execute(handler, solrReq, solrRsp );\n      if (solrRsp.getException() == null) {\n        QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n        response.setContentType(responseWriter.getContentType(solrReq, solrRsp));\n        PrintWriter out = response.getWriter();\n        responseWriter.write(out, solrReq, solrRsp);\n      } else {\n        Exception e = solrRsp.getException();\n        int rc=500;\n        if (e instanceof SolrException) {\n           rc=((SolrException)e).code();\n        }\n        sendErr(rc, SolrException.toStr(e), request, response);\n      }\n    } catch (SolrException e) {\n      if (!e.logged) SolrException.log(log,e);\n      sendErr(e.code(), SolrException.toStr(e), request, response);\n    } catch (Throwable e) {\n      SolrException.log(log,e);\n      sendErr(500, SolrException.toStr(e), request, response);\n    } finally {\n      // This releases the IndexReader associated with the request\n      solrReq.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71fd2f49de58ccb4422e7181620d8f795693b7eb":["864e484eede906448b166b945a619a5929422541"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"864e484eede906448b166b945a619a5929422541":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["71fd2f49de58ccb4422e7181620d8f795693b7eb"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["d80013b5e260def972025c93a0b08524f9c38f49"],"c15912a8f88a477593864eb92920f9b4c1577da1":["7a9762f04172109efeb2e7190066381b767bbdf2"],"7a9762f04172109efeb2e7190066381b767bbdf2":["5db1d0b312c5915094ef798a33d392623fd40bb3"],"d80013b5e260def972025c93a0b08524f9c38f49":["c15912a8f88a477593864eb92920f9b4c1577da1"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbe98c74fdb9ed434e14c3d856735ab5c437c936":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"5db1d0b312c5915094ef798a33d392623fd40bb3":["cbe98c74fdb9ed434e14c3d856735ab5c437c936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71fd2f49de58ccb4422e7181620d8f795693b7eb":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"864e484eede906448b166b945a619a5929422541":["71fd2f49de58ccb4422e7181620d8f795693b7eb"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["864e484eede906448b166b945a619a5929422541"],"c15912a8f88a477593864eb92920f9b4c1577da1":["d80013b5e260def972025c93a0b08524f9c38f49"],"7a9762f04172109efeb2e7190066381b767bbdf2":["c15912a8f88a477593864eb92920f9b4c1577da1"],"d80013b5e260def972025c93a0b08524f9c38f49":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["cbe98c74fdb9ed434e14c3d856735ab5c437c936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbe98c74fdb9ed434e14c3d856735ab5c437c936":["5db1d0b312c5915094ef798a33d392623fd40bb3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5db1d0b312c5915094ef798a33d392623fd40bb3":["7a9762f04172109efeb2e7190066381b767bbdf2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}