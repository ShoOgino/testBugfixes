{"path":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}