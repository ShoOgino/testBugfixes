{"path":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","commits":[{"id":"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30","date":1387399235,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"/dev/null","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30"],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}