{"path":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","commits":[{"id":"f151b9e2e36c815b7e709361706344cf77c3b006","date":1468853133,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["787ce4a24faeef467c63d3d91bf1af32171ef07f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1ded47455ec3d9f56f1dcc03084f4ff88dcea8f","date":1468924137,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7d8d07f402e4b9526e07ee749855f2258febdd5","date":1468932698,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8adbe9599e1f40415314d303714aa799ccedcbfa","date":1485884320,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      final SolrQueryBuilder queryBuilder = loader.newInstance(\n          queryBuilderClassName,\n          SolrQueryBuilder.class,\n          null,\n          new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n          new Object[] {defaultField, analyzer, req, this});\n\n      this.queryFactory.addBuilder(queryName, queryBuilder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"787ce4a24faeef467c63d3d91bf1af32171ef07f","date":1499173980,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getSchema().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","bugFix":["f151b9e2e36c815b7e709361706344cf77c3b006"],"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getSchema().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getSchema().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","bugFix":["787ce4a24faeef467c63d3d91bf1af32171ef07f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCoreParser#init(NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList initArgs) {\n    if (initArgs == null || initArgs.size() == 0) {\n      return;\n    }\n    final SolrResourceLoader loader;\n    if (req == null) {\n      loader = new SolrResourceLoader();\n    } else {\n      loader = req.getCore().getResourceLoader();\n    }\n\n    final Iterable<Map.Entry<String,Object>> args = initArgs;\n    for (final Map.Entry<String,Object> entry : args) {\n      final String queryName = entry.getKey();\n      final String queryBuilderClassName = (String)entry.getValue();\n\n      try {\n        final SolrSpanQueryBuilder spanQueryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrSpanQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, SpanQueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addSpanQueryBuilder(queryName, spanQueryBuilder);\n      } catch (Exception outerException) {\n        try {\n        final SolrQueryBuilder queryBuilder = loader.newInstance(\n            queryBuilderClassName,\n            SolrQueryBuilder.class,\n            null,\n            new Class[] {String.class, Analyzer.class, SolrQueryRequest.class, QueryBuilder.class},\n            new Object[] {defaultField, analyzer, req, this});\n\n        this.addQueryBuilder(queryName, queryBuilder);\n        } catch (Exception innerException) {\n          log.error(\"Class {} not found or not suitable: {} {}\",\n              queryBuilderClassName, outerException, innerException);\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Cannot find suitable \"\n                  + SolrSpanQueryBuilder.class.getCanonicalName() + \" or \"\n                  + SolrQueryBuilder.class.getCanonicalName() + \" class: \"\n                  + queryBuilderClassName + \" in \"\n                  + loader);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f151b9e2e36c815b7e709361706344cf77c3b006":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8adbe9599e1f40415314d303714aa799ccedcbfa":["a7d8d07f402e4b9526e07ee749855f2258febdd5"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["787ce4a24faeef467c63d3d91bf1af32171ef07f"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["8adbe9599e1f40415314d303714aa799ccedcbfa","787ce4a24faeef467c63d3d91bf1af32171ef07f"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8adbe9599e1f40415314d303714aa799ccedcbfa"],"a7d8d07f402e4b9526e07ee749855f2258febdd5":["f151b9e2e36c815b7e709361706344cf77c3b006","e1ded47455ec3d9f56f1dcc03084f4ff88dcea8f"],"e1ded47455ec3d9f56f1dcc03084f4ff88dcea8f":["f151b9e2e36c815b7e709361706344cf77c3b006"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7d8d07f402e4b9526e07ee749855f2258febdd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"787ce4a24faeef467c63d3d91bf1af32171ef07f":["8adbe9599e1f40415314d303714aa799ccedcbfa"]},"commit2Childs":{"f151b9e2e36c815b7e709361706344cf77c3b006":["a7d8d07f402e4b9526e07ee749855f2258febdd5","e1ded47455ec3d9f56f1dcc03084f4ff88dcea8f"],"8adbe9599e1f40415314d303714aa799ccedcbfa":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","787ce4a24faeef467c63d3d91bf1af32171ef07f"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f151b9e2e36c815b7e709361706344cf77c3b006","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"a7d8d07f402e4b9526e07ee749855f2258febdd5":["8adbe9599e1f40415314d303714aa799ccedcbfa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1ded47455ec3d9f56f1dcc03084f4ff88dcea8f":["a7d8d07f402e4b9526e07ee749855f2258febdd5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"787ce4a24faeef467c63d3d91bf1af32171ef07f":["df151630bfbea5338a007b97bfd37e4ec94f873f","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}