{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","commits":[{"id":"91e8768e9769f9e5175b1d99dcd27600bc9d4374","date":1342373687,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"/dev/null","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE++;\n            } else {\n              if (equalsIgnoreTurkish(\"meta\", localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (equalsIgnoreTurkish(\"img\", localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (equalsIgnoreTurkish(\"body\", localName)) {\n            inBODY++;\n          } else if (equalsIgnoreTurkish(\"head\", localName)) {\n            inHEAD++;\n          } else if (equalsIgnoreTurkish(\"frameset\", localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (equalsIgnoreTurkish(\"body\", localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"head\", localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"/dev/null","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE++;\n            } else {\n              if (equalsIgnoreTurkish(\"meta\", localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (equalsIgnoreTurkish(\"img\", localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (equalsIgnoreTurkish(\"body\", localName)) {\n            inBODY++;\n          } else if (equalsIgnoreTurkish(\"head\", localName)) {\n            inHEAD++;\n          } else if (equalsIgnoreTurkish(\"frameset\", localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (equalsIgnoreTurkish(\"body\", localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"head\", localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"/dev/null","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE++;\n            } else {\n              if (equalsIgnoreTurkish(\"meta\", localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (equalsIgnoreTurkish(\"img\", localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (equalsIgnoreTurkish(\"body\", localName)) {\n            inBODY++;\n          } else if (equalsIgnoreTurkish(\"head\", localName)) {\n            inHEAD++;\n          } else if (equalsIgnoreTurkish(\"frameset\", localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (equalsIgnoreTurkish(\"body\", localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"head\", localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cc22d685eededeac6e0c9060b3c80cdf1f39fce","date":1354749887,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE++;\n            } else {\n              if (equalsIgnoreTurkish(\"meta\", localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (equalsIgnoreTurkish(\"img\", localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (equalsIgnoreTurkish(\"body\", localName)) {\n            inBODY++;\n          } else if (equalsIgnoreTurkish(\"head\", localName)) {\n            inHEAD++;\n          } else if (equalsIgnoreTurkish(\"frameset\", localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (equalsIgnoreTurkish(\"body\", localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"head\", localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE++;\n            } else {\n              if (equalsIgnoreTurkish(\"meta\", localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (equalsIgnoreTurkish(\"img\", localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (equalsIgnoreTurkish(\"body\", localName)) {\n            inBODY++;\n          } else if (equalsIgnoreTurkish(\"head\", localName)) {\n            inHEAD++;\n          } else if (equalsIgnoreTurkish(\"frameset\", localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (equalsIgnoreTurkish(\"body\", localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (equalsIgnoreTurkish(\"head\", localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && equalsIgnoreTurkish(\"title\", localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DemoHTMLParser.Parser#Parser(InputSource).mjava","sourceNew":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","sourceOld":"    public Parser(InputSource source) throws IOException, SAXException {\n      final SAXParser parser = new SAXParser();\n      parser.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/balance-tags\", true);\n      parser.setFeature(\"http://cyberneko.org/html/features/report-errors\", false);\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      final StringBuilder title = new StringBuilder(), body = new StringBuilder();\n      final DefaultHandler handler = new DefaultHandler() {\n        private int inBODY = 0, inHEAD = 0, inTITLE = 0, suppressed = 0;\n\n        @Override\n        public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {\n          if (inHEAD > 0) {\n            if (\"title\".equals(localName)) {\n              inTITLE++;\n            } else {\n              if (\"meta\".equals(localName)) {\n                String name = atts.getValue(\"name\");\n                if (name == null) {\n                  name = atts.getValue(\"http-equiv\");\n                }\n                final String val = atts.getValue(\"content\");\n                if (name != null && val != null) {\n                  metaTags.setProperty(name.toLowerCase(Locale.ROOT), val);\n                }\n              }\n            }\n          } else if (inBODY > 0) {\n            if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed++;\n            } else if (\"img\".equals(localName)) {\n              // the original javacc-based parser preserved <IMG alt=\"...\"/>\n              // attribute as body text in [] parenthesis:\n              final String alt = atts.getValue(\"alt\");\n              if (alt != null) {\n                body.append('[').append(alt).append(']');\n              }\n            }\n          } else if (\"body\".equals(localName)) {\n            inBODY++;\n          } else if (\"head\".equals(localName)) {\n            inHEAD++;\n          } else if (\"frameset\".equals(localName)) {\n            throw new SAXException(\"This parser does not support HTML framesets.\");\n          }\n        }\n\n        @Override\n        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n          if (inBODY > 0) {\n            if (\"body\".equals(localName)) {\n              inBODY--;\n            } else if (ENDLINE_ELEMENTS.contains(localName)) {\n              body.append('\\n');\n            } else if (SUPPRESS_ELEMENTS.contains(localName)) {\n              suppressed--;\n            }\n          } else if (inHEAD > 0) {\n            if (\"head\".equals(localName)) {\n              inHEAD--;\n            } else if (inTITLE > 0 && \"title\".equals(localName)) {\n              inTITLE--;\n            }\n          }\n        }\n        \n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException { \n          if (inBODY > 0 && suppressed == 0) {\n            body.append(ch, start, length);\n          } else if (inTITLE > 0) {\n            title.append(ch, start, length);\n          }\n        }\n\n        @Override\n        public InputSource resolveEntity(String publicId, String systemId) {\n          // disable network access caused by DTDs\n          return new InputSource(new StringReader(\"\"));\n        }\n      };\n      \n      parser.setContentHandler(handler);\n      parser.setErrorHandler(handler);\n      parser.parse(source);\n      \n      // the javacc-based parser trimmed title (which should be done for HTML in all cases):\n      this.title = title.toString().trim();\n      \n      // assign body text\n      this.body = body.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"6cc22d685eededeac6e0c9060b3c80cdf1f39fce":["91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["91e8768e9769f9e5175b1d99dcd27600bc9d4374","6cc22d685eededeac6e0c9060b3c80cdf1f39fce"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["6cc22d685eededeac6e0c9060b3c80cdf1f39fce"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6cc22d685eededeac6e0c9060b3c80cdf1f39fce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6cc22d685eededeac6e0c9060b3c80cdf1f39fce":["407687e67faf6e1f02a211ca078d8e3eed631027","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["aba371508186796cc6151d8223a5b4e16d02e26e","6cc22d685eededeac6e0c9060b3c80cdf1f39fce","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","91e8768e9769f9e5175b1d99dcd27600bc9d4374","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}