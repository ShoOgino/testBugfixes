{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final Vector point, final double transX, final double transY, final double transZ,\n                                          final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return new GeoPoint(result.x, result.y, result.z);\n  }\n\n","sourceOld":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final Vector point, final double transX, final double transY, final double transZ,\n                                          final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return new GeoPoint(result.x, result.y, result.z);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec544d8bab0522461529d7ba4fbe68c09cf4793f","date":1529389900,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(PlanetModel,Vector,double,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param planetModel is the planet model.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final PlanetModel planetModel,\n    final Vector point, final double transX, final double transY, final double transZ,\n    final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return planetModel.createSurfacePoint(result.x, result.y, result.z);\n  }\n\n","sourceOld":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final Vector point, final double transX, final double transY, final double transZ,\n                                          final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return new GeoPoint(result.x, result.y, result.z);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final Vector point, final double transX, final double transY, final double transZ,\n                                          final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return new GeoPoint(result.x, result.y, result.z);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#reverseModify(Vector,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reverse modify a point to produce a GeoPoint in normal space.\n   * @param point is the translated point.\n   * @param transX is the translation x value.\n   * @param transY is the translation y value.\n   * @param transZ is the translation z value.\n   * @param sinRA is the sine of the ascension angle.\n   * @param cosRA is the cosine of the ascension angle.\n   * @param sinHA is the sine of the height angle.\n   * @param cosHA is the cosine of the height angle.\n   * @return the original point.\n   */\n  protected static GeoPoint reverseModify(final Vector point, final double transX, final double transY, final double transZ,\n                                          final double sinRA, final double cosRA, final double sinHA, final double cosHA) {\n    final Vector result = point.rotateXZ(-sinHA, cosHA).rotateXY(-sinRA, cosRA).translate(-transX, -transY, -transZ);\n    return new GeoPoint(result.x, result.y, result.z);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b4e444678504caf66a8060b1d514383aa4feac0c","ec544d8bab0522461529d7ba4fbe68c09cf4793f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec544d8bab0522461529d7ba4fbe68c09cf4793f"],"ec544d8bab0522461529d7ba4fbe68c09cf4793f":["b4e444678504caf66a8060b1d514383aa4feac0c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b4e444678504caf66a8060b1d514383aa4feac0c","ec544d8bab0522461529d7ba4fbe68c09cf4793f"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ec544d8bab0522461529d7ba4fbe68c09cf4793f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ec544d8bab0522461529d7ba4fbe68c09cf4793f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}