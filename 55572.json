{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73d4619173d1f39081b010a24752a2a4abee0f68","date":1335123717,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel()<getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole faceted\n   * search again when the user asks for more values for the facet; The\n   * application can ask (getNumResults()) for more values than it needs to\n   * show, but keep getNumLabel() only the number it wants to immediately show.\n   * The slow-down caused by finding more values is negligible, because the\n   * slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode}, this limit is applied\n   * globally or per results node. In the global mode, if this limit is 3, only\n   * 3 top results would be labeled. In the per-node mode, if this limit is 3, 3\n   * top children of {@link #categoryPath the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth\n   * defined by {@link #getDepth()}.\n   * \n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole faceted\n   * search again when the user asks for more values for the facet; The\n   * application can ask (getNumResults()) for more values than it needs to\n   * show, but keep getNumLabel() only the number it wants to immediately show.\n   * The slow-down caused by finding more values is negligible, because the\n   * slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode}, this limit is applied\n   * globally or per results node. In the global mode, if this limit is 3, only\n   * 3 top results would be labeled. In the per-node mode, if this limit is 3, 3\n   * top children of {@link #categoryPath the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth\n   * defined by {@link #getDepth()}.\n   * \n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all \n   * results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole\n   * faceted search again when the user asks for more values for the facet;\n   * The application can ask (getNumResults()) for more values than it needs\n   * to show, but keep getNumLabel() only the number it wants to immediately\n   * show. The slow-down caused by finding more values is negligible, because\n   * the slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode},\n   * this limit is applied globally or per results node.\n   * In the global mode, if this limit is 3, \n   * only 3 top results would be labeled.\n   * In the per-node mode, if this limit is 3,\n   * 3 top children of {@link #getCategoryPath() the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth defined \n   * by {@link #getDepth()}.\n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getNumLabel().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getNumLabel().mjava","sourceNew":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole faceted\n   * search again when the user asks for more values for the facet; The\n   * application can ask (getNumResults()) for more values than it needs to\n   * show, but keep getNumLabel() only the number it wants to immediately show.\n   * The slow-down caused by finding more values is negligible, because the\n   * slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode}, this limit is applied\n   * globally or per results node. In the global mode, if this limit is 3, only\n   * 3 top results would be labeled. In the per-node mode, if this limit is 3, 3\n   * top children of {@link #categoryPath the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth\n   * defined by {@link #getDepth()}.\n   * \n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","sourceOld":"  /**\n   * If getNumLabel() &lt; getNumResults(), only the first getNumLabel() results\n   * will have their category paths calculated, and the rest will only be\n   * available as ordinals (category numbers) and will have null paths.\n   * <P>\n   * If Integer.MAX_VALUE is specified, all results are labled.\n   * <P>\n   * The purpose of this parameter is to avoid having to run the whole faceted\n   * search again when the user asks for more values for the facet; The\n   * application can ask (getNumResults()) for more values than it needs to\n   * show, but keep getNumLabel() only the number it wants to immediately show.\n   * The slow-down caused by finding more values is negligible, because the\n   * slowest part - finding the categories' paths, is avoided.\n   * <p>\n   * Depending on the {@link #getResultMode() LimitsMode}, this limit is applied\n   * globally or per results node. In the global mode, if this limit is 3, only\n   * 3 top results would be labeled. In the per-node mode, if this limit is 3, 3\n   * top children of {@link #categoryPath the target category} would be labeled,\n   * as well as 3 top children of each of them, and so forth, until the depth\n   * defined by {@link #getDepth()}.\n   * \n   * @see #getResultMode()\n   */\n  public final int getNumLabel() {\n    return numLabel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["73d4619173d1f39081b010a24752a2a4abee0f68","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["73d4619173d1f39081b010a24752a2a4abee0f68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"73d4619173d1f39081b010a24752a2a4abee0f68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["73d4619173d1f39081b010a24752a2a4abee0f68"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"73d4619173d1f39081b010a24752a2a4abee0f68":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}