{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","commits":[{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","sourceNew":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), false, factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testPreviousReaderIsPassed().mjava","sourceNew":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), false, factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPreviousReaderIsPassed() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    class MySearcherFactory extends SearcherFactory {\n      IndexReader lastReader = null;\n      IndexReader lastPreviousReader = null;\n      int called = 0;\n      @Override\n      public IndexSearcher newSearcher(IndexReader reader, IndexReader previousReader) throws IOException {\n        called++;\n        lastReader = reader;\n        lastPreviousReader = previousReader;\n        return super.newSearcher(reader, previousReader);\n      }\n    }\n\n    MySearcherFactory factory = new MySearcherFactory();\n    final SearcherManager sm = new SearcherManager(w, random().nextBoolean(), factory);\n    assertEquals(1, factory.called);\n    assertNull(factory.lastPreviousReader);\n    assertNotNull(factory.lastReader);\n    IndexSearcher acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n\n    final IndexReader lastReader = factory.lastReader;\n    // refresh\n    w.addDocument(new Document());\n    assertTrue(sm.maybeRefresh());\n\n    acquire = sm.acquire();\n    assertSame(factory.lastReader, acquire.getIndexReader());\n    sm.release(acquire);\n    assertNotNull(factory.lastPreviousReader);\n    assertSame(lastReader, factory.lastPreviousReader);\n    assertNotSame(factory.lastReader, lastReader);\n    assertEquals(2, factory.called);\n    w.close();\n    sm.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["e0dfae671422e7453a9199aa320f91427cd80d60","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}