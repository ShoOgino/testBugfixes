{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.perThreadBytes > maxBytesPerDWPT) {\n        // safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super\n        // important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.perThreadBytes > maxBytesPerDWPT) {\n        // safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super\n        // important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.perThreadBytes > maxBytesPerDWPT) {\n        // safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super\n        // important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.perThreadBytes > maxBytesPerDWPT) {\n        // safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super\n        // important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread, false);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = getFlushIfPending(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread, false);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread, false);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ab0e311d00c794eac70d67151d50cbb45ff810b","date":1304664391,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread, false);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread, false);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread, false);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","6ab0e311d00c794eac70d67151d50cbb45ff810b","f6f4cae61e16730201371ab7e9912721c19324e7","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":["18e20fa02735869173a20f36b8bfb855be5e5a13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    commitPerThreadBytes(perThread);\n    if (!perThread.flushPending) {\n      if (isUpdate) {\n        flushPolicy.onUpdate(this, perThread);\n      } else {\n        flushPolicy.onInsert(this, perThread);\n      }\n      if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n        // Safety check to prevent a single DWPT exceeding its RAM limit. This\n        // is super important since we can not address more than 2048 MB per DWPT\n        setFlushPending(perThread);\n        if (fullFlush) {\n          DocumentsWriterPerThread toBlock = internalTryCheckOutForFlush(perThread);\n          assert toBlock != null;\n          blockedFlushes.add(toBlock);\n        }\n      }\n    }\n    final DocumentsWriterPerThread flushingDWPT = tryCheckoutForFlush(perThread);\n    healthiness.updateStalled(this);\n    return flushingDWPT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doAfterDocument(ThreadState,boolean).mjava","sourceNew":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","sourceOld":"  synchronized DocumentsWriterPerThread doAfterDocument(ThreadState perThread,\n      boolean isUpdate) {\n    try {\n      commitPerThreadBytes(perThread);\n      if (!perThread.flushPending) {\n        if (isUpdate) {\n          flushPolicy.onUpdate(this, perThread);\n        } else {\n          flushPolicy.onInsert(this, perThread);\n        }\n        if (!perThread.flushPending && perThread.bytesUsed > hardMaxBytesPerDWPT) {\n          // Safety check to prevent a single DWPT exceeding its RAM limit. This\n          // is super important since we can not address more than 2048 MB per DWPT\n          setFlushPending(perThread);\n        }\n      }\n      final DocumentsWriterPerThread flushingDWPT;\n      if (fullFlush) {\n        if (perThread.flushPending) {\n          checkoutAndBlock(perThread);\n          flushingDWPT = nextPendingFlush();\n        } else {\n          flushingDWPT = null;\n        }\n      } else {\n       flushingDWPT = tryCheckoutForFlush(perThread);\n      }\n      return flushingDWPT;\n    } finally {\n      stallControl.updateStalled(this);\n      assert assertMemory();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"f6f4cae61e16730201371ab7e9912721c19324e7":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["f6f4cae61e16730201371ab7e9912721c19324e7"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","32f306edd62f81390a6e263e8b913f089f3e98a1"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["6ab0e311d00c794eac70d67151d50cbb45ff810b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["32f306edd62f81390a6e263e8b913f089f3e98a1","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}