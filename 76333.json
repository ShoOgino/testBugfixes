{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","commits":[{"id":"30e0912f3a3069b115cfea44ff612c44d6906386","date":1365631344,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = _TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    System.out.println(\"dir=\" + dir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = _TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = _TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    System.out.println(\"dir=\" + dir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = _TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = TestUtil.createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = TestUtil.createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = TestUtil.getTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Files.delete(tempDir.toPath());\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    tempDir.delete();\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":["30e0912f3a3069b115cfea44ff612c44d6906386"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Files.delete(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    File tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Files.delete(tempDir.toPath());\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22989c36ff05c657df26dd3377b37c9ad35859bc","date":1424477375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    IOUtils.rm(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Files.delete(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9","date":1454454426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    IOUtils.rm(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    IOUtils.rm(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    IOUtils.rm(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testIndexExistsOnNonExistentDirectory().mjava","sourceNew":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexExistsOnNonExistentDirectory() throws Exception {\n    Path tempDir = createTempDir(\"testIndexExistsOnNonExistentDirectory\");\n    IOUtils.rm(tempDir);\n    Directory dir = newFSDirectory(tempDir);\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"5a207d19eac354d649c3f0e2cce070017c78125e":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"b470f36a9372c97283360b1304eacbde22df6c0d":["22989c36ff05c657df26dd3377b37c9ad35859bc","fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["30e0912f3a3069b115cfea44ff612c44d6906386"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22989c36ff05c657df26dd3377b37c9ad35859bc":["f4abec28b874149a7223e32cc7a01704c27790de"],"30e0912f3a3069b115cfea44ff612c44d6906386":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30e0912f3a3069b115cfea44ff612c44d6906386"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9","b470f36a9372c97283360b1304eacbde22df6c0d"],"30e0912f3a3069b115cfea44ff612c44d6906386":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}