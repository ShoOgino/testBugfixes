{"path":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e33fd65b6439b984c75cc2e07551111fe904bacb","date":1376933118,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-5168\")\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-5168\")\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-5168\")\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49368dc30c6d7f57e2547707f2a26a2e790dc587","date":1378306664,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testGrandChildren().mjava","sourceNew":"  @Test\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"SOLR-5168\")\n  public void testGrandChildren() throws IOException {\n    assertQ(\n        req(\"q\", \"{!parent which=$parentfilter v=$children}\", \"children\",\n            \"{!parent which=$childrenfilter v=$grandchildren}\",\n            \"grandchildren\", \"grand_s:\" + \"x\", \"parentfilter\",\n            \"parent_s:[* TO *]\", \"childrenfilter\", \"child_s:[* TO *]\"),\n        sixParents);\n    // int loops = atLeast(1);\n    String grandChildren = xyz.get(random().nextInt(xyz.size()));\n    assertQ(\n        req(\"q\", \"+parent_s:(a e b) +_query_:\\\"{!parent which=$pq v=$chq}\\\"\",\n            \"chq\", \"{!parent which=$childfilter v=$grandchq}\", \"grandchq\",\n            \"+grand_s:\" + grandChildren + \" +grand_parentchild_s:(b* e* c*)\",\n            \"pq\", \"parent_s:[* TO *]\", \"childfilter\", \"child_s:[* TO *]\"),\n        beParents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e33fd65b6439b984c75cc2e07551111fe904bacb"],"31d4861802ca404d78ca1d15f4550eec415b9199":["637a392e2e05d4e1179ac3c532cfeef0cde977ba","e33fd65b6439b984c75cc2e07551111fe904bacb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e33fd65b6439b984c75cc2e07551111fe904bacb":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["e33fd65b6439b984c75cc2e07551111fe904bacb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["49368dc30c6d7f57e2547707f2a26a2e790dc587"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","31d4861802ca404d78ca1d15f4550eec415b9199","e33fd65b6439b984c75cc2e07551111fe904bacb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"e33fd65b6439b984c75cc2e07551111fe904bacb":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","49368dc30c6d7f57e2547707f2a26a2e790dc587"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}