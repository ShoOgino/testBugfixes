{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testRawFields().mjava","commits":[{"id":"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a","date":1429073859,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testRawFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRawFields() throws Exception\n  {    \n    String rawJson = \"{ \\\"raw\\\": 1.234, \\\"id\\\":\\\"111\\\" }\";\n    String rawXml = \"<hello>this is <some/><xml/></hello>\";\n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"json_s\", rawJson );\n    doc.addField( \"xml_s\", rawXml );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,json_s:[json],xml_s:[xml]\" );\n    \n    QueryRequest req = new QueryRequest( query );\n    req.setResponseParser(new BinaryResponseParser());\n    QueryResponse rsp = req.process(client);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 1, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    \n    // Check that the 'raw' fields are unchanged using the standard formats\n    assertEquals( rawJson, out1.get( \"json_s\" ) );\n    assertEquals( rawXml,  out1.get( \"xml_s\" ) );\n    \n//    // Check that unknown augmenters throw an error\n//    query.set( CommonParams.FL, \"id,[asdkgjahsdgjka]\" );\n//    try {\n//      rsp = client.query( query );\n//      fail(\"Should throw an exception for unknown transformer: \"+query.get(CommonParams.FL));\n//    }\n//    catch(SolrException ex) {\n//      assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n//    }\n\n    if(client instanceof EmbeddedSolrServer) {\n      return; // the EmbeddedSolrServer ignores the configured parser\n    }\n    \n    // Check raw JSON Output\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"json\");\n    \n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"json\"));\n    NamedList<Object> resp = client.request(req);\n    String raw = (String)resp.get(\"response\");\n    \n    // Check that the response parses as JSON\n    JSONParser parser = new JSONParser(raw);\n    int evt = parser.nextEvent();\n    while(evt!=JSONParser.EOF) {\n      evt = parser.nextEvent();\n    }\n    assertTrue(raw.indexOf(rawJson)>0); // no escaping\n    assertTrue(raw.indexOf('\"'+rawXml+'\"')>0); // quoted xml\n\n    // Check raw XML Output\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"xml\");\n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    resp = client.request(req);\n    raw = (String)resp.get(\"response\");\n    \n    // Check that we get raw xml and json is escaped\n    assertTrue(raw.indexOf('>'+rawJson+'<')>0); // escaped\n    assertTrue(raw.indexOf(rawXml)>0); // raw xml\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testRawFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testRawFields().mjava","sourceNew":"  @Test\n  public void testRawFields() throws Exception\n  {    \n    String rawJson = \"{ \\\"raw\\\": 1.234, \\\"id\\\":\\\"111\\\" }\";\n    String rawXml = \"<hello>this is <some/><xml/></hello>\";\n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\" );\n    doc.addField( \"name\", \"doc1\" );\n    doc.addField( \"json_s\", rawJson );\n    doc.addField( \"xml_s\", rawXml );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,json_s:[json],xml_s:[xml]\" );\n    \n    QueryRequest req = new QueryRequest( query );\n    req.setResponseParser(new BinaryResponseParser());\n    QueryResponse rsp = req.process(client);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 1, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    \n    // Check that the 'raw' fields are unchanged using the standard formats\n    assertEquals( rawJson, out1.get( \"json_s\" ) );\n    assertEquals( rawXml,  out1.get( \"xml_s\" ) );\n    \n//    // Check that unknown augmenters throw an error\n//    query.set( CommonParams.FL, \"id,[asdkgjahsdgjka]\" );\n//    try {\n//      rsp = client.query( query );\n//      fail(\"Should throw an exception for unknown transformer: \"+query.get(CommonParams.FL));\n//    }\n//    catch(SolrException ex) {\n//      assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n//    }\n\n    if(client instanceof EmbeddedSolrServer) {\n      return; // the EmbeddedSolrServer ignores the configured parser\n    }\n    \n    // Check raw JSON Output\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"json\");\n    \n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"json\"));\n    NamedList<Object> resp = client.request(req);\n    String raw = (String)resp.get(\"response\");\n    \n    // Check that the response parses as JSON\n    JSONParser parser = new JSONParser(raw);\n    int evt = parser.nextEvent();\n    while(evt!=JSONParser.EOF) {\n      evt = parser.nextEvent();\n    }\n    assertTrue(raw.indexOf(rawJson)>0); // no escaping\n    assertTrue(raw.indexOf('\"'+rawXml+'\"')>0); // quoted xml\n\n    // Check raw XML Output\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"xml\");\n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    resp = client.request(req);\n    raw = (String)resp.get(\"response\");\n    \n    // Check that we get raw xml and json is escaped\n    assertTrue(raw.indexOf('>'+rawJson+'<')>0); // escaped\n    assertTrue(raw.indexOf(rawXml)>0); // raw xml\n  }\n\n","sourceOld":"  @Test\n  public void testRawFields() throws Exception\n  {    \n    String rawJson = \"{ \\\"raw\\\": 1.234, \\\"id\\\":\\\"111\\\" }\";\n    String rawXml = \"<hello>this is <some/><xml/></hello>\";\n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"json_s\", rawJson );\n    doc.addField( \"xml_s\", rawXml );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,json_s:[json],xml_s:[xml]\" );\n    \n    QueryRequest req = new QueryRequest( query );\n    req.setResponseParser(new BinaryResponseParser());\n    QueryResponse rsp = req.process(client);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 1, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    \n    // Check that the 'raw' fields are unchanged using the standard formats\n    assertEquals( rawJson, out1.get( \"json_s\" ) );\n    assertEquals( rawXml,  out1.get( \"xml_s\" ) );\n    \n//    // Check that unknown augmenters throw an error\n//    query.set( CommonParams.FL, \"id,[asdkgjahsdgjka]\" );\n//    try {\n//      rsp = client.query( query );\n//      fail(\"Should throw an exception for unknown transformer: \"+query.get(CommonParams.FL));\n//    }\n//    catch(SolrException ex) {\n//      assertEquals(ErrorCode.BAD_REQUEST.code, ex.code());\n//    }\n\n    if(client instanceof EmbeddedSolrServer) {\n      return; // the EmbeddedSolrServer ignores the configured parser\n    }\n    \n    // Check raw JSON Output\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"json\");\n    \n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"json\"));\n    NamedList<Object> resp = client.request(req);\n    String raw = (String)resp.get(\"response\");\n    \n    // Check that the response parses as JSON\n    JSONParser parser = new JSONParser(raw);\n    int evt = parser.nextEvent();\n    while(evt!=JSONParser.EOF) {\n      evt = parser.nextEvent();\n    }\n    assertTrue(raw.indexOf(rawJson)>0); // no escaping\n    assertTrue(raw.indexOf('\"'+rawXml+'\"')>0); // quoted xml\n\n    // Check raw XML Output\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    query.set(\"fl\", \"id,json_s:[json],xml_s:[xml]\");\n    query.set(CommonParams.WT, \"xml\");\n    req = new QueryRequest( query );\n    req.setResponseParser(new NoOpResponseParser(\"xml\"));\n    resp = client.request(req);\n    raw = (String)resp.get(\"response\");\n    \n    // Check that we get raw xml and json is escaped\n    assertTrue(raw.indexOf('>'+rawJson+'<')>0); // escaped\n    assertTrue(raw.indexOf(rawXml)>0); // raw xml\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}