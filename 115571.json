{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6cc2915889370c9313ee1741da315e976bdd574"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6cc2915889370c9313ee1741da315e976bdd574","date":1422111819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":["e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  private void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    boolean missing = false;\n    int upto = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      if (length > MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + MemoryDocValuesFormat.MAX_BINARY_FIELD_LENGTH + \" but got length=\" + length + \" v=\" + v + \"; upto=\" + upto + \" values=\" + values);\n      }\n      upto++;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"24f89e8a6aac05753cde4c83d62a74356098200d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6cc2915889370c9313ee1741da315e976bdd574","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c6cc2915889370c9313ee1741da315e976bdd574"],"c6cc2915889370c9313ee1741da315e976bdd574":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6cc2915889370c9313ee1741da315e976bdd574","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c6cc2915889370c9313ee1741da315e976bdd574"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["24f89e8a6aac05753cde4c83d62a74356098200d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c6cc2915889370c9313ee1741da315e976bdd574":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}