{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","commits":[{"id":"3128e6d07d9fef0d1aa24f58b07133c9293131b2","date":1342190719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}