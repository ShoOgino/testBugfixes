{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#refillPositions().mjava","sourceNew":null,"sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              posIn.seek(posIn.getFilePointer() + payloadLength);\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n          if (indexHasOffsets) {\n            if ((posIn.readVInt() & 1) != 0) {\n              // offset length changed\n              posIn.readVInt();\n            }\n          }\n        }\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}