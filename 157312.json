{"path":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","commits":[{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createField(SimpleSpatialFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SimpleSpatialFieldInfo fieldInfo, Shape shape, boolean index, boolean store) {\n    int detailLevel = grid.getMaxLevelForPrecision(shape,distErrPct);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PrefixFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenizer. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    String fname = fieldInfo.getFieldName();\n    if( store ) {\n      //TODO figure out how to re-use original string instead of reconstituting it.\n      String wkt = grid.getSpatialContext().toString(shape);\n      if( index ) {\n        Field f = new Field(fname,wkt,TYPE_STORED);\n        f.setTokenStream(new CellTokenStream(cells.iterator()));\n        return f;\n      }\n      return new StoredField(fname,wkt);\n    }\n    \n    if( index ) {\n      return new Field(fname,new CellTokenStream(cells.iterator()),TYPE_UNSTORED);\n    }\n    \n    throw new UnsupportedOperationException(\"Fields need to be indexed or store [\"+fname+\"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e47768b261c28e7e6032060e8331475c81057953","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"e47768b261c28e7e6032060e8331475c81057953":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}