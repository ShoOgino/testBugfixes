{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    \n    afterNext();\n\n    if (nrMatchers >= minimumNrMatchers) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    \n    afterNext();\n\n    if (nrMatchers >= minimumNrMatchers) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    \n    afterNext();\n\n    if (nrMatchers >= minimumNrMatchers) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","date":1365610867,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    \n    afterNext();\n\n    if (nrMatchers >= minimumNrMatchers) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"56374313ec4613df1f728772dedcff8bb3cd419d":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56374313ec4613df1f728772dedcff8bb3cd419d"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["56374313ec4613df1f728772dedcff8bb3cd419d"],"56374313ec4613df1f728772dedcff8bb3cd419d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}