{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsStatisticsEquals(String,Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatisticsEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(info, leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(info, leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(info, leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(info, leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","086ffe31d8fba0110227db122974163709ecc1b4"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}