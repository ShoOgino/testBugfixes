{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxObjectNameFactory#createName(String,String,String).mjava","commits":[{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxObjectNameFactory#createName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/JmxObjectNameFactory#createName(String,String,String).mjava","sourceNew":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","sourceOld":"  /**\n   * Create a hierarchical name.\n   *\n   * @param type    metric class, eg. \"counters\", may be null for non-metric MBeans\n   * @param currentDomain  JMX domain\n   * @param name    object name\n   */\n  @Override\n  public ObjectName createName(String type, String currentDomain, String name) {\n    SolrMetricInfo metricInfo = SolrMetricInfo.of(name);\n    String safeName = metricInfo != null ? metricInfo.name : name;\n    safeName = safeName.replaceAll(\":\", \"_\");\n    // It turns out that ObjectName(String) mostly preserves key ordering\n    // as specified in the constructor (except for the 'type' key that ends\n    // up at top level) - unlike ObjectName(String, Map) constructor\n    // that seems to have a mind of its own...\n    StringBuilder sb = new StringBuilder();\n    if (domain.equals(currentDomain)) {\n      if (subdomains != null && subdomains.length > 1) {\n        // use only first segment as domain\n        sb.append(subdomains[0]);\n        sb.append(':');\n        // use remaining segments as properties\n        for (int i = 1; i < subdomains.length; i++) {\n          if (i > 1) {\n            sb.append(',');\n          }\n          sb.append(\"dom\");\n          sb.append(String.valueOf(i));\n          sb.append('=');\n          sb.append(subdomains[i]);\n        }\n        sb.append(','); // separate from other properties\n      } else {\n        sb.append(currentDomain.replaceAll(\":\", \"_\"));\n        sb.append(':');\n      }\n    } else {\n      sb.append(currentDomain);\n      sb.append(':');\n    }\n    if (props != null && props.length > 0) {\n      boolean added = false;\n      for (int i = 0; i < props.length; i += 2) {\n        if (props[i] == null || props[i].isEmpty()) {\n          continue;\n        }\n        if (props[i + 1] == null || props[i + 1].isEmpty()) {\n          continue;\n        }\n        sb.append(',');\n        sb.append(props[i]);\n        sb.append('=');\n        sb.append(props[i + 1]);\n        added = true;\n      }\n      if (added) {\n        sb.append(',');\n      }\n    }\n    if (metricInfo != null) {\n      sb.append(\"category=\");\n      sb.append(metricInfo.category.toString());\n      if (metricInfo.scope != null) {\n        sb.append(\",scope=\");\n        sb.append(metricInfo.scope);\n      }\n      // we could also split by type, but don't call it 'type' :)\n      // if (type != null) {\n      //   sb.append(\",class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\",name=\");\n      sb.append(safeName);\n    } else {\n      // make dotted names into hierarchies\n      String[] path = safeName.split(\"\\\\.\");\n      for (int i = 0; i < path.length - 1; i++) {\n        if (i > 0) {\n          sb.append(',');\n        }\n        sb.append(\"name\"); sb.append(String.valueOf(i));\n        sb.append('=');\n        sb.append(path[i]);\n      }\n      if (path.length > 1) {\n        sb.append(',');\n      }\n      // split by type\n      // if (type != null) {\n      //   sb.append(\"class=\");\n      //   sb.append(type);\n      // }\n      sb.append(\"name=\");\n      sb.append(path[path.length - 1]);\n    }\n\n    ObjectName objectName;\n\n    try {\n      objectName = new ObjectName(sb.toString());\n    } catch (MalformedObjectNameException e) {\n      throw new RuntimeException(sb.toString(), e);\n    }\n\n    return objectName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["122c889ac8944e19f984ba4306b02a8742e914a7"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}