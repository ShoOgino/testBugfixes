{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeTable(Iterable[Number],FormatAndBits,int,NormMap,int).mjava","commits":[{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeTable(Iterable[Number],FormatAndBits,int,NormMap,int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeTable(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues, int numOrds) throws IOException {\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n    \n    data.writeVInt(numOrds);\n    for (int i = 0; i < numOrds; i++) {\n      data.writeByte(uniqueValues.values[i]);\n    }\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      int ord = uniqueValues.ord(nv.byteValue());\n      if (ord < numOrds) {\n        writer.add(ord);\n      } else {\n        writer.add(numOrds); // collapses all ords >= numOrds into a single value\n      }\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeTable(Iterable[Number],FormatAndBits,int,NormMap,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeTable(Iterable[Number],FormatAndBits,int,NormMap,int).mjava","sourceNew":"  private void writeTable(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues, int numOrds) throws IOException {\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n    \n    data.writeVInt(numOrds);\n    for (int i = 0; i < numOrds; i++) {\n      data.writeByte(uniqueValues.values[i]);\n    }\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      int ord = uniqueValues.ord(nv.byteValue());\n      if (ord < numOrds) {\n        writer.add(ord);\n      } else {\n        writer.add(numOrds); // collapses all ords >= numOrds into a single value\n      }\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void writeTable(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues, int numOrds) throws IOException {\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n    \n    data.writeVInt(numOrds);\n    for (int i = 0; i < numOrds; i++) {\n      data.writeByte(uniqueValues.values[i]);\n    }\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      int ord = uniqueValues.ord(nv.byteValue());\n      if (ord < numOrds) {\n        writer.add(ord);\n      } else {\n        writer.add(numOrds); // collapses all ords >= numOrds into a single value\n      }\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c3fae32338d82a0710e1756793faba13dcb598b"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}